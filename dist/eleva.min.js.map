{"version":3,"file":"eleva.min.js","sources":["../src/modules/TemplateEngine.js","../src/modules/Signal.js","../src/modules/Emitter.js","../src/modules/Renderer.js","../src/core/Eleva.js"],"sourcesContent":["\"use strict\";\n\n/**\n * @class üîí TemplateEngine\n * @classdesc Secure interpolation & dynamic attribute parsing.\n * Provides methods to parse template strings by replacing interpolation expressions\n * with dynamic data values and to evaluate expressions within a given data context.\n */\nexport class TemplateEngine {\n  /**\n   * Parses a template string and replaces interpolation expressions with corresponding values.\n   *\n   * @param {string} template - The template string containing expressions in the format `{{ expression }}`.\n   * @param {Object<string, any>} data - The data object to use for evaluating expressions.\n   * @returns {string} The resulting string with evaluated values.\n   */\n  static parse(template, data) {\n    return template.replace(/\\{\\{\\s*(.*?)\\s*\\}\\}/g, (_, expr) => {\n      const value = this.evaluate(expr, data);\n      return value === undefined ? \"\" : value;\n    });\n  }\n\n  /**\n   * Evaluates a JavaScript expression using the provided data context.\n   *\n   * @param {string} expr - The JavaScript expression to evaluate.\n   * @param {Object<string, any>} data - The data context for evaluating the expression.\n   * @returns {any} The result of the evaluated expression, or an empty string if undefined or on error.\n   */\n  static evaluate(expr, data) {\n    try {\n      const keys = Object.keys(data);\n      const values = Object.values(data);\n      const result = new Function(...keys, `return ${expr}`)(...values);\n      return result === undefined ? \"\" : result;\n    } catch (error) {\n      console.error(`Template evaluation error:`, {\n        expression: expr,\n        data,\n        error: error.message,\n      });\n      return \"\";\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class ‚ö° Signal\n * @classdesc Fine-grained reactivity.\n * A reactive data holder that notifies registered watchers when its value changes,\n * enabling fine-grained DOM patching rather than full re-renders.\n */\nexport class Signal {\n  /**\n   * Creates a new Signal instance.\n   *\n   * @param {*} value - The initial value of the signal.\n   */\n  constructor(value) {\n    this._value = value;\n    this._watchers = new Set();\n  }\n\n  /**\n   * Gets the current value of the signal.\n   *\n   * @returns {*} The current value.\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * Sets a new value for the signal and notifies all registered watchers if the value has changed.\n   *\n   * @param {*} newVal - The new value to set.\n   */\n  set value(newVal) {\n    if (newVal !== this._value) {\n      this._value = newVal;\n      this._watchers.forEach((fn) => fn(newVal));\n    }\n  }\n\n  /**\n   * Registers a watcher function that will be called whenever the signal's value changes.\n   *\n   * @param {function(any): void} fn - The callback function to invoke on value change.\n   * @returns {function(): boolean} A function to unsubscribe the watcher.\n   */\n  watch(fn) {\n    this._watchers.add(fn);\n    return () => this._watchers.delete(fn);\n  }\n}\n","\"use strict\";\n\n/**\n * @class üéôÔ∏è Emitter\n * @classdesc Robust inter-component communication with event bubbling.\n * Implements a basic publish-subscribe pattern for event handling, allowing components\n * to communicate through custom events.\n */\nexport class Emitter {\n  /**\n   * Creates a new Emitter instance.\n   */\n  constructor() {\n    /** @type {Object.<string, Function[]>} */\n    this.events = {};\n  }\n\n  /**\n   * Registers an event handler for the specified event.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function(...any): void} handler - The function to call when the event is emitted.\n   */\n  on(event, handler) {\n    (this.events[event] || (this.events[event] = [])).push(handler);\n  }\n\n  /**\n   * Removes a previously registered event handler.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function(...any): void} handler - The handler function to remove.\n   */\n  off(event, handler) {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter((h) => h !== handler);\n    }\n  }\n\n  /**\n   * Emits an event, invoking all handlers registered for that event.\n   *\n   * @param {string} event - The event name.\n   * @param {...any} args - Additional arguments to pass to the event handlers.\n   */\n  emit(event, ...args) {\n    (this.events[event] || []).forEach((handler) => handler(...args));\n  }\n}\n","\"use strict\";\n\n/**\n * @class üé® Renderer\n * @classdesc Handles DOM patching, diffing, and attribute updates.\n * Provides methods for efficient DOM updates by diffing the new and old DOM structures\n * and applying only the necessary changes.\n */\nexport class Renderer {\n  /**\n   * Patches the DOM of a container element with new HTML content.\n   *\n   * @param {HTMLElement} container - The container element to patch.\n   * @param {string} newHtml - The new HTML content to apply.\n   */\n  patchDOM(container, newHtml) {\n    const tempContainer = document.createElement(\"div\");\n    tempContainer.innerHTML = newHtml;\n    this.diff(container, tempContainer);\n  }\n\n  /**\n   * Diffs two DOM trees (old and new) and applies updates to the old DOM.\n   *\n   * @param {HTMLElement} oldParent - The original DOM element.\n   * @param {HTMLElement} newParent - The new DOM element.\n   */\n  diff(oldParent, newParent) {\n    const oldNodes = Array.from(oldParent.childNodes);\n    const newNodes = Array.from(newParent.childNodes);\n    const max = Math.max(oldNodes.length, newNodes.length);\n    for (let i = 0; i < max; i++) {\n      const oldNode = oldNodes[i];\n      const newNode = newNodes[i];\n\n      // Case 1: Append new nodes that don't exist in the old tree.\n      if (!oldNode && newNode) {\n        oldParent.appendChild(newNode.cloneNode(true));\n        continue;\n      }\n      // Case 2: Remove old nodes not present in the new tree.\n      if (oldNode && !newNode) {\n        oldParent.removeChild(oldNode);\n        continue;\n      }\n\n      // Case 3: For element nodes, compare keys if available.\n      if (\n        oldNode.nodeType === Node.ELEMENT_NODE &&\n        newNode.nodeType === Node.ELEMENT_NODE\n      ) {\n        const oldKey = oldNode.getAttribute(\"key\");\n        const newKey = newNode.getAttribute(\"key\");\n        if (oldKey || newKey) {\n          if (oldKey !== newKey) {\n            oldParent.replaceChild(newNode.cloneNode(true), oldNode);\n            continue;\n          }\n        }\n      }\n\n      // Case 4: Replace nodes if types or tag names differ.\n      if (\n        oldNode.nodeType !== newNode.nodeType ||\n        oldNode.nodeName !== newNode.nodeName\n      ) {\n        oldParent.replaceChild(newNode.cloneNode(true), oldNode);\n        continue;\n      }\n      // Case 5: For text nodes, update content if different.\n      if (oldNode.nodeType === Node.TEXT_NODE) {\n        if (oldNode.nodeValue !== newNode.nodeValue) {\n          oldNode.nodeValue = newNode.nodeValue;\n        }\n        continue;\n      }\n      // Case 6: For element nodes, update attributes and then diff children.\n      if (oldNode.nodeType === Node.ELEMENT_NODE) {\n        this.updateAttributes(oldNode, newNode);\n        this.diff(oldNode, newNode);\n      }\n    }\n  }\n\n  /**\n   * Updates the attributes of an element to match those of a new element.\n   *\n   * @param {HTMLElement} oldEl - The element to update.\n   * @param {HTMLElement} newEl - The element providing the updated attributes.\n   */\n  updateAttributes(oldEl, newEl) {\n    const attributeToPropertyMap = {\n      value: \"value\",\n      checked: \"checked\",\n      selected: \"selected\",\n      disabled: \"disabled\",\n    };\n\n    // Remove old attributes that no longer exist.\n    Array.from(oldEl.attributes).forEach((attr) => {\n      if (attr.name.startsWith(\"@\")) return;\n      if (!newEl.hasAttribute(attr.name)) {\n        oldEl.removeAttribute(attr.name);\n      }\n    });\n    // Add or update attributes from newEl.\n    Array.from(newEl.attributes).forEach((attr) => {\n      if (attr.name.startsWith(\"@\")) return;\n      if (oldEl.getAttribute(attr.name) !== attr.value) {\n        oldEl.setAttribute(attr.name, attr.value);\n        if (attributeToPropertyMap[attr.name]) {\n          oldEl[attributeToPropertyMap[attr.name]] = attr.value;\n        } else if (attr.name in oldEl) {\n          oldEl[attr.name] = attr.value;\n        }\n      }\n    });\n  }\n}\n","\"use strict\";\n\nimport { TemplateEngine } from \"../modules/TemplateEngine.js\";\nimport { Signal } from \"../modules/Signal.js\";\nimport { Emitter } from \"../modules/Emitter.js\";\nimport { Renderer } from \"../modules/Renderer.js\";\n\n/**\n * @typedef {Object} ComponentDefinition\n * @property {function(Object<string, any>): (Object<string, any>|Promise<Object<string, any>>)} [setup]\n *           A setup function that initializes the component state and returns an object or a promise that resolves to an object.\n * @property {function(Object<string, any>): string} template\n *           A function that returns the HTML template string for the component.\n * @property {function(Object<string, any>): string} [style]\n *           An optional function that returns scoped CSS styles as a string.\n * @property {Object<string, ComponentDefinition>} [children]\n *           An optional mapping of CSS selectors to child component definitions.\n */\n\n/**\n * @class üß© Eleva\n * @classdesc Signal-based component runtime framework with lifecycle hooks, scoped styles, and plugin support.\n * Manages component registration, plugin integration, event handling, and DOM rendering.\n */\nexport class Eleva {\n  /**\n   * Creates a new Eleva instance.\n   *\n   * @param {string} name - The name of the Eleva instance.\n   * @param {Object<string, any>} [config={}] - Optional configuration for the instance.\n   */\n  constructor(name, config = {}) {\n    /** @type {string} */\n    this.name = name;\n    /** @type {Object<string, any>} */\n    this.config = config;\n    /** @type {Object<string, ComponentDefinition>} */\n    this._components = {};\n    /** @type {Array<Object>} */\n    this._plugins = [];\n    /** @private */\n    this._lifecycleHooks = [\n      \"onBeforeMount\",\n      \"onMount\",\n      \"onBeforeUpdate\",\n      \"onUpdate\",\n      \"onUnmount\",\n    ];\n    /** @private {boolean} */\n    this._isMounted = false;\n    this.emitter = new Emitter();\n    this.renderer = new Renderer();\n  }\n\n  /**\n   * Integrates a plugin with the Eleva framework.\n   *\n   * @param {Object} plugin - The plugin object which should have an `install` function.\n   * @param {Object<string, any>} [options={}] - Optional options to pass to the plugin.\n   * @returns {Eleva} The Eleva instance (for chaining).\n   */\n  use(plugin, options = {}) {\n    if (typeof plugin.install === \"function\") {\n      plugin.install(this, options);\n    }\n    this._plugins.push(plugin);\n    return this;\n  }\n\n  /**\n   * Registers a component with the Eleva instance.\n   *\n   * @param {string} name - The name of the component.\n   * @param {ComponentDefinition} definition - The component definition including setup, template, style, and children.\n   * @returns {Eleva} The Eleva instance (for chaining).\n   */\n  component(name, definition) {\n    this._components[name] = definition;\n    return this;\n  }\n\n  /**\n   * Mounts a registered component to a DOM element.\n   *\n   * @param {HTMLElement} container - A DOM element where the component will be mounted.\n   * @param {string|ComponentDefinition} compName - The name of the component to mount or a component definition.\n   * @param {Object<string, any>} [props={}] - Optional properties to pass to the component.\n   * @returns {object|Promise<object>} An object representing the mounted component instance, or a Promise that resolves to it for asynchronous setups.\n   * @throws {Error} If the container is not found or if the component is not registered.\n   */\n  mount(container, compName, props = {}) {\n    if (!container) throw new Error(`Container not found: ${container}`);\n\n    let definition;\n    if (typeof compName === \"string\") {\n      definition = this._components[compName];\n      if (!definition)\n        throw new Error(`Component \"${compName}\" not registered.`);\n    } else if (typeof compName === \"object\") {\n      definition = compName;\n    } else {\n      throw new Error(\"Invalid component parameter.\");\n    }\n\n    const { setup, template, style, children } = definition;\n    const context = {\n      props,\n      emit: this.emitter.emit.bind(this.emitter),\n      on: this.emitter.on.bind(this.emitter),\n      signal: (v) => new Signal(v),\n      ...this._prepareLifecycleHooks(),\n    };\n\n    /**\n     * Processes the mounting of the component.\n     *\n     * @param {Object<string, any>} data - Data returned from the component's setup function.\n     * @returns {object} An object with the container, merged context data, and an unmount function.\n     */\n    const processMount = (data) => {\n      const mergedContext = { ...context, ...data };\n      const watcherUnsubscribers = [];\n      const childInstances = [];\n\n      if (!this._isMounted) {\n        mergedContext.onBeforeMount && mergedContext.onBeforeMount();\n      } else {\n        mergedContext.onBeforeUpdate && mergedContext.onBeforeUpdate();\n      }\n\n      /**\n       * Renders the component by parsing the template, patching the DOM,\n       * processing events, injecting styles, and mounting child components.\n       */\n      const render = () => {\n        const newHtml = TemplateEngine.parse(\n          template(mergedContext),\n          mergedContext\n        );\n        this.renderer.patchDOM(container, newHtml);\n        this._processEvents(container, mergedContext);\n        this._injectStyles(container, compName, style, mergedContext);\n        this._mountChildren(container, children, childInstances);\n        if (!this._isMounted) {\n          mergedContext.onMount && mergedContext.onMount();\n          this._isMounted = true;\n        } else {\n          mergedContext.onUpdate && mergedContext.onUpdate();\n        }\n      };\n\n      Object.values(data).forEach((val) => {\n        if (val instanceof Signal) watcherUnsubscribers.push(val.watch(render));\n      });\n\n      render();\n\n      return {\n        container,\n        data: mergedContext,\n        /**\n         * Unmounts the component, cleaning up watchers, child components, and clearing the container.\n         *\n         * @returns {void}\n         */\n        unmount: () => {\n          watcherUnsubscribers.forEach((fn) => fn());\n          childInstances.forEach((child) => child.unmount());\n          mergedContext.onUnmount && mergedContext.onUnmount();\n          container.innerHTML = \"\";\n        },\n      };\n    };\n\n    // Handle asynchronous setup.\n    return Promise.resolve(\n      typeof setup === \"function\" ? setup(context) : {}\n    ).then((data) => processMount(data));\n  }\n\n  /**\n   * Prepares default no-operation lifecycle hook functions.\n   *\n   * @returns {Object<string, function(): void>} An object with keys for lifecycle hooks mapped to empty functions.\n   * @private\n   */\n  _prepareLifecycleHooks() {\n    return this._lifecycleHooks.reduce((acc, hook) => {\n      acc[hook] = () => {};\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Processes DOM elements for event binding based on attributes starting with \"@\".\n   *\n   * @param {HTMLElement} container - The container element in which to search for events.\n   * @param {Object<string, any>} context - The current context containing event handler definitions.\n   * @private\n   */\n  _processEvents(container, context) {\n    container.querySelectorAll(\"*\").forEach((el) => {\n      [...el.attributes].forEach(({ name, value }) => {\n        if (name.startsWith(\"@\")) {\n          const event = name.slice(1);\n          const handler = TemplateEngine.evaluate(value, context);\n          if (typeof handler === \"function\") {\n            el.addEventListener(event, handler);\n            el.removeAttribute(name);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Injects scoped styles into the component's container.\n   *\n   * @param {HTMLElement} container - The container element.\n   * @param {string} compName - The component name used to identify the style element.\n   * @param {function(Object<string, any>): string} [styleFn] - A function that returns CSS styles as a string.\n   * @param {Object<string, any>} context - The current context for style interpolation.\n   * @private\n   */\n  _injectStyles(container, compName, styleFn, context) {\n    if (styleFn) {\n      let styleEl = container.querySelector(\n        `style[data-eleva-style=\"${compName}\"]`\n      );\n      if (!styleEl) {\n        styleEl = document.createElement(\"style\");\n        styleEl.setAttribute(\"data-eleva-style\", compName);\n        container.appendChild(styleEl);\n      }\n      styleEl.textContent = TemplateEngine.parse(styleFn(context), context);\n    }\n  }\n\n  /**\n   * Mounts child components within the parent component's container.\n   *\n   * @param {HTMLElement} container - The parent container element.\n   * @param {Object<string, ComponentDefinition>} [children] - An object mapping child component selectors to their definitions.\n   * @param {Array<object>} childInstances - An array to store the mounted child component instances.\n   * @private\n   */\n  _mountChildren(container, children, childInstances) {\n    childInstances.forEach((child) => child.unmount());\n    childInstances.length = 0;\n\n    Object.keys(children || {}).forEach((childSelector) => {\n      container.querySelectorAll(childSelector).forEach((childEl) => {\n        const props = {};\n        [...childEl.attributes].forEach(({ name, value }) => {\n          if (name.startsWith(\"eleva-prop-\")) {\n            props[name.slice(\"eleva-prop-\".length)] = value;\n          }\n        });\n        const instance = this.mount(childEl, children[childSelector], props);\n        childInstances.push(instance);\n      });\n    });\n  }\n}\n"],"names":["TemplateEngine","parse","template","data","replace","_","expr","value","this","evaluate","undefined","keys","Object","values","result","Function","error","console","expression","message","Signal","constructor","_value","_watchers","Set","newVal","forEach","fn","watch","add","delete","Emitter","events","on","event","handler","push","off","filter","h","emit","args","Renderer","patchDOM","container","newHtml","tempContainer","document","createElement","innerHTML","diff","oldParent","newParent","oldNodes","Array","from","childNodes","newNodes","max","Math","length","i","oldNode","newNode","nodeType","Node","ELEMENT_NODE","oldKey","getAttribute","newKey","replaceChild","cloneNode","nodeName","TEXT_NODE","updateAttributes","nodeValue","removeChild","appendChild","oldEl","newEl","attributeToPropertyMap","checked","selected","disabled","attributes","attr","name","startsWith","hasAttribute","removeAttribute","setAttribute","config","_components","_plugins","_lifecycleHooks","_isMounted","emitter","renderer","use","plugin","options","install","component","definition","mount","compName","props","Error","setup","style","children","context","bind","signal","v","_prepareLifecycleHooks","processMount","mergedContext","watcherUnsubscribers","childInstances","onBeforeUpdate","onBeforeMount","render","_processEvents","_injectStyles","_mountChildren","onUpdate","onMount","val","unmount","child","onUnmount","Promise","resolve","then","reduce","acc","hook","querySelectorAll","el","slice","addEventListener","styleFn","styleEl","querySelector","textContent","childSelector","childEl","instance"],"mappings":"sOAQO,MAAMA,EAQX,YAAOC,CAAMC,EAAUC,GACrB,OAAOD,EAASE,QAAQ,wBAAwB,CAACC,EAAGC,KAClD,MAAMC,EAAQC,KAAKC,SAASH,EAAMH,GAClC,YAAiBO,IAAVH,EAAsB,GAAKA,CAAK,GAE3C,CASA,eAAOE,CAASH,EAAMH,GACpB,IACE,MAAMQ,EAAOC,OAAOD,KAAKR,GACnBU,EAASD,OAAOC,OAAOV,GACvBW,EAAS,IAAIC,YAAYJ,EAAM,UAAUL,IAAhC,IAA2CO,GAC1D,YAAkBH,IAAXI,EAAuB,GAAKA,CACpC,CAAC,MAAOE,GAMP,OALAC,QAAQD,MAAM,6BAA8B,CAC1CE,WAAYZ,EACZH,OACAa,MAAOA,EAAMG,UAER,EACT,CACF,ECpCK,MAAMC,EAMXC,WAAAA,CAAYd,GACVC,KAAKc,OAASf,EACdC,KAAKe,UAAY,IAAIC,GACvB,CAOA,SAAIjB,GACF,OAAOC,KAAKc,MACd,CAOA,SAAIf,CAAMkB,GACJA,IAAWjB,KAAKc,SAClBd,KAAKc,OAASG,EACdjB,KAAKe,UAAUG,SAASC,GAAOA,EAAGF,KAEtC,CAQAG,KAAAA,CAAMD,GAEJ,OADAnB,KAAKe,UAAUM,IAAIF,GACZ,IAAMnB,KAAKe,UAAUO,OAAOH,EACrC,ECzCK,MAAMI,EAIXV,WAAAA,GAEEb,KAAKwB,OAAS,CAAE,CAClB,CAQAC,EAAAA,CAAGC,EAAOC,IACP3B,KAAKwB,OAAOE,KAAW1B,KAAKwB,OAAOE,GAAS,KAAKE,KAAKD,EACzD,CAQAE,GAAAA,CAAIH,EAAOC,GACL3B,KAAKwB,OAAOE,KACd1B,KAAKwB,OAAOE,GAAS1B,KAAKwB,OAAOE,GAAOI,QAAQC,GAAMA,IAAMJ,IAEhE,CAQAK,IAAAA,CAAKN,KAAUO,IACZjC,KAAKwB,OAAOE,IAAU,IAAIR,SAASS,GAAYA,KAAWM,IAC7D,ECvCK,MAAMC,EAOXC,QAAAA,CAASC,EAAWC,GAClB,MAAMC,EAAgBC,SAASC,cAAc,OAC7CF,EAAcG,UAAYJ,EAC1BrC,KAAK0C,KAAKN,EAAWE,EACvB,CAQAI,IAAAA,CAAKC,EAAWC,GACd,MAAMC,EAAWC,MAAMC,KAAKJ,EAAUK,YAChCC,EAAWH,MAAMC,KAAKH,EAAUI,YAChCE,EAAMC,KAAKD,IAAIL,EAASO,OAAQH,EAASG,QAC/C,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAKG,IAAK,CAC5B,MAAMC,EAAUT,EAASQ,GACnBE,EAAUN,EAASI,GAGzB,GAAKC,IAAWC,EAKhB,IAAID,GAAYC,EAAhB,CAMA,GACED,EAAQE,WAAaC,KAAKC,cAC1BH,EAAQC,WAAaC,KAAKC,aAC1B,CACA,MAAMC,EAASL,EAAQM,aAAa,OAC9BC,EAASN,EAAQK,aAAa,OACpC,IAAID,GAAUE,IACRF,IAAWE,EAAQ,CACrBlB,EAAUmB,aAAaP,EAAQQ,WAAU,GAAOT,GAChD,QACF,CAEJ,CAIEA,EAAQE,WAAaD,EAAQC,UAC7BF,EAAQU,WAAaT,EAAQS,SAM3BV,EAAQE,WAAaC,KAAKQ,UAO1BX,EAAQE,WAAaC,KAAKC,eAC5B1D,KAAKkE,iBAAiBZ,EAASC,GAC/BvD,KAAK0C,KAAKY,EAASC,IARfD,EAAQa,YAAcZ,EAAQY,YAChCb,EAAQa,UAAYZ,EAAQY,WAN9BxB,EAAUmB,aAAaP,EAAQQ,WAAU,GAAOT,EAtBlD,MAFEX,EAAUyB,YAAYd,QALtBX,EAAU0B,YAAYd,EAAQQ,WAAU,GA4C5C,CACF,CAQAG,gBAAAA,CAAiBI,EAAOC,GACtB,MAAMC,EAAyB,CAC7BzE,MAAO,QACP0E,QAAS,UACTC,SAAU,WACVC,SAAU,YAIZ7B,MAAMC,KAAKuB,EAAMM,YAAY1D,SAAS2D,IAChCA,EAAKC,KAAKC,WAAW,MACpBR,EAAMS,aAAaH,EAAKC,OAC3BR,EAAMW,gBAAgBJ,EAAKC,KAC7B,IAGFhC,MAAMC,KAAKwB,EAAMK,YAAY1D,SAAS2D,IAChCA,EAAKC,KAAKC,WAAW,MACrBT,EAAMV,aAAaiB,EAAKC,QAAUD,EAAK9E,QACzCuE,EAAMY,aAAaL,EAAKC,KAAMD,EAAK9E,OAC/ByE,EAAuBK,EAAKC,MAC9BR,EAAME,EAAuBK,EAAKC,OAASD,EAAK9E,MACvC8E,EAAKC,QAAQR,IACtBA,EAAMO,EAAKC,MAAQD,EAAK9E,OAE5B,GAEJ,SC7FK,MAOLc,WAAAA,CAAYiE,EAAMK,EAAS,IAEzBnF,KAAK8E,KAAOA,EAEZ9E,KAAKmF,OAASA,EAEdnF,KAAKoF,YAAc,CAAE,EAErBpF,KAAKqF,SAAW,GAEhBrF,KAAKsF,gBAAkB,CACrB,gBACA,UACA,iBACA,WACA,aAGFtF,KAAKuF,YAAa,EAClBvF,KAAKwF,QAAU,IAAIjE,EACnBvB,KAAKyF,SAAW,IAAIvD,CACtB,CASAwD,GAAAA,CAAIC,EAAQC,EAAU,IAKpB,MAJ8B,mBAAnBD,EAAOE,SAChBF,EAAOE,QAAQ7F,KAAM4F,GAEvB5F,KAAKqF,SAASzD,KAAK+D,GACZ3F,IACT,CASA8F,SAAAA,CAAUhB,EAAMiB,GAEd,OADA/F,KAAKoF,YAAYN,GAAQiB,EAClB/F,IACT,CAWAgG,KAAAA,CAAM5D,EAAW6D,EAAUC,EAAQ,CAAA,GACjC,IAAK9D,EAAW,MAAM,IAAI+D,MAAM,wBAAwB/D,KAExD,IAAI2D,EACJ,GAAwB,iBAAbE,GAET,GADAF,EAAa/F,KAAKoF,YAAYa,IACzBF,EACH,MAAM,IAAII,MAAM,cAAcF,0BAC3B,IAAwB,iBAAbA,EAGhB,MAAM,IAAIE,MAAM,gCAFhBJ,EAAaE,CAGf,CAEA,MAAMG,MAAEA,EAAK1G,SAAEA,EAAQ2G,MAAEA,EAAKC,SAAEA,GAAaP,EACvCQ,EAAU,CACdL,QACAlE,KAAMhC,KAAKwF,QAAQxD,KAAKwE,KAAKxG,KAAKwF,SAClC/D,GAAIzB,KAAKwF,QAAQ/D,GAAG+E,KAAKxG,KAAKwF,SAC9BiB,OAASC,GAAM,IAAI9F,EAAO8F,MACvB1G,KAAK2G,0BASJC,EAAgBjH,IACpB,MAAMkH,EAAgB,IAAKN,KAAY5G,GACjCmH,EAAuB,GACvBC,EAAiB,GAElB/G,KAAKuF,WAGRsB,EAAcG,gBAAkBH,EAAcG,iBAF9CH,EAAcI,eAAiBJ,EAAcI,gBAS/C,MAAMC,EAASA,KACb,MAAM7E,EAAU7C,EAAeC,MAC7BC,EAASmH,GACTA,GAEF7G,KAAKyF,SAAStD,SAASC,EAAWC,GAClCrC,KAAKmH,eAAe/E,EAAWyE,GAC/B7G,KAAKoH,cAAchF,EAAW6D,EAAUI,EAAOQ,GAC/C7G,KAAKqH,eAAejF,EAAWkE,EAAUS,GACpC/G,KAAKuF,WAIRsB,EAAcS,UAAYT,EAAcS,YAHxCT,EAAcU,SAAWV,EAAcU,UACvCvH,KAAKuF,YAAa,EAGpB,EASF,OANAnF,OAAOC,OAAOV,GAAMuB,SAASsG,IACvBA,aAAe5G,GAAQkG,EAAqBlF,KAAK4F,EAAIpG,MAAM8F,GAAQ,IAGzEA,IAEO,CACL9E,YACAzC,KAAMkH,EAMNY,QAASA,KACPX,EAAqB5F,SAASC,GAAOA,MACrC4F,EAAe7F,SAASwG,GAAUA,EAAMD,YACxCZ,EAAcc,WAAad,EAAcc,YACzCvF,EAAUK,UAAY,EAAE,EAE3B,EAIH,OAAOmF,QAAQC,QACI,mBAAVzB,EAAuBA,EAAMG,GAAW,CAAA,GAC/CuB,MAAMnI,GAASiH,EAAajH,IAChC,CAQAgH,sBAAAA,GACE,OAAO3G,KAAKsF,gBAAgByC,QAAO,CAACC,EAAKC,KACvCD,EAAIC,GAAQ,OACLD,IACN,GACL,CASAb,cAAAA,CAAe/E,EAAWmE,GACxBnE,EAAU8F,iBAAiB,KAAKhH,SAASiH,IACvC,IAAIA,EAAGvD,YAAY1D,SAAQ,EAAG4D,OAAM/E,YAClC,GAAI+E,EAAKC,WAAW,KAAM,CACxB,MAAMrD,EAAQoD,EAAKsD,MAAM,GACnBzG,EAAUnC,EAAeS,SAASF,EAAOwG,GACxB,mBAAZ5E,IACTwG,EAAGE,iBAAiB3G,EAAOC,GAC3BwG,EAAGlD,gBAAgBH,GAEvB,IACA,GAEN,CAWAsC,aAAAA,CAAchF,EAAW6D,EAAUqC,EAAS/B,GAC1C,GAAI+B,EAAS,CACX,IAAIC,EAAUnG,EAAUoG,cACtB,2BAA2BvC,OAExBsC,IACHA,EAAUhG,SAASC,cAAc,SACjC+F,EAAQrD,aAAa,mBAAoBe,GACzC7D,EAAUiC,YAAYkE,IAExBA,EAAQE,YAAcjJ,EAAeC,MAAM6I,EAAQ/B,GAAUA,EAC/D,CACF,CAUAc,cAAAA,CAAejF,EAAWkE,EAAUS,GAClCA,EAAe7F,SAASwG,GAAUA,EAAMD,YACxCV,EAAe3D,OAAS,EAExBhD,OAAOD,KAAKmG,GAAY,CAAE,GAAEpF,SAASwH,IACnCtG,EAAU8F,iBAAiBQ,GAAexH,SAASyH,IACjD,MAAMzC,EAAQ,CAAE,EAChB,IAAIyC,EAAQ/D,YAAY1D,SAAQ,EAAG4D,OAAM/E,YACnC+E,EAAKC,WAAW,iBAClBmB,EAAMpB,EAAKsD,MAAM,KAAyBrI,EAC5C,IAEF,MAAM6I,EAAW5I,KAAKgG,MAAM2C,EAASrC,EAASoC,GAAgBxC,GAC9Da,EAAenF,KAAKgH,EAAS,GAC7B,GAEN"}