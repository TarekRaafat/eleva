{"version":3,"file":"router.umd.js","sources":["../../src/plugins/Router.js"],"sourcesContent":["\"use strict\";\n\n/**\n * @typedef {import('eleva').Eleva} Eleva\n * @typedef {import('eleva').Signal} Signal\n * @typedef {import('eleva').ComponentDefinition} ComponentDefinition\n */\n\n/**\n * Simple error handler for the core router.\n * Can be overridden by error handling plugins.\n * Provides consistent error formatting and logging for router operations.\n * @private\n */\nconst CoreErrorHandler = {\n    /**\n     * Handles router errors with basic formatting.\n     * @param {Error} error - The error to handle.\n     * @param {string} context - The context where the error occurred.\n     * @param {Object} details - Additional error details.\n     * @throws {Error} The formatted error.\n     */\n    handle(error, context, details = {}) {\n        const message = `[ElevaRouter] ${context}: ${error.message}`;\n        const formattedError = new Error(message);\n\n        // Preserve original error details\n        formattedError.originalError = error;\n        formattedError.context = context;\n        formattedError.details = details;\n\n        console.error(message, { error, context, details });\n        throw formattedError;\n    },\n\n    /**\n     * Logs a warning without throwing an error.\n     * @param {string} message - The warning message.\n     * @param {Object} details - Additional warning details.\n     */\n    warn(message, details = {}) {\n        console.warn(`[ElevaRouter] ${message}`, details);\n    },\n\n    /**\n     * Logs an error without throwing.\n     * @param {string} message - The error message.\n     * @param {Error} error - The original error.\n     * @param {Object} details - Additional error details.\n     */\n    log(message, error, details = {}) {\n        console.error(`[ElevaRouter] ${message}`, { error, details });\n    }\n};\n\n/**\n * @typedef {Object} RouteLocation\n * @property {string} path - The path of the route (e.g., '/users/123').\n * @property {Object<string, string>} query - An object representing the query parameters.\n * @property {string} fullUrl - The complete URL including hash, path, and query string.\n * @property {Object<string, string>} params - An object containing dynamic route parameters.\n * @property {Object<string, any>} meta - The meta object associated with the matched route.\n * @property {string} [name] - The optional name of the matched route.\n * @property {RouteDefinition} matched - The raw route definition object that was matched.\n */\n\n/**\n * @typedef {(to: RouteLocation, from: RouteLocation | null) => boolean | string | {path: string} | void | Promise<boolean | string | {path: string} | void>} NavigationGuard\n * A function that acts as a guard for navigation. It runs *before* the navigation is confirmed.\n * It can return:\n * - `true` or `undefined`: to allow navigation.\n * - `false`: to abort the navigation.\n * - a `string` (path) or a `location object`: to redirect to a new route.\n */\n\n/**\n * @typedef {(...args: any[]) => void | Promise<void>} NavigationHook\n * A function that acts as a lifecycle hook, typically for side effects. It does not affect navigation flow.\n */\n\n/**\n * @typedef {Object} RouterPlugin\n * @property {string} name - The plugin name.\n * @property {string} [version] - The plugin version.\n * @property {Function} install - The install function that receives the router instance.\n * @property {Function} [destroy] - Optional cleanup function called when the router is destroyed.\n */\n\n/**\n * @typedef {Object} RouteDefinition\n * @property {string} path - The URL path pattern (e.g., '/', '/about', '/users/:id', '*').\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} component - The component to render. Can be a registered name, a definition object, or an async import function.\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [layout] - An optional layout component to wrap the route's component.\n * @property {string} [name] - An optional name for the route.\n * @property {Object<string, any>} [meta] - Optional metadata for the route (e.g., for titles, auth flags).\n * @property {NavigationGuard} [beforeEnter] - A route-specific guard executed before entering the route.\n * @property {NavigationHook} [afterEnter] - A hook executed *after* the route has been entered and the new component is mounted.\n * @property {NavigationGuard} [beforeLeave] - A guard executed *before* leaving the current route.\n * @property {NavigationHook} [afterLeave] - A hook executed *after* leaving the current route and its component has been unmounted.\n */\n\n/**\n * @class Router\n * @classdesc A powerful, reactive, and flexible Router Plugin for Eleva.js.\n * This class manages all routing logic, including state, navigation, and rendering.\n * @private\n */\nclass Router {\n    /**\n     * Creates an instance of the Router.\n     * @param {Eleva} eleva - The Eleva framework instance.\n     * @param {RouterOptions} options - The configuration options for the router.\n     */\n    constructor(eleva, options = {}) {\n        /** @type {Eleva} The Eleva framework instance. */\n        this.eleva = eleva;\n\n        /** @type {RouterOptions} The merged router options. */\n        this.options = {\n            mode: \"hash\",\n            queryParam: \"view\",\n            viewSelector: \"root\",\n            ...options,\n        };\n\n        /** @private @type {RouteDefinition[]} The processed list of route definitions. */\n        this.routes = this._processRoutes(options.routes || []);\n\n        /** @private @type {import('eleva').Emitter} The shared Eleva event emitter for global hooks. */\n        this.emitter = this.eleva.emitter;\n\n        /** @private @type {boolean} A flag indicating if the router has been started. */\n        this.isStarted = false;\n\n        /** @private @type {boolean} A flag to prevent navigation loops from history events. */\n        this._isNavigating = false;\n\n        /** @private @type {Array<() => void>} A collection of cleanup functions for event listeners. */\n        this.eventListeners = [];\n\n        /** @type {Signal<RouteLocation | null>} A reactive signal holding the current route's information. */\n        this.currentRoute = new this.eleva.signal(null);\n\n        /** @type {Signal<RouteLocation | null>} A reactive signal holding the previous route's information. */\n        this.previousRoute = new this.eleva.signal(null);\n\n        /** @type {Signal<Object<string, string>>} A reactive signal holding the current route's parameters. */\n        this.currentParams = new this.eleva.signal({});\n\n        /** @type {Signal<Object<string, string>>} A reactive signal holding the current route's query parameters. */\n        this.currentQuery = new this.eleva.signal({});\n\n        /** @type {Signal<import('eleva').MountResult | null>} A reactive signal for the currently mounted layout instance. */\n        this.currentLayout = new this.eleva.signal(null);\n\n        /** @type {Signal<import('eleva').MountResult | null>} A reactive signal for the currently mounted view (page) instance. */\n        this.currentView = new this.eleva.signal(null);\n\n        /** @private @type {Map<string, RouterPlugin>} Map of registered plugins by name. */\n        this.plugins = new Map();\n\n        /** @type {Object} The error handler instance. Can be overridden by plugins. */\n        this.errorHandler = CoreErrorHandler;\n\n        this._validateOptions();\n    }\n\n    /**\n     * Validates the provided router options.\n     * @private\n     * @throws {Error} If the routing mode is invalid.\n     */\n    _validateOptions() {\n        if (![\"hash\", \"query\", \"history\"].includes(this.options.mode)) {\n            this.errorHandler.handle(\n                new Error(`Invalid routing mode: ${this.options.mode}. Must be \"hash\", \"query\", or \"history\".`),\n                \"Configuration validation failed\"\n            );\n        }\n    }\n\n    /**\n     * Pre-processes route definitions to parse their path segments for efficient matching.\n     * @private\n     * @param {RouteDefinition[]} routes - The raw route definitions.\n     * @returns {RouteDefinition[]} The processed routes.\n     */\n    _processRoutes(routes) {\n        const processedRoutes = [];\n        for (const route of routes) {\n            try {\n                processedRoutes.push({\n                    ...route,\n                    segments: this._parsePathIntoSegments(route.path),\n                });\n            } catch (error) {\n                this.errorHandler.warn(\n                    `Invalid path in route definition \"${route.path || \"undefined\"}\": ${error.message}`,\n                    { route, error }\n                );\n            }\n        }\n        return processedRoutes;\n    }\n\n    /**\n     * Parses a route path string into an array of static and parameter segments.\n     * @private\n     * @param {string} path - The path pattern to parse.\n     * @returns {Array<{type: 'static' | 'param', value?: string, name?: string}>} An array of segment objects.\n     * @throws {Error} If the route path is not a valid string.\n     */\n    _parsePathIntoSegments(path) {\n        if (!path || typeof path !== \"string\") {\n            this.errorHandler.handle(\n                new Error(\"Route path must be a non-empty string\"),\n                \"Path parsing failed\",\n                { path }\n            );\n        }\n\n        const normalizedPath = path.replace(/\\/+/g, \"/\").replace(/\\/$/, \"\") || \"/\";\n\n        if (normalizedPath === \"/\") {\n            return [];\n        }\n\n        return normalizedPath\n            .split(\"/\")\n            .filter(Boolean)\n            .map((segment) => {\n                if (segment.startsWith(\":\")) {\n                    const paramName = segment.substring(1);\n                    if (!paramName) {\n                        this.errorHandler.handle(\n                            new Error(`Invalid parameter segment: ${segment}`),\n                            \"Path parsing failed\",\n                            { segment, path }\n                        );\n                    }\n                    return { type: \"param\", name: paramName };\n                }\n                return { type: \"static\", value: segment };\n            });\n    }\n\n    /**\n     * Finds the view element within a container using multiple selector strategies.\n     * @private\n     * @param {HTMLElement} container - The parent element to search within.\n     * @returns {HTMLElement} The found view element or the container itself as a fallback.\n     */\n    _findViewElement(container) {\n        const selector = this.options.viewSelector;\n        return (\n            container.querySelector(`#${selector}`) ||\n            container.querySelector(`.${selector}`) ||\n            container.querySelector(`[data-${selector}]`) ||\n            container.querySelector(selector) ||\n            container\n        );\n    }\n\n    /**\n     * Starts the router, initializes event listeners, and performs the initial navigation.\n     * @returns {Promise<void>}\n     */\n    async start() {\n        if (this.isStarted) {\n            this.errorHandler.warn(\"Router is already started\");\n            return;\n        }\n        if (typeof window === \"undefined\") {\n            this.errorHandler.warn(\n                \"Router start skipped: `window` object not available (SSR environment)\"\n            );\n            return;\n        }\n        if (\n            typeof document !== \"undefined\" &&\n            !document.querySelector(this.options.mount)\n        ) {\n            this.errorHandler.warn(\n                `Mount element \"${this.options.mount}\" was not found in the DOM. The router will not start.`,\n                { mountSelector: this.options.mount }\n            );\n            return;\n        }\n        const handler = () => this._handleRouteChange();\n        if (this.options.mode === \"hash\") {\n            window.addEventListener(\"hashchange\", handler);\n            this.eventListeners.push(() =>\n                window.removeEventListener(\"hashchange\", handler)\n            );\n        } else {\n            window.addEventListener(\"popstate\", handler);\n            this.eventListeners.push(() =>\n                window.removeEventListener(\"popstate\", handler)\n            );\n        }\n        this.isStarted = true;\n        await this._handleRouteChange();\n    }\n\n    /**\n     * Stops the router and cleans up all event listeners and mounted components.\n     * @returns {Promise<void>}\n     */\n    async destroy() {\n        if (!this.isStarted) return;\n\n        // Clean up plugins\n        for (const plugin of this.plugins.values()) {\n            if (typeof plugin.destroy === 'function') {\n                try {\n                    await plugin.destroy(this);\n                } catch (error) {\n                    this.errorHandler.log(`Plugin ${plugin.name} destroy failed`, error);\n                }\n            }\n        }\n\n        this.eventListeners.forEach((cleanup) => cleanup());\n        this.eventListeners = [];\n        if (this.currentLayout.value) {\n            await this.currentLayout.value.unmount();\n        }\n        this.isStarted = false;\n    }\n\n    /**\n     * Programmatically navigates to a new route.\n     * @param {string | {path: string, query?: object, params?: object, replace?: boolean, state?: object}} location - The target location as a string or object.\n     * @param {object} [params] - Optional route parameters (for string-based location).\n     * @returns {Promise<void>}\n     */\n    async navigate(location, params = {}) {\n        try {\n            const target =\n                typeof location === \"string\" ? { path: location, params } : location;\n            let path = this._buildPath(target.path, target.params || {});\n            const query = target.query || {};\n\n            if (Object.keys(query).length > 0) {\n                const queryString = new URLSearchParams(query).toString();\n                if (queryString) path += `?${queryString}`;\n            }\n\n            if (this._isSameRoute(path, target.params, query)) {\n                return;\n            }\n\n            const navigationSuccessful = await this._proceedWithNavigation(path);\n\n            if (navigationSuccessful) {\n                this._isNavigating = true;\n                const state = target.state || {};\n                const replace = target.replace || false;\n                const historyMethod = replace ? \"replaceState\" : \"pushState\";\n\n                if (this.options.mode === \"hash\") {\n                    if (replace) {\n                        const newUrl = `${window.location.pathname}${window.location.search}#${path}`;\n                        window.history.replaceState(state, \"\", newUrl);\n                    } else {\n                        window.location.hash = path;\n                    }\n                } else {\n                    const url =\n                        this.options.mode === \"query\" ? this._buildQueryUrl(path) : path;\n                    history[historyMethod](state, \"\", url);\n                }\n                queueMicrotask(() => {\n                    this._isNavigating = false;\n                });\n            }\n        } catch (error) {\n            this.errorHandler.log(\"Navigation failed\", error);\n            await this.emitter.emit(\"router:onError\", error);\n        }\n    }\n\n    /**\n     * Builds a URL for query mode.\n     * @private\n     * @param {string} path - The path to set as the query parameter.\n     * @returns {string} The full URL with the updated query string.\n     */\n    _buildQueryUrl(path) {\n        const urlParams = new URLSearchParams(window.location.search);\n        urlParams.set(this.options.queryParam, path.split(\"?\")[0]);\n        return `${window.location.pathname}?${urlParams.toString()}`;\n    }\n\n    /**\n     * Checks if the target route is identical to the current route.\n     * @private\n     * @param {string} path - The target path with query string.\n     * @param {object} params - The target params.\n     * @param {object} query - The target query.\n     * @returns {boolean} - True if the routes are the same.\n     */\n    _isSameRoute(path, params, query) {\n        const current = this.currentRoute.value;\n        if (!current) return false;\n        const [targetPath, queryString] = path.split(\"?\");\n        const targetQuery = query || this._parseQuery(queryString || \"\");\n        return (\n            current.path === targetPath &&\n            JSON.stringify(current.params) === JSON.stringify(params || {}) &&\n            JSON.stringify(current.query) === JSON.stringify(targetQuery)\n        );\n    }\n\n    /**\n     * Injects dynamic parameters into a path string.\n     * @private\n     */\n    _buildPath(path, params) {\n        let result = path;\n        for (const [key, value] of Object.entries(params)) {\n            // Fix: Handle special characters and ensure proper encoding\n            const encodedValue = encodeURIComponent(String(value));\n            result = result.replace(new RegExp(`:${key}\\\\b`, \"g\"), encodedValue);\n        }\n        return result;\n    }\n\n    /**\n     * The handler for browser-initiated route changes (e.g., back/forward buttons).\n     * @private\n     */\n    async _handleRouteChange() {\n        if (this._isNavigating) return;\n        const from = this.currentRoute.value;\n        const toLocation = this._getCurrentLocation();\n\n        const navigationSuccessful = await this._proceedWithNavigation(\n            toLocation.fullUrl\n        );\n\n        // If navigation was blocked by a guard, revert the URL change\n        if (!navigationSuccessful && from) {\n            this.navigate({ path: from.path, query: from.query, replace: true });\n        }\n    }\n\n    /**\n     * Manages the core navigation lifecycle. Runs guards before committing changes.\n     * @private\n     * @param {string} fullPath - The full path (e.g., '/users/123?foo=bar') to navigate to.\n     * @returns {Promise<boolean>} - `true` if navigation succeeded, `false` if aborted.\n     */\n    async _proceedWithNavigation(fullPath) {\n        const from = this.currentRoute.value;\n        const [path, queryString] = (fullPath || \"/\").split(\"?\");\n        const toLocation = {\n            path: path.startsWith(\"/\") ? path : `/${path}`,\n            query: this._parseQuery(queryString),\n            fullUrl: fullPath,\n        };\n\n        let toMatch = this._matchRoute(toLocation.path);\n\n        if (!toMatch) {\n            const notFoundRoute = this.routes.find((route) => route.path === \"*\");\n            if (notFoundRoute) {\n                toMatch = {\n                    route: notFoundRoute,\n                    params: { pathMatch: toLocation.path.substring(1) },\n                };\n            } else {\n                await this.emitter.emit(\n                    \"router:onError\",\n                    new Error(`Route not found: ${toLocation.path}`),\n                    toLocation,\n                    from\n                );\n                return false;\n            }\n        }\n\n        const to = {\n            ...toLocation,\n            params: toMatch.params,\n            meta: toMatch.route.meta || {},\n            name: toMatch.route.name,\n            matched: toMatch.route,\n        };\n\n        try {\n            // 1. Run all *pre-navigation* guards.\n            const canNavigate = await this._runGuards(to, from, toMatch.route);\n            if (!canNavigate) return false;\n\n            // 2. Resolve async components *before* touching the DOM.\n            const { layoutComponent, pageComponent } = await this._resolveComponents(\n                toMatch.route\n            );\n\n            // 3. Unmount the previous view/layout.\n            if (from) {\n                const toLayout = toMatch.route.layout || this.options.globalLayout;\n                const fromLayout = from.matched.layout || this.options.globalLayout;\n\n                const tryUnmount = async (instance) => {\n                    if (!instance) return;\n\n                    try {\n                        await instance.unmount();\n                    } catch (error) {\n                        this.errorHandler.warn(\"Error during component unmount\", { error, instance });\n                    }\n                };\n\n                if (toLayout !== fromLayout) {\n                    await tryUnmount(this.currentLayout.value);\n                    this.currentLayout.value = null;\n                } else {\n                    await tryUnmount(this.currentView.value);\n                    this.currentView.value = null;\n                }\n\n                // 4. Call `afterLeave` hook *after* the old component has been unmounted.\n                if (from.matched.afterLeave) {\n                    await from.matched.afterLeave(to, from);\n                    await this.emitter.emit(\"router:afterLeave\", to, from);\n                }\n            }\n\n            // 5. Update reactive state.\n            this.previousRoute.value = from;\n            this.currentRoute.value = to;\n            this.currentParams.value = to.params || {};\n            this.currentQuery.value = to.query || {};\n\n            // 6. Render the new components.\n            await this._render(layoutComponent, pageComponent, to);\n\n            // 7. Run post-navigation hooks.\n            if (toMatch.route.afterEnter) {\n                await toMatch.route.afterEnter(to, from);\n                await this.emitter.emit(\"router:afterEnter\", to, from);\n            }\n            await this.emitter.emit(\"router:afterEach\", to, from);\n\n            return true;\n        } catch (error) {\n            this.errorHandler.log(\"Error during navigation\", error, { to, from });\n            await this.emitter.emit(\"router:onError\", error, to, from);\n            return false;\n        }\n    }\n\n    /**\n     * Executes all applicable navigation guards for a transition in order.\n     * @private\n     * @returns {Promise<boolean>} - `false` if navigation should be aborted.\n     */\n    async _runGuards(to, from, route) {\n        const guards = [\n            ...(this.options.onBeforeEach ? [this.options.onBeforeEach] : []),\n            ...(from && from.matched.beforeLeave ? [from.matched.beforeLeave] : []),\n            ...(route.beforeEnter ? [route.beforeEnter] : []),\n        ];\n        for (const guard of guards) {\n            const result = await guard(to, from);\n            if (result === false) return false;\n            if (typeof result === \"string\" || typeof result === \"object\") {\n                this.navigate(result);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Resolves a string component definition to a component object.\n     * @private\n     * @param {string} def - The component name to resolve.\n     * @returns {ComponentDefinition} The resolved component.\n     * @throws {Error} If the component is not registered.\n     */\n    _resolveStringComponent(def) {\n        const componentDef = this.eleva._components.get(def);\n        if (!componentDef) {\n            this.errorHandler.handle(\n                new Error(`Component \"${def}\" not registered.`),\n                \"Component resolution failed\",\n                { componentName: def, availableComponents: Array.from(this.eleva._components.keys()) }\n            );\n        }\n        return componentDef;\n    }\n\n    /**\n     * Resolves a function component definition to a component object.\n     * @private\n     * @param {Function} def - The function to resolve.\n     * @returns {Promise<ComponentDefinition>} The resolved component.\n     * @throws {Error} If the function fails to load the component.\n     */\n    async _resolveFunctionComponent(def) {\n        try {\n            const funcStr = def.toString();\n            const isAsyncImport = funcStr.includes(\"import(\") || funcStr.startsWith(\"() =>\");\n\n            const result = await def();\n            return isAsyncImport ? (result.default || result) : result;\n        } catch (error) {\n            this.errorHandler.handle(\n                new Error(`Failed to load async component: ${error.message}`),\n                \"Component resolution failed\",\n                { function: def.toString(), error }\n            );\n        }\n    }\n\n    /**\n     * Validates a component definition object.\n     * @private\n     * @param {any} def - The component definition to validate.\n     * @returns {ComponentDefinition} The validated component.\n     * @throws {Error} If the component definition is invalid.\n     */\n    _validateComponentDefinition(def) {\n        if (!def || typeof def !== \"object\") {\n            this.errorHandler.handle(\n                new Error(`Invalid component definition: ${typeof def}`),\n                \"Component validation failed\",\n                { definition: def }\n            );\n        }\n\n        if (typeof def.template !== \"function\" && typeof def.template !== \"string\") {\n            this.errorHandler.handle(\n                new Error(\"Component missing template property\"),\n                \"Component validation failed\",\n                { definition: def }\n            );\n        }\n\n        return def;\n    }\n\n    /**\n     * Resolves a component definition to a component object.\n     * @private\n     * @param {any} def - The component definition to resolve.\n     * @returns {Promise<ComponentDefinition | null>} The resolved component or null.\n     */\n    async _resolveComponent(def) {\n        if (def === null || def === undefined) {\n            return null;\n        }\n\n        if (typeof def === \"string\") {\n            return this._resolveStringComponent(def);\n        }\n\n        if (typeof def === \"function\") {\n            return await this._resolveFunctionComponent(def);\n        }\n\n        if (def && typeof def === \"object\") {\n            return this._validateComponentDefinition(def);\n        }\n\n        this.errorHandler.handle(\n            new Error(`Invalid component definition: ${typeof def}`),\n            \"Component resolution failed\",\n            { definition: def }\n        );\n    }\n\n    /**\n     * Asynchronously resolves the layout and page components for a route.\n     * @private\n     * @param {RouteDefinition} route - The route to resolve components for.\n     * @returns {Promise<{layoutComponent: ComponentDefinition | null, pageComponent: ComponentDefinition}>}\n     */\n    async _resolveComponents(route) {\n        const effectiveLayout = route.layout || this.options.globalLayout;\n\n        try {\n            const [layoutComponent, pageComponent] = await Promise.all([\n                this._resolveComponent(effectiveLayout),\n                this._resolveComponent(route.component),\n            ]);\n\n            if (!pageComponent) {\n                this.errorHandler.handle(\n                    new Error(`Page component is null or undefined for route: ${route.path}`),\n                    \"Component resolution failed\",\n                    { route: route.path }\n                );\n            }\n\n            return { layoutComponent, pageComponent };\n        } catch (error) {\n            this.errorHandler.log(\n                `Error resolving components for route ${route.path}`,\n                error,\n                { route: route.path }\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * Renders the components for the current route into the DOM.\n     * @private\n     * @param {ComponentDefinition | null} layoutComponent - The pre-loaded layout component.\n     * @param {ComponentDefinition} pageComponent - The pre-loaded page component.\n     */\n    async _render(layoutComponent, pageComponent) {\n        const mountEl = document.querySelector(this.options.mount);\n        if (!mountEl) {\n            this.errorHandler.handle(\n                new Error(`Mount element \"${this.options.mount}\" not found.`),\n                { mountSelector: this.options.mount }\n            );\n        }\n\n        if (layoutComponent) {\n            const layoutInstance = await this.eleva.mount(\n                mountEl,\n                this._wrapComponentWithChildren(layoutComponent)\n            );\n            this.currentLayout.value = layoutInstance;\n            const viewEl = this._findViewElement(layoutInstance.container);\n            const viewInstance = await this.eleva.mount(\n                viewEl,\n                this._wrapComponentWithChildren(pageComponent)\n            );\n            this.currentView.value = viewInstance;\n        } else {\n            const viewInstance = await this.eleva.mount(\n                mountEl,\n                this._wrapComponentWithChildren(pageComponent)\n            );\n            this.currentView.value = viewInstance;\n            this.currentLayout.value = null;\n        }\n    }\n\n    /**\n     * Creates a getter function for router context properties.\n     * @private\n     * @param {string} property - The property name to access.\n     * @param {any} defaultValue - The default value if property is undefined.\n     * @returns {Function} A getter function.\n     */\n    _createRouteGetter(property, defaultValue) {\n        return () => this.currentRoute.value?.[property] ?? defaultValue;\n    }\n\n    /**\n     * Wraps a component definition to inject router-specific context into its setup function.\n     * @private\n     * @param {ComponentDefinition} component - The component to wrap.\n     * @returns {ComponentDefinition} The wrapped component definition.\n     */\n    _wrapComponent(component) {\n        const originalSetup = component.setup;\n        const self = this;\n\n        return {\n            ...component,\n            async setup(ctx) {\n                ctx.router = {\n                    navigate: self.navigate.bind(self),\n                    current: self.currentRoute,\n                    previous: self.previousRoute,\n\n                    // Route property getters\n                    get params() { return self._createRouteGetter('params', {})(); },\n                    get query() { return self._createRouteGetter('query', {})(); },\n                    get path() { return self._createRouteGetter('path', '/')(); },\n                    get fullUrl() { return self._createRouteGetter('fullUrl', window.location.href)(); },\n                    get meta() { return self._createRouteGetter('meta', {})(); }\n                };\n\n                return originalSetup ? await originalSetup(ctx) : {};\n            },\n        };\n    }\n\n    /**\n     * Recursively wraps all child components to ensure they have access to router context.\n     * @private\n     * @param {ComponentDefinition} component - The component to wrap.\n     * @returns {ComponentDefinition} The wrapped component definition.\n     */\n    _wrapComponentWithChildren(component) {\n        const wrappedComponent = this._wrapComponent(component);\n\n        // If the component has children, wrap them too\n        if (\n            wrappedComponent.children &&\n            typeof wrappedComponent.children === \"object\"\n        ) {\n            const wrappedChildren = {};\n            for (const [selector, childComponent] of Object.entries(\n                wrappedComponent.children\n            )) {\n                wrappedChildren[selector] =\n                    this._wrapComponentWithChildren(childComponent);\n            }\n            wrappedComponent.children = wrappedChildren;\n        }\n\n        return wrappedComponent;\n    }\n\n    /**\n     * Gets the current location information from the browser's window object.\n     * @private\n     * @returns {Omit<RouteLocation, 'params' | 'meta' | 'name' | 'matched'>}\n     */\n    _getCurrentLocation() {\n        if (typeof window === \"undefined\")\n            return { path: \"/\", query: {}, fullUrl: \"\" };\n        let path, queryString, fullUrl;\n        switch (this.options.mode) {\n            case \"hash\":\n                fullUrl = window.location.hash.slice(1) || \"/\";\n                [path, queryString] = fullUrl.split(\"?\");\n                break;\n            case \"query\":\n                const urlParams = new URLSearchParams(window.location.search);\n                path = urlParams.get(this.options.queryParam) || \"/\";\n                queryString = window.location.search.slice(1);\n                fullUrl = path;\n                break;\n            default: // 'history' mode\n                path = window.location.pathname || \"/\";\n                queryString = window.location.search.slice(1);\n                fullUrl = `${path}${queryString ? \"?\" + queryString : \"\"}`;\n        }\n        return {\n            path: path.startsWith(\"/\") ? path : `/${path}`,\n            query: this._parseQuery(queryString),\n            fullUrl,\n        };\n    }\n\n    /**\n     * Parses a query string into a key-value object.\n     * @private\n     */\n    _parseQuery(queryString) {\n        const query = {};\n        if (queryString) {\n            new URLSearchParams(queryString).forEach((value, key) => {\n                query[key] = value;\n            });\n        }\n        return query;\n    }\n\n    /**\n     * Matches a given path against the registered routes.\n     * @private\n     * @param {string} path - The path to match.\n     * @returns {{route: RouteDefinition, params: Object<string, string>} | null} The matched route and its params, or null.\n     */\n    _matchRoute(path) {\n        const pathSegments = path.split(\"/\").filter(Boolean);\n\n        for (const route of this.routes) {\n            // Handle the root path as a special case.\n            if (route.path === \"/\") {\n                if (pathSegments.length === 0) return { route, params: {} };\n                continue;\n            }\n\n            if (route.segments.length !== pathSegments.length) continue;\n\n            const params = {};\n            let isMatch = true;\n            for (let i = 0; i < route.segments.length; i++) {\n                const routeSegment = route.segments[i];\n                const pathSegment = pathSegments[i];\n                if (routeSegment.type === \"param\") {\n                    params[routeSegment.name] = decodeURIComponent(pathSegment);\n                } else if (routeSegment.value !== pathSegment) {\n                    isMatch = false;\n                    break;\n                }\n            }\n            if (isMatch) return { route, params };\n        }\n        return null;\n    }\n\n    /** Registers a global pre-navigation guard. */\n    onBeforeEach(guard) {\n        this.options.onBeforeEach = guard;\n    }\n    /** Registers a global hook that runs after a new route component has been mounted *if* the route has an `afterEnter` hook. */\n    onAfterEnter(hook) {\n        this.emitter.on(\"router:afterEnter\", hook);\n    }\n    /** Registers a global hook that runs after a route component has been unmounted *if* the route has an `afterLeave` hook. */\n    onAfterLeave(hook) {\n        this.emitter.on(\"router:afterLeave\", hook);\n    }\n    /** Registers a global hook that runs after a navigation has been confirmed and all hooks have completed. */\n    onAfterEach(hook) {\n        this.emitter.on(\"router:afterEach\", hook);\n    }\n    /** Registers a global error handler for navigation. */\n    onError(handler) {\n        this.emitter.on(\"router:onError\", handler);\n    }\n\n    /**\n     * Registers a plugin with the router.\n     * @param {RouterPlugin} plugin - The plugin to register.\n     */\n    use(plugin, options = {}) {\n        if (typeof plugin.install !== 'function') {\n            this.errorHandler.handle(\n                new Error('Plugin must have an install method'),\n                'Plugin registration failed',\n                { plugin }\n            );\n        }\n\n        // Check if plugin is already registered\n        if (this.plugins.has(plugin.name)) {\n            this.errorHandler.warn(\n                `Plugin \"${plugin.name}\" is already registered`,\n                { existingPlugin: this.plugins.get(plugin.name) }\n            );\n            return;\n        }\n\n        this.plugins.set(plugin.name, plugin);\n        plugin.install(this, options);\n    }\n\n    /**\n     * Gets all registered plugins.\n     * @returns {RouterPlugin[]} Array of registered plugins.\n     */\n    getPlugins() {\n        return Array.from(this.plugins.values());\n    }\n\n    /**\n     * Gets a plugin by name.\n     * @param {string} name - The plugin name.\n     * @returns {RouterPlugin | undefined} The plugin or undefined.\n     */\n    getPlugin(name) {\n        return this.plugins.get(name);\n    }\n\n    /**\n     * Removes a plugin from the router.\n     * @param {string} name - The plugin name.\n     * @returns {boolean} True if the plugin was removed.\n     */\n    removePlugin(name) {\n        const plugin = this.plugins.get(name);\n        if (!plugin) return false;\n\n        // Call destroy if available\n        if (typeof plugin.destroy === 'function') {\n            try {\n                plugin.destroy(this);\n            } catch (error) {\n                this.errorHandler.log(`Plugin ${name} destroy failed`, error);\n            }\n        }\n\n        return this.plugins.delete(name);\n    }\n\n    /**\n     * Sets a custom error handler. Used by error handling plugins.\n     * @param {Object} errorHandler - The error handler object with handle, warn, and log methods.\n     */\n    setErrorHandler(errorHandler) {\n        if (errorHandler &&\n            typeof errorHandler.handle === 'function' &&\n            typeof errorHandler.warn === 'function' &&\n            typeof errorHandler.log === 'function') {\n            this.errorHandler = errorHandler;\n        } else {\n            console.warn('[ElevaRouter] Invalid error handler provided. Must have handle, warn, and log methods.');\n        }\n    }\n}\n\n/**\n * @typedef {Object} RouterOptions\n * @property {string} mount - A CSS selector for the main element where the app is mounted.\n * @property {RouteDefinition[]} routes - An array of route definitions.\n * @property {'hash' | 'query' | 'history'} [mode='hash'] - The routing mode.\n * @property {string} [queryParam='page'] - The query parameter to use in 'query' mode.\n * @property {string} [viewSelector='view'] - The selector for the view element within a layout.\n * @property {boolean} [autoStart=true] - Whether to start the router automatically.\n * @property {NavigationGuard} [onBeforeEach] - A global guard executed before every navigation.\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [globalLayout] - A global layout for all routes. Can be overridden by a route's specific layout.\n */\n\n/**\n * @class 🚀 RouterPlugin\n * @classdesc A powerful, reactive, and flexible Router Plugin for Eleva.js applications.\n * This plugin provides comprehensive client-side routing functionality including:\n * - Multiple routing modes (hash, history, query)\n * - Navigation guards and lifecycle hooks\n * - Reactive state management\n * - Component resolution and lazy loading\n * - Layout and page component separation\n * - Plugin system for extensibility\n * - Advanced error handling\n *\n * @example\n * // Install the plugin\n * const app = new Eleva(\"myApp\");\n * \n * const HomePage = { template: () => `<h1>Home</h1>` };\n * const AboutPage = { template: () => `<h1>About Us</h1>` };\n * const UserPage = { \n *   template: (ctx) => `<h1>User: ${ctx.router.params.id}</h1>` \n * };\n * \n * app.use(RouterPlugin, {\n *   mount: '#app',\n *   mode: 'hash',\n *   routes: [\n *     { path: '/', component: HomePage },\n *     { path: '/about', component: AboutPage },\n *     { path: '/users/:id', component: UserPage }\n *   ]\n * });\n */\nexport const RouterPlugin = {\n    /**\n     * Unique identifier for the plugin\n     * @type {string}\n     */\n    name: \"router\",\n\n    /**\n     * Plugin version\n     * @type {string}\n     */\n    version: \"1.0.0-rc.1\",\n\n    /**\n     * Plugin description\n     * @type {string}\n     */\n    description: \"Client-side routing for Eleva applications\",\n\n    /**\n     * Installs the RouterPlugin into an Eleva instance.\n     * \n     * @param {Eleva} eleva - The Eleva instance\n     * @param {RouterOptions} options - Router configuration options\n     * @param {string} options.mount - A CSS selector for the main element where the app is mounted\n     * @param {RouteDefinition[]} options.routes - An array of route definitions\n     * @param {'hash' | 'query' | 'history'} [options.mode='hash'] - The routing mode\n     * @param {string} [options.queryParam='page'] - The query parameter to use in 'query' mode\n     * @param {string} [options.viewSelector='view'] - The selector for the view element within a layout\n     * @param {boolean} [options.autoStart=true] - Whether to start the router automatically\n     * @param {NavigationGuard} [options.onBeforeEach] - A global guard executed before every navigation\n     * @param {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [options.globalLayout] - A global layout for all routes\n     * \n     * @example\n     * // main.js\n     * import Eleva from './eleva.js';\n     * import { RouterPlugin } from './plugins/RouterPlugin.js';\n     *\n     * const app = new Eleva('myApp');\n     *\n     * const HomePage = { template: () => `<h1>Home</h1>` };\n     * const AboutPage = { template: () => `<h1>About Us</h1>` };\n     *\n     * app.use(RouterPlugin, {\n     *  mount: '#app',\n     *  routes: [\n     *    { path: '/', component: HomePage },\n     *    { path: '/about', component: AboutPage }\n     *  ]\n     * });\n     */\n    install(eleva, options = {}) {\n        if (!options.mount) {\n            throw new Error(\"[RouterPlugin] 'mount' option is required\");\n        }\n\n        if (!options.routes || !Array.isArray(options.routes)) {\n            throw new Error(\"[RouterPlugin] 'routes' option must be an array\");\n        }\n\n        /**\n         * Registers a component definition with the Eleva instance.\n         * This method handles both inline component objects and pre-registered component names.\n         * \n         * @param {any} def - The component definition to register\n         * @param {string} type - The type of component for naming (e.g., \"Route\", \"Layout\")\n         * @returns {string | null} The registered component name or null if no definition provided\n         */\n        const register = (def, type) => {\n            if (!def) return null;\n\n            if (typeof def === \"object\" && def !== null && !def.name) {\n                const name = `Eleva${type}Component_${Math.random()\n                    .toString(36)\n                    .slice(2, 11)}`;\n\n                try {\n                    eleva.component(name, def);\n                    return name;\n                } catch (error) {\n                    throw new Error(`[RouterPlugin] Failed to register ${type} component: ${error.message}`);\n                }\n            }\n            return def;\n        };\n\n        if (options.globalLayout) {\n            options.globalLayout = register(options.globalLayout, \"GlobalLayout\");\n        }\n\n        (options.routes || []).forEach((route) => {\n            route.component = register(route.component, \"Route\");\n            if (route.layout) {\n                route.layout = register(route.layout, \"RouteLayout\");\n            }\n        });\n\n        const router = new Router(eleva, options);\n        eleva.router = router;\n\n        if (options.autoStart !== false) {\n            queueMicrotask(() => router.start());\n        }\n\n        // Add plugin metadata to the Eleva instance\n        if (!eleva.plugins) {\n            eleva.plugins = new Map();\n        }\n        eleva.plugins.set(this.name, {\n            name: this.name,\n            version: this.version,\n            description: this.description,\n            options\n        });\n\n        // Add utility methods for manual router access\n        eleva.navigate = router.navigate.bind(router);\n        eleva.getCurrentRoute = () => router.currentRoute.value;\n        eleva.getRouteParams = () => router.currentParams.value;\n        eleva.getRouteQuery = () => router.currentQuery.value;\n\n        return router;\n    },\n\n    /**\n     * Uninstalls the plugin from the Eleva instance\n     * \n     * @param {Eleva} eleva - The Eleva instance\n     */\n    async uninstall(eleva) {\n        if (eleva.router) {\n            await eleva.router.destroy();\n            delete eleva.router;\n        }\n\n        // Remove plugin metadata\n        if (eleva.plugins) {\n            eleva.plugins.delete(this.name);\n        }\n\n        // Remove utility methods\n        delete eleva.navigate;\n        delete eleva.getCurrentRoute;\n        delete eleva.getRouteParams;\n        delete eleva.getRouteQuery;\n    }\n};\n"],"names":["CoreErrorHandler","handle","error","context","details","message","formattedError","Error","originalError","console","warn","log","Router","constructor","eleva","options","mode","queryParam","viewSelector","routes","_processRoutes","emitter","isStarted","_isNavigating","eventListeners","currentRoute","signal","previousRoute","currentParams","currentQuery","currentLayout","currentView","plugins","Map","errorHandler","_validateOptions","includes","processedRoutes","route","push","segments","_parsePathIntoSegments","path","normalizedPath","replace","split","filter","Boolean","map","segment","startsWith","paramName","substring","type","name","value","_findViewElement","container","selector","querySelector","start","window","document","mount","mountSelector","handler","_handleRouteChange","addEventListener","removeEventListener","destroy","plugin","values","forEach","cleanup","unmount","navigate","location","params","target","_buildPath","query","Object","keys","length","queryString","URLSearchParams","toString","_isSameRoute","navigationSuccessful","_proceedWithNavigation","state","historyMethod","newUrl","pathname","search","history","replaceState","hash","url","_buildQueryUrl","queueMicrotask","emit","urlParams","set","current","targetPath","targetQuery","_parseQuery","JSON","stringify","result","key","entries","encodedValue","encodeURIComponent","String","RegExp","from","toLocation","_getCurrentLocation","fullUrl","fullPath","toMatch","_matchRoute","notFoundRoute","find","pathMatch","to","meta","matched","canNavigate","_runGuards","layoutComponent","pageComponent","_resolveComponents","toLayout","layout","globalLayout","fromLayout","tryUnmount","instance","afterLeave","_render","afterEnter","guards","onBeforeEach","beforeLeave","beforeEnter","guard","_resolveStringComponent","def","componentDef","_components","get","componentName","availableComponents","Array","_resolveFunctionComponent","funcStr","isAsyncImport","default","function","_validateComponentDefinition","definition","template","_resolveComponent","undefined","effectiveLayout","Promise","all","component","mountEl","layoutInstance","_wrapComponentWithChildren","viewEl","viewInstance","_createRouteGetter","property","defaultValue","_wrapComponent","originalSetup","setup","self","ctx","router","bind","previous","href","wrappedComponent","children","wrappedChildren","childComponent","slice","pathSegments","isMatch","i","routeSegment","pathSegment","decodeURIComponent","onAfterEnter","hook","on","onAfterLeave","onAfterEach","onError","use","install","has","existingPlugin","getPlugins","getPlugin","removePlugin","delete","setErrorHandler","RouterPlugin","version","description","isArray","register","Math","random","autoStart","getCurrentRoute","getRouteParams","getRouteQuery","uninstall"],"mappings":"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"}