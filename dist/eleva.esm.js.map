{"version":3,"file":"eleva.esm.js","sources":["../src/modules/TemplateEngine.js","../src/modules/Signal.js","../src/modules/Emitter.js","../src/modules/Renderer.js","../src/core/Eleva.js"],"sourcesContent":["\"use strict\";\n\n/**\n * @class üîí TemplateEngine\n * @classdesc Secure interpolation & dynamic attribute parsing.\n * Provides methods to parse template strings by replacing interpolation expressions\n * with dynamic data values and to evaluate expressions within a given data context.\n */\nexport class TemplateEngine {\n  /**\n   * Parses a template string and replaces interpolation expressions with corresponding values.\n   *\n   * @param {string} template - The template string containing expressions in the format `{{ expression }}`.\n   * @param {Object<string, any>} data - The data object to use for evaluating expressions.\n   * @returns {string} The resulting string with evaluated values.\n   */\n  static parse(template, data) {\n    if (!template || typeof template !== \"string\") return template;\n\n    return template.replace(/\\{\\{\\s*(.*?)\\s*\\}\\}/g, (_, expr) => {\n      return this.evaluate(expr, data);\n    });\n  }\n\n  /**\n   * Evaluates a JavaScript expression using the provided data context.\n   *\n   * @param {string} expr - The JavaScript expression to evaluate.\n   * @param {Object<string, any>} data - The data context for evaluating the expression.\n   * @returns {any} The result of the evaluated expression, or an empty string if undefined or on error.\n   */\n  static evaluate(expr, data) {\n    if (!expr || typeof expr !== \"string\") return expr;\n\n    try {\n      const compiledFn = new Function(\"data\", `with(data) { return ${expr} }`);\n      return compiledFn(data);\n    } catch (error) {\n      console.error(`Template evaluation error:`, {\n        expression: expr,\n        data,\n        error: error.message,\n      });\n      return \"\";\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class ‚ö° Signal\n * @classdesc Fine-grained reactivity.\n * A reactive data holder that notifies registered watchers when its value changes,\n * enabling fine-grained DOM patching rather than full re-renders.\n */\nexport class Signal {\n  /**\n   * Creates a new Signal instance.\n   *\n   * @param {*} value - The initial value of the signal.\n   */\n  constructor(value) {\n    /** @private {*} Internal storage for the signal's current value */\n    this._value = value;\n    /** @private {Set<function>} Collection of callback functions to be notified when value changes */\n    this._watchers = new Set();\n    /** @private {boolean} Flag to prevent multiple synchronous watcher notifications and batch updates into microtasks */\n    this._pending = false;\n  }\n\n  /**\n   * Gets the current value of the signal.\n   *\n   * @returns {*} The current value.\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * Sets a new value for the signal and notifies all registered watchers if the value has changed.\n   *\n   * @param {*} newVal - The new value to set.\n   */\n  set value(newVal) {\n    if (newVal !== this._value) {\n      this._value = newVal;\n      this._notifyWatchers();\n    }\n  }\n\n  /**\n   * Registers a watcher function that will be called whenever the signal's value changes.\n   *\n   * @param {function(any): void} fn - The callback function to invoke on value change.\n   * @returns {function(): boolean} A function to unsubscribe the watcher.\n   */\n  watch(fn) {\n    this._watchers.add(fn);\n    return () => this._watchers.delete(fn);\n  }\n\n  /**\n   * Notifies all registered watchers of a value change using microtask scheduling.\n   * Uses a pending flag to batch multiple synchronous updates into a single notification.\n   * All watcher callbacks receive the current value when executed.\n   *\n   * @private\n   * @returns {void}\n   */\n  _notifyWatchers() {\n    if (!this._pending) {\n      this._pending = true;\n      queueMicrotask(() => {\n        this._pending = false;\n        this._watchers.forEach((fn) => fn(this._value));\n      });\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class üéôÔ∏è Emitter\n * @classdesc Robust inter-component communication with event bubbling.\n * Implements a basic publish-subscribe pattern for event handling, allowing components\n * to communicate through custom events.\n */\nexport class Emitter {\n  /**\n   * Creates a new Emitter instance.\n   */\n  constructor() {\n    /** @type {Object.<string, Function[]>} Storage for event handlers mapped by event name */\n    this.events = {};\n  }\n\n  /**\n   * Registers an event handler for the specified event.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function(...any): void} handler - The function to call when the event is emitted.\n   */\n  on(event, handler) {\n    (this.events[event] || (this.events[event] = [])).push(handler);\n  }\n\n  /**\n   * Removes a previously registered event handler.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function(...any): void} handler - The handler function to remove.\n   */\n  off(event, handler) {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter((h) => h !== handler);\n    }\n  }\n\n  /**\n   * Emits an event, invoking all handlers registered for that event.\n   *\n   * @param {string} event - The event name.\n   * @param {...any} args - Additional arguments to pass to the event handlers.\n   */\n  emit(event, ...args) {\n    (this.events[event] || []).forEach((handler) => handler(...args));\n  }\n}\n","\"use strict\";\n\n/**\n * @class üé® Renderer\n * @classdesc Handles DOM patching, diffing, and attribute updates.\n * Provides methods for efficient DOM updates by diffing the new and old DOM structures\n * and applying only the necessary changes.\n */\nexport class Renderer {\n  /**\n   * Patches the DOM of a container element with new HTML content.\n   *\n   * @param {HTMLElement} container - The container element to patch.\n   * @param {string} newHtml - The new HTML content to apply.\n   * @throws {Error} If container is not an HTMLElement or newHtml is not a string\n   */\n  patchDOM(container, newHtml) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error(\"Container must be an HTMLElement\");\n    }\n    if (typeof newHtml !== \"string\") {\n      throw new Error(\"newHtml must be a string\");\n    }\n\n    const tempContainer = document.createElement(\"div\");\n    try {\n      tempContainer.innerHTML = newHtml;\n      this.diff(container, tempContainer);\n    } catch (error) {\n      throw new Error(`Failed to patch DOM: ${error.message}`);\n    } finally {\n      tempContainer.innerHTML = \"\";\n    }\n  }\n\n  /**\n   * Diffs two DOM trees (old and new) and applies updates to the old DOM.\n   *\n   * @param {HTMLElement} oldParent - The original DOM element.\n   * @param {HTMLElement} newParent - The new DOM element.\n   * @throws {Error} If either parent is not an HTMLElement\n   */\n  diff(oldParent, newParent) {\n    if (\n      !(oldParent instanceof HTMLElement) ||\n      !(newParent instanceof HTMLElement)\n    ) {\n      throw new Error(\"Both parents must be HTMLElements\");\n    }\n\n    // Fast path for identical nodes\n    if (oldParent.isEqualNode(newParent)) return;\n\n    const oldNodes = Array.from(oldParent.childNodes);\n    const newNodes = Array.from(newParent.childNodes);\n    const max = Math.max(oldNodes.length, newNodes.length);\n\n    // Batch DOM operations for better performance\n    const operations = [];\n\n    for (let i = 0; i < max; i++) {\n      const oldNode = oldNodes[i];\n      const newNode = newNodes[i];\n\n      // Case 1: Append new nodes that don't exist in the old tree.\n      if (!oldNode && newNode) {\n        operations.push(() => oldParent.appendChild(newNode.cloneNode(true)));\n        continue;\n      }\n      // Case 2: Remove old nodes not present in the new tree.\n      if (oldNode && !newNode) {\n        operations.push(() => oldParent.removeChild(oldNode));\n        continue;\n      }\n\n      // Case 3: For element nodes, compare keys if available.\n      if (\n        oldNode?.nodeType === Node.ELEMENT_NODE &&\n        newNode?.nodeType === Node.ELEMENT_NODE\n      ) {\n        const oldKey = oldNode.getAttribute(\"key\");\n        const newKey = newNode.getAttribute(\"key\");\n        if (oldKey || newKey) {\n          if (oldKey !== newKey) {\n            operations.push(() =>\n              oldParent.replaceChild(newNode.cloneNode(true), oldNode)\n            );\n            continue;\n          }\n        }\n      }\n\n      // Case 4: Replace nodes if types or tag names differ.\n      if (\n        oldNode?.nodeType !== newNode?.nodeType ||\n        oldNode?.nodeName !== newNode?.nodeName\n      ) {\n        operations.push(() =>\n          oldParent.replaceChild(newNode.cloneNode(true), oldNode)\n        );\n        continue;\n      }\n\n      // Case 5: For text nodes, update content if different.\n      if (oldNode?.nodeType === Node.TEXT_NODE) {\n        if (oldNode.nodeValue !== newNode.nodeValue) {\n          oldNode.nodeValue = newNode.nodeValue;\n        }\n        continue;\n      }\n\n      // Case 6: For element nodes, update attributes and then diff children.\n      if (oldNode?.nodeType === Node.ELEMENT_NODE) {\n        this.updateAttributes(oldNode, newNode);\n        this.diff(oldNode, newNode);\n      }\n    }\n\n    // Execute batched operations\n    operations.forEach((op) => op());\n  }\n\n  /**\n   * Updates the attributes of an element to match those of a new element.\n   *\n   * @param {HTMLElement} oldEl - The element to update.\n   * @param {HTMLElement} newEl - The element providing the updated attributes.\n   * @throws {Error} If either element is not an HTMLElement\n   */\n  updateAttributes(oldEl, newEl) {\n    if (!(oldEl instanceof HTMLElement) || !(newEl instanceof HTMLElement)) {\n      throw new Error(\"Both elements must be HTMLElements\");\n    }\n\n    // Special cases for properties that don't map directly to attributes\n    const specialProperties = {\n      value: true,\n      checked: true,\n      selected: true,\n      disabled: true,\n      readOnly: true,\n      multiple: true,\n    };\n\n    // Batch attribute operations for better performance\n    const operations = [];\n\n    // Remove old attributes that no longer exist\n    Array.from(oldEl.attributes).forEach((attr) => {\n      if (attr.name.startsWith(\"@\")) return;\n      if (!newEl.hasAttribute(attr.name)) {\n        operations.push(() => oldEl.removeAttribute(attr.name));\n      }\n    });\n\n    // Add or update attributes from newEl\n    Array.from(newEl.attributes).forEach((attr) => {\n      if (attr.name.startsWith(\"@\")) return;\n      if (oldEl.getAttribute(attr.name) !== attr.value) {\n        operations.push(() => {\n          oldEl.setAttribute(attr.name, attr.value);\n\n          // Convert kebab-case to camelCase for property names\n          const propName = attr.name.replace(/-([a-z])/g, (_, letter) =>\n            letter.toUpperCase()\n          );\n\n          // Handle special cases first\n          if (specialProperties[propName]) {\n            oldEl[propName] = attr.value === \"\" ? true : attr.value;\n          }\n          // Handle ARIA attributes\n          else if (attr.name.startsWith(\"aria-\")) {\n            const ariaName =\n              \"aria\" +\n              attr.name\n                .slice(5)\n                .replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n            oldEl[ariaName] = attr.value;\n          }\n          // Handle data attributes\n          else if (attr.name.startsWith(\"data-\")) {\n            // dataset handles the camelCase conversion automatically\n            const dataName = attr.name.slice(5);\n            oldEl.dataset[dataName] = attr.value;\n          }\n          // Handle standard properties\n          else if (propName in oldEl) {\n            oldEl[propName] = attr.value;\n          }\n        });\n      }\n    });\n\n    // Execute batched operations\n    operations.forEach((op) => op());\n  }\n}\n","\"use strict\";\n\nimport { TemplateEngine } from \"../modules/TemplateEngine.js\";\nimport { Signal } from \"../modules/Signal.js\";\nimport { Emitter } from \"../modules/Emitter.js\";\nimport { Renderer } from \"../modules/Renderer.js\";\n\n/**\n * Defines the structure and behavior of a component.\n * @typedef {Object} ComponentDefinition\n * @property {function(Object<string, any>): (Object<string, any>|Promise<Object<string, any>>)} [setup]\n *           Optional setup function that initializes the component's reactive state and lifecycle.\n *           Receives props and context as an argument and should return an object containing the component's state.\n *           Can return either a synchronous object or a Promise that resolves to an object for async initialization.\n *\n * @property {function(Object<string, any>): string} template\n *           Required function that defines the component's HTML structure.\n *           Receives the merged context (props + setup data) and must return an HTML template string.\n *           Supports dynamic expressions using {{ }} syntax for reactive data binding.\n *\n * @property {function(Object<string, any>): string} [style]\n *           Optional function that defines component-scoped CSS styles.\n *           Receives the merged context and returns a CSS string that will be automatically scoped to the component.\n *           Styles are injected into the component's container and only affect elements within it.\n *\n * @property {Object<string, ComponentDefinition>} [children]\n *           Optional object that defines nested child components.\n *           Keys are CSS selectors that match elements in the template where child components should be mounted.\n *           Values are ComponentDefinition objects that define the structure and behavior of each child component.\n */\n\n/**\n * @class üß© Eleva\n * @classdesc Signal-based component runtime framework with lifecycle hooks, scoped styles, and plugin support.\n * Manages component registration, plugin integration, event handling, and DOM rendering.\n */\nexport class Eleva {\n  /**\n   * Creates a new Eleva instance.\n   *\n   * @param {string} name - The name of the Eleva instance.\n   * @param {Object<string, any>} [config={}] - Optional configuration for the instance.\n   */\n  constructor(name, config = {}) {\n    /** @type {string} The unique identifier name for this Eleva instance */\n    this.name = name;\n    /** @type {Object<string, any>} Optional configuration object for the Eleva instance */\n    this.config = config;\n    /** @type {Object<string, ComponentDefinition>} Object storing registered component definitions by name */\n    this._components = {};\n    /** @private {Array<Object>} Collection of installed plugin instances */\n    this._plugins = [];\n    /** @private {string[]} Array of lifecycle hook names supported by the component */\n    this._lifecycleHooks = [\n      \"onBeforeMount\",\n      \"onMount\",\n      \"onBeforeUpdate\",\n      \"onUpdate\",\n      \"onUnmount\",\n    ];\n    /** @private {boolean} Flag indicating if component is currently mounted */\n    this._isMounted = false;\n    /** @private {Emitter} Instance of the event emitter for handling component events */\n    this.emitter = new Emitter();\n    /** @private {Renderer} Instance of the renderer for handling DOM updates and patching */\n    this.renderer = new Renderer();\n  }\n\n  /**\n   * Integrates a plugin with the Eleva framework.\n   *\n   * @param {Object} plugin - The plugin object which should have an `install` function.\n   * @param {Object<string, any>} [options={}] - Optional options to pass to the plugin.\n   * @returns {Eleva} The Eleva instance (for chaining).\n   */\n  use(plugin, options = {}) {\n    if (typeof plugin.install === \"function\") {\n      plugin.install(this, options);\n    }\n    this._plugins.push(plugin);\n    return this;\n  }\n\n  /**\n   * Registers a component with the Eleva instance.\n   *\n   * @param {string} name - The name of the component.\n   * @param {ComponentDefinition} definition - The component definition including setup, template, style, and children.\n   * @returns {Eleva} The Eleva instance (for chaining).\n   */\n  component(name, definition) {\n    this._components[name] = definition;\n    return this;\n  }\n\n  /**\n   * Mounts a registered component to a DOM element.\n   *\n   * @param {HTMLElement} container - A DOM element where the component will be mounted.\n   * @param {string|ComponentDefinition} compName - The name of the component to mount or a component definition.\n   * @param {Object<string, any>} [props={}] - Optional properties to pass to the component.\n   * @returns {object|Promise<object>} An object representing the mounted component instance, or a Promise that resolves to it for asynchronous setups.\n   * @throws {Error} If the container is not found or if the component is not registered.\n   */\n  mount(container, compName, props = {}) {\n    if (!container) throw new Error(`Container not found: ${container}`);\n\n    let definition;\n    if (typeof compName === \"string\") {\n      definition = this._components[compName];\n      if (!definition)\n        throw new Error(`Component \"${compName}\" not registered.`);\n    } else if (typeof compName === \"object\") {\n      definition = compName;\n    } else {\n      throw new Error(\"Invalid component parameter.\");\n    }\n\n    /**\n     * Destructure the component definition to access core functionality.\n     * - setup: Optional function for component initialization and state management\n     * - template: Required function that returns the component's HTML structure\n     * - style: Optional function for component-scoped CSS styles\n     * - children: Optional object defining nested child components\n     */\n    const { setup, template, style, children } = definition;\n\n    /**\n     * Creates the initial context object for the component instance.\n     * This context provides core functionality and will be merged with setup data.\n     * @type {Object<string, any>}\n     * @property {Object<string, any>} props - Component properties passed during mounting\n     * @property {Emitter} emitter - Event emitter instance for component event handling\n     * @property {function(any): Signal} signal - Factory function to create reactive Signal instances\n     * @property {Object<string, function(): void>} ...lifecycleHooks - Prepared lifecycle hook functions\n     */\n    const context = {\n      props,\n      emitter: this.emitter,\n      signal: (v) => new Signal(v),\n      ...this._prepareLifecycleHooks(),\n    };\n\n    /**\n     * Processes the mounting of the component.\n     *\n     * @param {Object<string, any>} data - Data returned from the component's setup function.\n     * @returns {object} An object with the container, merged context data, and an unmount function.\n     */\n    const processMount = (data) => {\n      const mergedContext = { ...context, ...data };\n      const watcherUnsubscribers = [];\n      const childInstances = [];\n      const cleanupListeners = [];\n\n      if (!this._isMounted) {\n        mergedContext.onBeforeMount && mergedContext.onBeforeMount();\n      } else {\n        mergedContext.onBeforeUpdate && mergedContext.onBeforeUpdate();\n      }\n\n      /**\n       * Renders the component by parsing the template, patching the DOM,\n       * processing events, injecting styles, and mounting child components.\n       */\n      const render = () => {\n        const newHtml = TemplateEngine.parse(\n          template(mergedContext),\n          mergedContext\n        );\n        this.renderer.patchDOM(container, newHtml);\n        this._processEvents(container, mergedContext, cleanupListeners);\n        this._injectStyles(container, compName, style, mergedContext);\n        this._mountChildren(container, children, childInstances);\n        if (!this._isMounted) {\n          mergedContext.onMount && mergedContext.onMount();\n          this._isMounted = true;\n        } else {\n          mergedContext.onUpdate && mergedContext.onUpdate();\n        }\n      };\n\n      /**\n       * Sets up reactive watchers for all Signal instances in the component's data.\n       * When a Signal's value changes, the component will re-render to reflect the updates.\n       * Stores unsubscribe functions to clean up watchers when component unmounts.\n       */\n      Object.values(data).forEach((val) => {\n        if (val instanceof Signal) watcherUnsubscribers.push(val.watch(render));\n      });\n\n      render();\n\n      return {\n        container,\n        data: mergedContext,\n        /**\n         * Unmounts the component, cleaning up watchers and listeners, child components, and clearing the container.\n         *\n         * @returns {void}\n         */\n        unmount: () => {\n          watcherUnsubscribers.forEach((fn) => fn());\n          cleanupListeners.forEach((fn) => fn());\n          childInstances.forEach((child) => child.unmount());\n          mergedContext.onUnmount && mergedContext.onUnmount();\n          container.innerHTML = \"\";\n        },\n      };\n    };\n\n    // Handle asynchronous setup.\n    return Promise.resolve(\n      typeof setup === \"function\" ? setup(context) : {}\n    ).then((data) => processMount(data));\n  }\n\n  /**\n   * Prepares default no-operation lifecycle hook functions.\n   *\n   * @returns {Object<string, function(): void>} An object with keys for lifecycle hooks mapped to empty functions.\n   * @private\n   */\n  _prepareLifecycleHooks() {\n    return this._lifecycleHooks.reduce((acc, hook) => {\n      acc[hook] = () => {};\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Processes DOM elements for event binding based on attributes starting with \"@\".\n   * Tracks listeners for cleanup during unmount.\n   *\n   * @param {HTMLElement} container - The container element in which to search for events.\n   * @param {Object<string, any>} context - The current context containing event handler definitions.\n   * @param {Array<Function>} cleanupListeners - Array to collect cleanup functions for each event listener.\n   * @private\n   */\n  _processEvents(container, context, cleanupListeners) {\n    container.querySelectorAll(\"*\").forEach((el) => {\n      [...el.attributes].forEach(({ name, value }) => {\n        if (name.startsWith(\"@\")) {\n          const event = name.slice(1);\n          const handler = TemplateEngine.evaluate(value, context);\n          if (typeof handler === \"function\") {\n            el.addEventListener(event, handler);\n            el.removeAttribute(name);\n            cleanupListeners.push(() => el.removeEventListener(event, handler));\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Injects scoped styles into the component's container.\n   *\n   * @param {HTMLElement} container - The container element.\n   * @param {string} compName - The component name used to identify the style element.\n   * @param {function(Object<string, any>): string} [styleFn] - A function that returns CSS styles as a string.\n   * @param {Object<string, any>} context - The current context for style interpolation.\n   * @private\n   */\n  _injectStyles(container, compName, styleFn, context) {\n    if (styleFn) {\n      let styleEl = container.querySelector(\n        `style[data-eleva-style=\"${compName}\"]`\n      );\n      if (!styleEl) {\n        styleEl = document.createElement(\"style\");\n        styleEl.setAttribute(\"data-eleva-style\", compName);\n        container.appendChild(styleEl);\n      }\n      styleEl.textContent = TemplateEngine.parse(styleFn(context), context);\n    }\n  }\n\n  /**\n   * Mounts child components within the parent component's container.\n   *\n   * @param {HTMLElement} container - The parent container element.\n   * @param {Object<string, ComponentDefinition>} [children] - An object mapping child component selectors to their definitions.\n   * @param {Array<object>} childInstances - An array to store the mounted child component instances.\n   * @private\n   */\n  _mountChildren(container, children, childInstances) {\n    childInstances.forEach((child) => child.unmount());\n    childInstances.length = 0;\n\n    Object.keys(children || {}).forEach((childSelector) => {\n      container.querySelectorAll(childSelector).forEach((childEl) => {\n        const props = {};\n        [...childEl.attributes].forEach(({ name, value }) => {\n          if (name.startsWith(\"eleva-prop-\")) {\n            props[name.replace(\"eleva-prop-\", \"\")] = value;\n          }\n        });\n        const instance = this.mount(childEl, children[childSelector], props);\n        childInstances.push(instance);\n      });\n    });\n  }\n}\n"],"names":["TemplateEngine","parse","template","data","replace","_","expr","evaluate","compiledFn","Function","error","console","expression","message","Signal","constructor","value","_value","_watchers","Set","_pending","newVal","_notifyWatchers","watch","fn","add","delete","queueMicrotask","forEach","Emitter","events","on","event","handler","push","off","filter","h","emit","args","Renderer","patchDOM","container","newHtml","HTMLElement","Error","tempContainer","document","createElement","innerHTML","diff","oldParent","newParent","isEqualNode","oldNodes","Array","from","childNodes","newNodes","max","Math","length","operations","i","oldNode","newNode","appendChild","cloneNode","removeChild","nodeType","Node","ELEMENT_NODE","oldKey","getAttribute","newKey","replaceChild","nodeName","TEXT_NODE","nodeValue","updateAttributes","op","oldEl","newEl","specialProperties","checked","selected","disabled","readOnly","multiple","attributes","attr","name","startsWith","hasAttribute","removeAttribute","setAttribute","propName","letter","toUpperCase","ariaName","slice","dataName","dataset","Eleva","config","_components","_plugins","_lifecycleHooks","_isMounted","emitter","renderer","use","plugin","options","install","component","definition","mount","compName","props","setup","style","children","context","signal","v","_prepareLifecycleHooks","processMount","mergedContext","watcherUnsubscribers","childInstances","cleanupListeners","onBeforeMount","onBeforeUpdate","render","_processEvents","_injectStyles","_mountChildren","onMount","onUpdate","Object","values","val","unmount","child","onUnmount","Promise","resolve","then","reduce","acc","hook","querySelectorAll","el","addEventListener","removeEventListener","styleFn","styleEl","querySelector","textContent","keys","childSelector","childEl","instance"],"mappings":"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"}