{"version":3,"file":"attr.umd.min.js","sources":["../../src/plugins/Attr.js"],"sourcesContent":["\"use strict\";\n\n/**\n * A regular expression to match hyphenated lowercase letters.\n * @private\n * @type {RegExp}\n */\nconst CAMEL_RE = /-([a-z])/g;\n\n/**\n * @class ðŸŽ¯ AttrPlugin\n * @classdesc A plugin that provides advanced attribute handling for Eleva components.\n * This plugin extends the renderer with sophisticated attribute processing including:\n * - ARIA attribute handling with proper property mapping\n * - Data attribute management\n * - Boolean attribute processing\n * - Dynamic property detection and mapping\n * - Attribute cleanup and removal\n *\n * @example\n * // Install the plugin\n * const app = new Eleva(\"myApp\");\n * app.use(AttrPlugin);\n *\n * // Use advanced attributes in components\n * app.component(\"myComponent\", {\n *   template: (ctx) => `\n *     <button \n *       aria-expanded=\"${ctx.isExpanded.value}\"\n *       data-user-id=\"${ctx.userId.value}\"\n *       disabled=\"${ctx.isLoading.value}\"\n *       class=\"btn ${ctx.variant.value}\"\n *     >\n *       ${ctx.text.value}\n *     </button>\n *   `\n * });\n */\nexport const AttrPlugin = {\n    /**\n     * Unique identifier for the plugin\n     * @type {string}\n     */\n    name: \"attr\",\n\n    /**\n     * Plugin version\n     * @type {string}\n     */\n    version: \"1.0.0-rc.1\",\n\n    /**\n     * Plugin description\n     * @type {string}\n     */\n    description: \"Advanced attribute handling for Eleva components\",\n\n    /**\n     * Installs the plugin into the Eleva instance\n     * \n     * @param {Object} eleva - The Eleva instance\n     * @param {Object} options - Plugin configuration options\n     * @param {boolean} [options.enableAria=true] - Enable ARIA attribute handling\n     * @param {boolean} [options.enableData=true] - Enable data attribute handling\n     * @param {boolean} [options.enableBoolean=true] - Enable boolean attribute handling\n     * @param {boolean} [options.enableDynamic=true] - Enable dynamic property detection\n     */\n    install(eleva, options = {}) {\n        const {\n            enableAria = true,\n            enableData = true,\n            enableBoolean = true,\n            enableDynamic = true\n        } = options;\n\n        /**\n         * Updates the attributes of an element to match a new element's attributes.\n         * This method provides sophisticated attribute processing including:\n         * - ARIA attribute handling with proper property mapping\n         * - Data attribute management\n         * - Boolean attribute processing\n         * - Dynamic property detection and mapping\n         * - Attribute cleanup and removal\n         *\n         * @param {HTMLElement} oldEl - The original element to update\n         * @param {HTMLElement} newEl - The new element to update\n         * @returns {void}\n         */\n        const updateAttributes = (oldEl, newEl) => {\n            const oldAttrs = oldEl.attributes;\n            const newAttrs = newEl.attributes;\n\n            // Process new attributes\n            for (let i = 0; i < newAttrs.length; i++) {\n                const { name, value } = newAttrs[i];\n\n                // Skip event attributes (handled by event system)\n                if (name.startsWith(\"@\")) continue;\n\n                // Skip if attribute hasn't changed\n                if (oldEl.getAttribute(name) === value) continue;\n\n                // Handle ARIA attributes\n                if (enableAria && name.startsWith(\"aria-\")) {\n                    const prop = \"aria\" + name.slice(5).replace(CAMEL_RE, (_, l) => l.toUpperCase());\n                    oldEl[prop] = value;\n                    oldEl.setAttribute(name, value);\n                }\n                // Handle data attributes\n                else if (enableData && name.startsWith(\"data-\")) {\n                    oldEl.dataset[name.slice(5)] = value;\n                    oldEl.setAttribute(name, value);\n                }\n                // Handle other attributes\n                else {\n                    let prop = name.replace(CAMEL_RE, (_, l) => l.toUpperCase());\n\n                    // Dynamic property detection\n                    if (enableDynamic && !(prop in oldEl) && !Object.getOwnPropertyDescriptor(Object.getPrototypeOf(oldEl), prop)) {\n                        const elementProps = Object.getOwnPropertyNames(Object.getPrototypeOf(oldEl));\n                        const matchingProp = elementProps.find(p =>\n                            p.toLowerCase() === name.toLowerCase() ||\n                            p.toLowerCase().includes(name.toLowerCase()) ||\n                            name.toLowerCase().includes(p.toLowerCase())\n                        );\n\n                        if (matchingProp) {\n                            prop = matchingProp;\n                        }\n                    }\n\n                    const descriptor = Object.getOwnPropertyDescriptor(\n                        Object.getPrototypeOf(oldEl),\n                        prop\n                    );\n                    const hasProperty = prop in oldEl || descriptor;\n\n                    if (hasProperty) {\n                        // Boolean attribute handling\n                        if (enableBoolean) {\n                            const isBoolean =\n                                typeof oldEl[prop] === \"boolean\" ||\n                                (descriptor?.get &&\n                                    typeof descriptor.get.call(oldEl) === \"boolean\");\n\n                            if (isBoolean) {\n                                const boolValue = value !== \"false\" &&\n                                    (value === \"\" || value === prop || value === \"true\");\n                                oldEl[prop] = boolValue;\n\n                                if (boolValue) {\n                                    oldEl.setAttribute(name, \"\");\n                                } else {\n                                    oldEl.removeAttribute(name);\n                                }\n                            } else {\n                                oldEl[prop] = value;\n                                oldEl.setAttribute(name, value);\n                            }\n                        } else {\n                            oldEl[prop] = value;\n                            oldEl.setAttribute(name, value);\n                        }\n                    } else {\n                        oldEl.setAttribute(name, value);\n                    }\n                }\n            }\n\n            // Remove old attributes that are no longer present\n            for (let i = oldAttrs.length - 1; i >= 0; i--) {\n                const name = oldAttrs[i].name;\n                if (!newEl.hasAttribute(name)) {\n                    oldEl.removeAttribute(name);\n                }\n            }\n        };\n\n        // Extend the renderer with the advanced attribute handler\n        if (eleva.renderer) {\n            eleva.renderer.updateAttributes = updateAttributes;\n\n            // Store the original _patchNode method\n            const originalPatchNode = eleva.renderer._patchNode;\n            eleva.renderer._originalPatchNode = originalPatchNode;\n\n            // Override the _patchNode method to use our attribute handler\n            eleva.renderer._patchNode = function (oldNode, newNode) {\n                if (oldNode?._eleva_instance) return;\n\n                if (!this._isSameNode(oldNode, newNode)) {\n                    oldNode.replaceWith(newNode.cloneNode(true));\n                    return;\n                }\n\n                if (oldNode.nodeType === Node.ELEMENT_NODE) {\n                    updateAttributes(oldNode, newNode);\n                    this._diff(oldNode, newNode);\n                } else if (\n                    oldNode.nodeType === Node.TEXT_NODE &&\n                    oldNode.nodeValue !== newNode.nodeValue\n                ) {\n                    oldNode.nodeValue = newNode.nodeValue;\n                }\n            };\n        }\n\n        // Add plugin metadata to the Eleva instance\n        if (!eleva.plugins) {\n            eleva.plugins = new Map();\n        }\n        eleva.plugins.set(this.name, {\n            name: this.name,\n            version: this.version,\n            description: this.description,\n            options\n        });\n\n        // Add utility methods for manual attribute updates\n        eleva.updateElementAttributes = updateAttributes;\n    },\n\n    /**\n     * Uninstalls the plugin from the Eleva instance\n     * \n     * @param {Object} eleva - The Eleva instance\n     */\n    uninstall(eleva) {\n        // Restore original _patchNode method if it exists\n        if (eleva.renderer && eleva.renderer._originalPatchNode) {\n            eleva.renderer._patchNode = eleva.renderer._originalPatchNode;\n            delete eleva.renderer._originalPatchNode;\n        }\n\n        // Remove plugin metadata\n        if (eleva.plugins) {\n            eleva.plugins.delete(this.name);\n        }\n\n        // Remove utility methods\n        delete eleva.updateElementAttributes;\n    }\n};\n"],"names":["CAMEL_RE","name","version","description","install","eleva","options","enableAria","enableData","enableBoolean","enableDynamic","updateAttributes","oldEl","newEl","oldAttrs","attributes","newAttrs","i","length","value","startsWith","getAttribute","slice","replace","_","l","toUpperCase","setAttribute","dataset","prop","Object","getOwnPropertyDescriptor","getPrototypeOf","matchingProp","getOwnPropertyNames","find","p","toLowerCase","includes","descriptor","get","call","boolValue","removeAttribute","hasAttribute","renderer","_originalPatchNode","_patchNode","oldNode","newNode","_eleva_instance","this","_isSameNode","nodeType","Node","ELEMENT_NODE","_diff","TEXT_NODE","nodeValue","replaceWith","cloneNode","plugins","Map","set","updateElementAttributes","uninstall","delete"],"mappings":"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"}