{"version":3,"file":"eleva.esm.js","sources":["../src/modules/TemplateEngine.js","../src/modules/Signal.js","../src/modules/Emitter.js","../src/modules/Renderer.js","../src/core/Eleva.js"],"sourcesContent":["\"use strict\";\n\n/**\n * @class ðŸ”’ TemplateEngine\n * @classdesc A secure template engine that handles interpolation and dynamic attribute parsing.\n * Provides a safe way to evaluate expressions in templates while preventing XSS attacks.\n * All methods are static and can be called directly on the class.\n *\n * @example\n * const template = \"Hello, {{name}}!\";\n * const data = { name: \"World\" };\n * const result = TemplateEngine.parse(template, data); // Returns: \"Hello, World!\"\n */\nexport class TemplateEngine {\n  /**\n   * @private {RegExp} Regular expression for matching template expressions in the format {{ expression }}\n   */\n  static expressionPattern = /\\{\\{\\s*(.*?)\\s*\\}\\}/g;\n\n  /**\n   * Parses a template string, replacing expressions with their evaluated values.\n   * Expressions are evaluated in the provided data context.\n   *\n   * @public\n   * @static\n   * @param {string} template - The template string to parse.\n   * @param {Object} data - The data context for evaluating expressions.\n   * @returns {string} The parsed template with expressions replaced by their values.\n   * @example\n   * const result = TemplateEngine.parse(\"{{user.name}} is {{user.age}} years old\", {\n   *   user: { name: \"John\", age: 30 }\n   * }); // Returns: \"John is 30 years old\"\n   */\n  static parse(template, data) {\n    if (typeof template !== \"string\") return template;\n    return template.replace(this.expressionPattern, (_, expression) =>\n      this.evaluate(expression, data)\n    );\n  }\n\n  /**\n   * Evaluates an expression in the context of the provided data object.\n   * Note: This does not provide a true sandbox and evaluated expressions may access global scope.\n   *\n   * @public\n   * @static\n   * @param {string} expression - The expression to evaluate.\n   * @param {Object} data - The data context for evaluation.\n   * @returns {*} The result of the evaluation, or an empty string if evaluation fails.\n   * @example\n   * const result = TemplateEngine.evaluate(\"user.name\", { user: { name: \"John\" } }); // Returns: \"John\"\n   * const age = TemplateEngine.evaluate(\"user.age\", { user: { age: 30 } }); // Returns: 30\n   */\n  static evaluate(expression, data) {\n    if (typeof expression !== \"string\") return expression;\n    try {\n      return new Function(\"data\", `with(data) { return ${expression}; }`)(data);\n    } catch {\n      return \"\";\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class âš¡ Signal\n * @classdesc A reactive data holder that enables fine-grained reactivity in the Eleva framework.\n * Signals notify registered watchers when their value changes, enabling efficient DOM updates\n * through targeted patching rather than full re-renders.\n *\n * @example\n * const count = new Signal(0);\n * count.watch((value) => console.log(`Count changed to: ${value}`));\n * count.value = 1; // Logs: \"Count changed to: 1\"\n * @template T\n */\nexport class Signal {\n  /**\n   * Creates a new Signal instance with the specified initial value.\n   *\n   * @public\n   * @param {*} value - The initial value of the signal.\n   */\n  constructor(value) {\n    /** @private {T} Internal storage for the signal's current value, where T is the type of the initial value */\n    this._value = value;\n    /** @private {Set<function(T): void>} Collection of callback functions to be notified when value changes, where T is the value type */\n    this._watchers = new Set();\n    /** @private {boolean} Flag to prevent multiple synchronous watcher notifications and batch updates into microtasks */\n    this._pending = false;\n  }\n\n  /**\n   * Gets the current value of the signal.\n   *\n   * @public\n   * @returns {T} The current value, where T is the type of the initial value.\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * Sets a new value for the signal and notifies all registered watchers if the value has changed.\n   * The notification is batched using microtasks to prevent multiple synchronous updates.\n   *\n   * @public\n   * @param {T} newVal - The new value to set, where T is the type of the initial value.\n   * @returns {void}\n   */\n  set value(newVal) {\n    if (this._value === newVal) return;\n\n    this._value = newVal;\n    this._notify();\n  }\n\n  /**\n   * Registers a watcher function that will be called whenever the signal's value changes.\n   * The watcher will receive the new value as its argument.\n   *\n   * @public\n   * @param {function(T): void} fn - The callback function to invoke on value change, where T is the value type.\n   * @returns {function(): boolean} A function to unsubscribe the watcher.\n   * @example\n   * const unsubscribe = signal.watch((value) => console.log(value));\n   * // Later...\n   * unsubscribe(); // Stops watching for changes\n   */\n  watch(fn) {\n    this._watchers.add(fn);\n    return () => this._watchers.delete(fn);\n  }\n\n  /**\n   * Notifies all registered watchers of a value change using microtask scheduling.\n   * Uses a pending flag to batch multiple synchronous updates into a single notification.\n   * All watcher callbacks receive the current value when executed.\n   *\n   * @private\n   * @returns {void}\n   */\n  _notify() {\n    if (this._pending) return;\n\n    this._pending = true;\n    queueMicrotask(() => {\n      this._watchers.forEach((fn) => fn(this._value));\n      this._pending = false;\n    });\n  }\n}\n","\"use strict\";\n\n/**\n * @class ðŸ“¡ Emitter\n * @classdesc A robust event emitter that enables inter-component communication through a publish-subscribe pattern.\n * Components can emit events and listen for events from other components, facilitating loose coupling\n * and reactive updates across the application.\n *\n * @example\n * const emitter = new Emitter();\n * emitter.on('user:login', (user) => console.log(`User logged in: ${user.name}`));\n * emitter.emit('user:login', { name: 'John' }); // Logs: \"User logged in: John\"\n */\nexport class Emitter {\n  /**\n   * Creates a new Emitter instance.\n   *\n   * @public\n   */\n  constructor() {\n    /** @private {Map<string, Set<function(any): void>>} Map of event names to their registered handler functions */\n    this._events = new Map();\n  }\n\n  /**\n   * Registers an event handler for the specified event name.\n   * The handler will be called with the event data when the event is emitted.\n   *\n   * @public\n   * @param {string} event - The name of the event to listen for.\n   * @param {function(any): void} handler - The callback function to invoke when the event occurs.\n   * @returns {function(): void} A function to unsubscribe the event handler.\n   * @example\n   * const unsubscribe = emitter.on('user:login', (user) => console.log(user));\n   * // Later...\n   * unsubscribe(); // Stops listening for the event\n   */\n  on(event, handler) {\n    if (!this._events.has(event)) this._events.set(event, new Set());\n\n    this._events.get(event).add(handler);\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Removes an event handler for the specified event name.\n   * If no handler is provided, all handlers for the event are removed.\n   *\n   * @public\n   * @param {string} event - The name of the event.\n   * @param {function(any): void} [handler] - The specific handler function to remove.\n   * @returns {void}\n   */\n  off(event, handler) {\n    if (!this._events.has(event)) return;\n    if (handler) {\n      const handlers = this._events.get(event);\n      handlers.delete(handler);\n      // Remove the event if there are no handlers left\n      if (handlers.size === 0) this._events.delete(event);\n    } else {\n      this._events.delete(event);\n    }\n  }\n\n  /**\n   * Emits an event with the specified data to all registered handlers.\n   * Handlers are called synchronously in the order they were registered.\n   *\n   * @public\n   * @param {string} event - The name of the event to emit.\n   * @param {...any} args - Optional arguments to pass to the event handlers.\n   * @returns {void}\n   */\n  emit(event, ...args) {\n    if (!this._events.has(event)) return;\n    this._events.get(event).forEach((handler) => handler(...args));\n  }\n}\n","\"use strict\";\n\n/**\n * @class ðŸŽ¨ Renderer\n * @classdesc A DOM renderer that handles efficient DOM updates through patching and diffing.\n * Provides methods for updating the DOM by comparing new and old structures and applying\n * only the necessary changes, minimizing layout thrashing and improving performance.\n *\n * @example\n * const renderer = new Renderer();\n * const container = document.getElementById(\"app\");\n * const newHtml = \"<div>Updated content</div>\";\n * renderer.patchDOM(container, newHtml);\n */\nexport class Renderer {\n  /**\n   * Creates a new Renderer instance with a reusable temporary container for parsing HTML.\n   * @public\n   */\n  constructor() {\n    /** @private {HTMLElement} Reusable temporary container for parsing new HTML */\n    this._tempContainer = document.createElement(\"div\");\n  }\n\n  /**\n   * Patches the DOM of a container element with new HTML content.\n   * Efficiently updates the DOM by parsing new HTML into a reusable container\n   * and applying only the necessary changes.\n   *\n   * @public\n   * @param {HTMLElement} container - The container element to patch.\n   * @param {string} newHtml - The new HTML content to apply.\n   * @returns {void}\n   * @throws {Error} If container is not an HTMLElement, newHtml is not a string, or patching fails.\n   */\n  patchDOM(container, newHtml) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error(\"Container must be an HTMLElement\");\n    }\n    if (typeof newHtml !== \"string\") {\n      throw new Error(\"newHtml must be a string\");\n    }\n\n    try {\n      // Directly set new HTML, replacing any existing content\n      this._tempContainer.innerHTML = newHtml;\n\n      this._diff(container, this._tempContainer);\n    } catch {\n      throw new Error(\"Failed to patch DOM\");\n    }\n  }\n\n  /**\n   * Diffs two DOM trees (old and new) and applies updates to the old DOM.\n   * This method recursively compares nodes and their attributes, applying only\n   * the necessary changes to minimize DOM operations.\n   *\n   * @private\n   * @param {HTMLElement} oldParent - The original DOM element.\n   * @param {HTMLElement} newParent - The new DOM element.\n   * @returns {void}\n   */\n  _diff(oldParent, newParent) {\n    if (oldParent.isEqualNode(newParent)) return;\n\n    const oldChildren = oldParent.childNodes;\n    const newChildren = newParent.childNodes;\n    const maxLength = Math.max(oldChildren.length, newChildren.length);\n\n    for (let i = 0; i < maxLength; i++) {\n      const oldNode = oldChildren[i];\n      const newNode = newChildren[i];\n\n      if (oldNode?._eleva_instance) {\n        continue;\n      }\n\n      if (!oldNode && newNode) {\n        oldParent.appendChild(newNode.cloneNode(true));\n        continue;\n      }\n      if (oldNode && !newNode) {\n        if (\n          oldNode.nodeName === \"STYLE\" &&\n          oldNode.hasAttribute(\"data-e-style\")\n        ) {\n          continue;\n        }\n        oldParent.removeChild(oldNode);\n        continue;\n      }\n\n      const isSameType =\n        oldNode.nodeType === newNode.nodeType &&\n        oldNode.nodeName === newNode.nodeName;\n\n      if (!isSameType) {\n        oldParent.replaceChild(newNode.cloneNode(true), oldNode);\n        continue;\n      }\n\n      if (oldNode.nodeType === Node.ELEMENT_NODE) {\n        const oldKey = oldNode.getAttribute(\"key\");\n        const newKey = newNode.getAttribute(\"key\");\n\n        if (oldKey !== newKey && (oldKey || newKey)) {\n          oldParent.replaceChild(newNode.cloneNode(true), oldNode);\n          continue;\n        }\n\n        this._updateAttributes(oldNode, newNode);\n        this._diff(oldNode, newNode);\n      } else if (\n        oldNode.nodeType === Node.TEXT_NODE &&\n        oldNode.nodeValue !== newNode.nodeValue\n      ) {\n        oldNode.nodeValue = newNode.nodeValue;\n      }\n    }\n  }\n\n  /**\n   * Updates the attributes of an element to match those of a new element.\n   * Handles special cases for ARIA attributes, data attributes, and boolean properties.\n   *\n   * @private\n   * @param {HTMLElement} oldEl - The element to update.\n   * @param {HTMLElement} newEl - The element providing the updated attributes.\n   * @returns {void}\n   */\n  _updateAttributes(oldEl, newEl) {\n    const oldAttrs = oldEl.attributes;\n    const newAttrs = newEl.attributes;\n\n    // Update/add new attributes\n    for (const { name, value } of newAttrs) {\n      if (name.startsWith(\"@\")) continue;\n\n      if (oldEl.getAttribute(name) === value) continue;\n\n      oldEl.setAttribute(name, value);\n\n      if (name.startsWith(\"aria-\")) {\n        const prop =\n          \"aria\" +\n          name.slice(5).replace(/-([a-z])/g, (_, l) => l.toUpperCase());\n        oldEl[prop] = value;\n      } else if (name.startsWith(\"data-\")) {\n        oldEl.dataset[name.slice(5)] = value;\n      } else {\n        const prop = name.replace(/-([a-z])/g, (_, l) => l.toUpperCase());\n        if (prop in oldEl) {\n          const descriptor = Object.getOwnPropertyDescriptor(\n            Object.getPrototypeOf(oldEl),\n            prop\n          );\n          const isBoolean =\n            typeof oldEl[prop] === \"boolean\" ||\n            (descriptor?.get &&\n              typeof descriptor.get.call(oldEl) === \"boolean\");\n\n          if (isBoolean) {\n            oldEl[prop] =\n              value !== \"false\" &&\n              (value === \"\" || value === prop || value === \"true\");\n          } else {\n            oldEl[prop] = value;\n          }\n        }\n      }\n    }\n\n    // Remove old attributes\n    for (const { name } of oldAttrs) {\n      if (!newEl.hasAttribute(name)) {\n        oldEl.removeAttribute(name);\n      }\n    }\n  }\n}\n","\"use strict\";\n\nimport { TemplateEngine } from \"../modules/TemplateEngine.js\";\nimport { Signal } from \"../modules/Signal.js\";\nimport { Emitter } from \"../modules/Emitter.js\";\nimport { Renderer } from \"../modules/Renderer.js\";\n\n/**\n * @typedef {Object} ComponentDefinition\n * @property {function(Object<string, any>): (Object<string, any>|Promise<Object<string, any>>)} [setup]\n *           Optional setup function that initializes the component's state and returns reactive data\n * @property {(function(Object<string, any>): string|Promise<string>|string)} template\n *           Required function that defines the component's HTML structure\n * @property {(function(Object<string, any>): string)|string} [style]\n *           Optional function or string that provides component-scoped CSS styles\n * @property {Object<string, ComponentDefinition>} [children]\n *           Optional object defining nested child components\n */\n\n/**\n * @typedef {Object} ElevaPlugin\n * @property {function(Eleva, Object<string, any>): void} install\n *           Function that installs the plugin into the Eleva instance\n * @property {string} name\n *           Unique identifier name for the plugin\n */\n\n/**\n * @typedef {Object} MountResult\n * @property {HTMLElement} container\n *           The DOM element where the component is mounted\n * @property {Object<string, any>} data\n *           The component's reactive state and context data\n * @property {function(): void} unmount\n *           Function to clean up and unmount the component\n */\n\n/**\n * @class ðŸ§© Eleva\n * @classdesc A modern, signal-based component runtime framework that provides lifecycle hooks,\n * scoped styles, and plugin support. Eleva manages component registration, plugin integration,\n * event handling, and DOM rendering with a focus on performance and developer experience.\n *\n * @example\n * const app = new Eleva(\"myApp\");\n * app.component(\"myComponent\", {\n *   template: (ctx) => `<div>Hello ${ctx.props.name}</div>`,\n *   setup: (ctx) => ({ count: new Signal(0) })\n * });\n * app.mount(document.getElementById(\"app\"), \"myComponent\", { name: \"World\" });\n */\nexport class Eleva {\n  /**\n   * Creates a new Eleva instance with the specified name and configuration.\n   *\n   * @public\n   * @param {string} name - The unique identifier name for this Eleva instance.\n   * @param {Object<string, any>} [config={}] - Optional configuration object for the instance.\n   *        May include framework-wide settings and default behaviors.\n   */\n  constructor(name, config = {}) {\n    /** @public {string} The unique identifier name for this Eleva instance */\n    this.name = name;\n    /** @public {Object<string, any>} Optional configuration object for the Eleva instance */\n    this.config = config;\n    /** @public {Emitter} Instance of the event emitter for handling component events */\n    this.emitter = new Emitter();\n    /** @public {typeof Signal} Static reference to the Signal class for creating reactive state */\n    this.signal = Signal;\n    /** @public {Renderer} Instance of the renderer for handling DOM updates and patching */\n    this.renderer = new Renderer();\n\n    /** @private {Map<string, ComponentDefinition>} Registry of all component definitions by name */\n    this._components = new Map();\n    /** @private {Map<string, ElevaPlugin>} Collection of installed plugin instances by name */\n    this._plugins = new Map();\n    /** @private {string[]} Array of lifecycle hook names supported by components */\n    this._lifecycleHooks = [\n      \"onBeforeMount\",\n      \"onMount\",\n      \"onBeforeUpdate\",\n      \"onUpdate\",\n      \"onUnmount\",\n    ];\n    /** @private {boolean} Flag indicating if the root component is currently mounted */\n    this._isMounted = false;\n  }\n\n  /**\n   * Integrates a plugin with the Eleva framework.\n   * The plugin's install function will be called with the Eleva instance and provided options.\n   * After installation, the plugin will be available for use by components.\n   *\n   * @public\n   * @param {ElevaPlugin} plugin - The plugin object which must have an `install` function.\n   * @param {Object<string, any>} [options={}] - Optional configuration options for the plugin.\n   * @returns {Eleva} The Eleva instance (for method chaining).\n   * @example\n   * app.use(myPlugin, { option1: \"value1\" });\n   */\n  use(plugin, options = {}) {\n    plugin.install(this, options);\n    this._plugins.set(plugin.name, plugin);\n\n    return this;\n  }\n\n  /**\n   * Registers a new component with the Eleva instance.\n   * The component will be available for mounting using its registered name.\n   *\n   * @public\n   * @param {string} name - The unique name of the component to register.\n   * @param {ComponentDefinition} definition - The component definition including setup, template, style, and children.\n   * @returns {Eleva} The Eleva instance (for method chaining).\n   * @throws {Error} If the component name is already registered.\n   * @example\n   * app.component(\"myButton\", {\n   *   template: (ctx) => `<button>${ctx.props.text}</button>`,\n   *   style: `button { color: blue; }`\n   * });\n   */\n  component(name, definition) {\n    /** @type {Map<string, ComponentDefinition>} */\n    this._components.set(name, definition);\n    return this;\n  }\n\n  /**\n   * Mounts a registered component to a DOM element.\n   * This will initialize the component, set up its reactive state, and render it to the DOM.\n   *\n   * @public\n   * @param {HTMLElement} container - The DOM element where the component will be mounted.\n   * @param {string|ComponentDefinition} compName - The name of the registered component or a direct component definition.\n   * @param {Object<string, any>} [props={}] - Optional properties to pass to the component.\n   * @returns {Promise<MountResult>}\n   *          A Promise that resolves to an object containing:\n   *          - container: The mounted component's container element\n   *          - data: The component's reactive state and context\n   *          - unmount: Function to clean up and unmount the component\n   * @throws {Error} If the container is not found, or component is not registered.\n   * @example\n   * const instance = await app.mount(document.getElementById(\"app\"), \"myComponent\", { text: \"Click me\" });\n   * // Later...\n   * instance.unmount();\n   */\n  async mount(container, compName, props = {}) {\n    if (!container) throw new Error(`Container not found: ${container}`);\n\n    if (container._eleva_instance) return container._eleva_instance;\n\n    /** @type {ComponentDefinition} */\n    const definition =\n      typeof compName === \"string\" ? this._components.get(compName) : compName;\n    if (!definition) throw new Error(`Component \"${compName}\" not registered.`);\n\n    /**\n     * Destructure the component definition to access core functionality.\n     * - setup: Optional function for component initialization and state management\n     * - template: Required function or string that returns the component's HTML structure\n     * - style: Optional function or string for component-scoped CSS styles\n     * - children: Optional object defining nested child components\n     */\n    const { setup, template, style, children } = definition;\n\n    /**\n     * Creates the initial context object for the component instance.\n     * This context provides core functionality and will be merged with setup data.\n     * @type {Object<string, any>}\n     * @property {Object<string, any>} props - Component properties passed during mounting\n     * @property {Emitter} emitter - Event emitter instance for component event handling\n     * @property {function(any): Signal} signal - Factory function to create reactive Signal instances\n     * @property {Object<string, function(): void>} ...lifecycleHooks - Prepared lifecycle hook functions\n     */\n    const context = {\n      props,\n      emitter: this.emitter,\n      /** @type {(v: any) => Signal<any>} */\n      signal: (v) => new this.signal(v),\n      ...this._prepareLifecycleHooks(),\n    };\n\n    /**\n     * Processes the mounting of the component.\n     * This function handles:\n     * 1. Merging setup data with the component context\n     * 2. Setting up reactive watchers\n     * 3. Rendering the component\n     * 4. Managing component lifecycle\n     *\n     * @param {Object<string, any>} data - Data returned from the component's setup function\n     * @returns {Promise<MountResult>} An object containing:\n     *   - container: The mounted component's container element\n     *   - data: The component's reactive state and context\n     *   - unmount: Function to clean up and unmount the component\n     */\n    const processMount = async (data) => {\n      /** @type {Object<string, any>} */\n      const mergedContext = { ...context, ...data };\n      /** @type {Array<() => void>} */\n      const watcherUnsubscribers = [];\n      /** @type {Array<MountResult>} */\n      const childInstances = [];\n      /** @type {Array<() => void>} */\n      const cleanupListeners = [];\n\n      // Execute before hooks\n      if (!this._isMounted) {\n        mergedContext.onBeforeMount && mergedContext.onBeforeMount();\n      } else {\n        mergedContext.onBeforeUpdate && mergedContext.onBeforeUpdate();\n      }\n\n      /**\n       * Renders the component by:\n       * 1. Processing the template\n       * 2. Updating the DOM\n       * 3. Processing events, injecting styles, and mounting child components.\n       */\n      const render = async () => {\n        const templateResult =\n          typeof template === \"function\"\n            ? await template(mergedContext)\n            : template;\n        const newHtml = TemplateEngine.parse(templateResult, mergedContext);\n        this.renderer.patchDOM(container, newHtml);\n        this._processEvents(container, mergedContext, cleanupListeners);\n        if (style)\n          this._injectStyles(container, compName, style, mergedContext);\n        if (children)\n          await this._mountComponents(container, children, childInstances);\n\n        if (!this._isMounted) {\n          mergedContext.onMount && mergedContext.onMount();\n          this._isMounted = true;\n        } else {\n          mergedContext.onUpdate && mergedContext.onUpdate();\n        }\n      };\n\n      /**\n       * Sets up reactive watchers for all Signal instances in the component's data.\n       * When a Signal's value changes, the component will re-render to reflect the updates.\n       * Stores unsubscribe functions to clean up watchers when component unmounts.\n       */\n      for (const val of Object.values(data)) {\n        if (val instanceof Signal) watcherUnsubscribers.push(val.watch(render));\n      }\n\n      await render();\n\n      const instance = {\n        container,\n        data: mergedContext,\n        /**\n         * Unmounts the component, cleaning up watchers and listeners, child components, and clearing the container.\n         *\n         * @returns {void}\n         */\n        unmount: () => {\n          for (const fn of watcherUnsubscribers) fn();\n          for (const fn of cleanupListeners) fn();\n          for (const child of childInstances) child.unmount();\n          mergedContext.onUnmount && mergedContext.onUnmount();\n          container.innerHTML = \"\";\n          delete container._eleva_instance;\n        },\n      };\n\n      container._eleva_instance = instance;\n      return instance;\n    };\n\n    // Handle asynchronous setup.\n    const setupResult = typeof setup === \"function\" ? await setup(context) : {};\n    return await processMount(setupResult);\n  }\n\n  /**\n   * Prepares default no-operation lifecycle hook functions for a component.\n   * These hooks will be called at various stages of the component's lifecycle.\n   *\n   * @private\n   * @returns {Object<string, function(): void>} An object mapping lifecycle hook names to empty functions.\n   *         The returned object will be merged with the component's context.\n   */\n  _prepareLifecycleHooks() {\n    /** @type {Object<string, () => void>} */\n    const hooks = {};\n    for (const hook of this._lifecycleHooks) {\n      hooks[hook] = () => {};\n    }\n    return hooks;\n  }\n\n  /**\n   * Processes DOM elements for event binding based on attributes starting with \"@\".\n   * This method handles the event delegation system and ensures proper cleanup of event listeners.\n   *\n   * @private\n   * @param {HTMLElement} container - The container element in which to search for event attributes.\n   * @param {Object<string, any>} context - The current component context containing event handler definitions.\n   * @param {Array<Function>} cleanupListeners - Array to collect cleanup functions for each event listener.\n   * @returns {void}\n   */\n  _processEvents(container, context, cleanupListeners) {\n    const elements = container.querySelectorAll(\"*\");\n    for (const el of elements) {\n      const attrs = el.attributes;\n      for (let i = 0; i < attrs.length; i++) {\n        const attr = attrs[i];\n\n        if (!attr.name.startsWith(\"@\")) continue;\n\n        const event = attr.name.slice(1);\n        const handlerName = attr.value;\n        const handler =\n          context[handlerName] || TemplateEngine.evaluate(handlerName, context);\n        if (typeof handler === \"function\") {\n          el.addEventListener(event, handler);\n          el.removeAttribute(attr.name);\n          cleanupListeners.push(() => el.removeEventListener(event, handler));\n        }\n      }\n    }\n  }\n\n  /**\n   * Injects scoped styles into the component's container.\n   * The styles are automatically prefixed to prevent style leakage to other components.\n   *\n   * @private\n   * @param {HTMLElement} container - The container element where styles should be injected.\n   * @param {string} compName - The component name used to identify the style element.\n   * @param {(function(Object<string, any>): string)|string} styleDef - The component's style definition (function or string).\n   * @param {Object<string, any>} context - The current component context for style interpolation.\n   * @returns {void}\n   */\n  _injectStyles(container, compName, styleDef, context) {\n    const newStyle =\n      typeof styleDef === \"function\"\n        ? TemplateEngine.parse(styleDef(context), context)\n        : styleDef;\n    let styleEl = container.querySelector(`style[data-e-style=\"${compName}\"]`);\n\n    if (styleEl && styleEl.textContent === newStyle) return;\n    if (!styleEl) {\n      styleEl = document.createElement(\"style\");\n      styleEl.setAttribute(\"data-e-style\", compName);\n      container.appendChild(styleEl);\n    }\n\n    styleEl.textContent = newStyle;\n  }\n\n  /**\n   * Extracts props from an element's attributes that start with the specified prefix.\n   * This method is used to collect component properties from DOM elements.\n   *\n   * @private\n   * @param {HTMLElement} element - The DOM element to extract props from\n   * @param {string} prefix - The prefix to look for in attributes\n   * @returns {Object<string, any>} An object containing the extracted props\n   * @example\n   * // For an element with attributes:\n   * // <div :name=\"John\" :age=\"25\">\n   * // Returns: { name: \"John\", age: \"25\" }\n   */\n  _extractProps(element, prefix) {\n    /** @type {Record<string, string>} */\n    const props = {};\n    for (const { name, value } of element.attributes) {\n      if (name.startsWith(prefix)) {\n        props[name.replace(prefix, \"\")] = value;\n      }\n    }\n    return props;\n  }\n\n  /**\n   * Mounts all components within the parent component's container.\n   * This method handles mounting of explicitly defined children components.\n   *\n   * The mounting process follows these steps:\n   * 1. Cleans up any existing component instances\n   * 2. Mounts explicitly defined children components\n   *\n   * @private\n   * @param {HTMLElement} container - The container element to mount components in\n   * @param {Object<string, ComponentDefinition>} children - Map of selectors to component definitions for explicit children\n   * @param {Array<MountResult>} childInstances - Array to store all mounted component instances\n   * @returns {Promise<void>}\n   *\n   * @example\n   * // Explicit children mounting:\n   * const children = {\n   *   'UserProfile': UserProfileComponent,\n   *   '#settings-panel': \"settings-panel\"\n   * };\n   */\n  async _mountComponents(container, children, childInstances) {\n    for (const [selector, component] of Object.entries(children)) {\n      if (!selector) continue;\n      for (const el of container.querySelectorAll(selector)) {\n        if (!(el instanceof HTMLElement)) continue;\n        const props = this._extractProps(el, \":\");\n        const instance = await this.mount(el, component, props);\n        if (instance && !childInstances.includes(instance)) {\n          childInstances.push(instance);\n        }\n      }\n    }\n  }\n}\n"],"names":["TemplateEngine","expressionPattern","parse","template","data","replace","_","expression","evaluate","Function","Signal","constructor","value","_value","_watchers","Set","_pending","newVal","_notify","watch","fn","add","delete","queueMicrotask","forEach","Emitter","_events","Map","on","event","handler","has","set","get","off","handlers","size","emit","args","Renderer","_tempContainer","document","createElement","patchDOM","container","newHtml","HTMLElement","Error","innerHTML","_diff","oldParent","newParent","isEqualNode","oldChildren","childNodes","newChildren","maxLength","Math","max","length","i","oldNode","newNode","_eleva_instance","appendChild","cloneNode","nodeName","hasAttribute","removeChild","isSameType","nodeType","replaceChild","Node","ELEMENT_NODE","oldKey","getAttribute","newKey","_updateAttributes","TEXT_NODE","nodeValue","oldEl","newEl","oldAttrs","attributes","newAttrs","name","startsWith","setAttribute","prop","slice","l","toUpperCase","dataset","descriptor","Object","getOwnPropertyDescriptor","getPrototypeOf","isBoolean","call","removeAttribute","Eleva","config","emitter","signal","renderer","_components","_plugins","_lifecycleHooks","_isMounted","use","plugin","options","install","component","definition","mount","compName","props","setup","style","children","context","v","_prepareLifecycleHooks","processMount","mergedContext","watcherUnsubscribers","childInstances","cleanupListeners","onBeforeMount","onBeforeUpdate","render","templateResult","_processEvents","_injectStyles","_mountComponents","onMount","onUpdate","val","values","push","instance","unmount","child","onUnmount","setupResult","hooks","hook","elements","querySelectorAll","el","attrs","attr","handlerName","addEventListener","removeEventListener","styleDef","newStyle","styleEl","querySelector","textContent","_extractProps","element","prefix","selector","entries","includes"],"mappings":"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"}