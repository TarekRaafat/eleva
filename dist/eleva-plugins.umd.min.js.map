{"version":3,"file":"eleva-plugins.umd.min.js","sources":["../src/plugins/Attr.js","../src/plugins/Router.js"],"sourcesContent":["\"use strict\";\n\n/**\n * A regular expression to match hyphenated lowercase letters.\n * @private\n * @type {RegExp}\n */\nconst CAMEL_RE = /-([a-z])/g;\n\n/**\n * @class ðŸŽ¯ AttrPlugin\n * @classdesc A plugin that provides advanced attribute handling for Eleva components.\n * This plugin extends the renderer with sophisticated attribute processing including:\n * - ARIA attribute handling with proper property mapping\n * - Data attribute management\n * - Boolean attribute processing\n * - Dynamic property detection and mapping\n * - Attribute cleanup and removal\n *\n * @example\n * // Install the plugin\n * const app = new Eleva(\"myApp\");\n * app.use(AttrPlugin);\n *\n * // Use advanced attributes in components\n * app.component(\"myComponent\", {\n *   template: (ctx) => `\n *     <button \n *       aria-expanded=\"${ctx.isExpanded.value}\"\n *       data-user-id=\"${ctx.userId.value}\"\n *       disabled=\"${ctx.isLoading.value}\"\n *       class=\"btn ${ctx.variant.value}\"\n *     >\n *       ${ctx.text.value}\n *     </button>\n *   `\n * });\n */\nexport const AttrPlugin = {\n    /**\n     * Unique identifier for the plugin\n     * @type {string}\n     */\n    name: \"attr\",\n\n    /**\n     * Plugin version\n     * @type {string}\n     */\n    version: \"1.0.0-rc.1\",\n\n    /**\n     * Plugin description\n     * @type {string}\n     */\n    description: \"Advanced attribute handling for Eleva components\",\n\n    /**\n     * Installs the plugin into the Eleva instance\n     * \n     * @param {Object} eleva - The Eleva instance\n     * @param {Object} options - Plugin configuration options\n     * @param {boolean} [options.enableAria=true] - Enable ARIA attribute handling\n     * @param {boolean} [options.enableData=true] - Enable data attribute handling\n     * @param {boolean} [options.enableBoolean=true] - Enable boolean attribute handling\n     * @param {boolean} [options.enableDynamic=true] - Enable dynamic property detection\n     */\n    install(eleva, options = {}) {\n        const {\n            enableAria = true,\n            enableData = true,\n            enableBoolean = true,\n            enableDynamic = true\n        } = options;\n\n        /**\n         * Updates the attributes of an element to match a new element's attributes.\n         * This method provides sophisticated attribute processing including:\n         * - ARIA attribute handling with proper property mapping\n         * - Data attribute management\n         * - Boolean attribute processing\n         * - Dynamic property detection and mapping\n         * - Attribute cleanup and removal\n         *\n         * @param {HTMLElement} oldEl - The original element to update\n         * @param {HTMLElement} newEl - The new element to update\n         * @returns {void}\n         */\n        const updateAttributes = (oldEl, newEl) => {\n            const oldAttrs = oldEl.attributes;\n            const newAttrs = newEl.attributes;\n\n            // Process new attributes\n            for (let i = 0; i < newAttrs.length; i++) {\n                const { name, value } = newAttrs[i];\n\n                // Skip event attributes (handled by event system)\n                if (name.startsWith(\"@\")) continue;\n\n                // Skip if attribute hasn't changed\n                if (oldEl.getAttribute(name) === value) continue;\n\n                // Handle ARIA attributes\n                if (enableAria && name.startsWith(\"aria-\")) {\n                    const prop = \"aria\" + name.slice(5).replace(CAMEL_RE, (_, l) => l.toUpperCase());\n                    oldEl[prop] = value;\n                    oldEl.setAttribute(name, value);\n                }\n                // Handle data attributes\n                else if (enableData && name.startsWith(\"data-\")) {\n                    oldEl.dataset[name.slice(5)] = value;\n                    oldEl.setAttribute(name, value);\n                }\n                // Handle other attributes\n                else {\n                    let prop = name.replace(CAMEL_RE, (_, l) => l.toUpperCase());\n\n                    // Dynamic property detection\n                    if (enableDynamic && !(prop in oldEl) && !Object.getOwnPropertyDescriptor(Object.getPrototypeOf(oldEl), prop)) {\n                        const elementProps = Object.getOwnPropertyNames(Object.getPrototypeOf(oldEl));\n                        const matchingProp = elementProps.find(p =>\n                            p.toLowerCase() === name.toLowerCase() ||\n                            p.toLowerCase().includes(name.toLowerCase()) ||\n                            name.toLowerCase().includes(p.toLowerCase())\n                        );\n\n                        if (matchingProp) {\n                            prop = matchingProp;\n                        }\n                    }\n\n                    const descriptor = Object.getOwnPropertyDescriptor(\n                        Object.getPrototypeOf(oldEl),\n                        prop\n                    );\n                    const hasProperty = prop in oldEl || descriptor;\n\n                    if (hasProperty) {\n                        // Boolean attribute handling\n                        if (enableBoolean) {\n                            const isBoolean =\n                                typeof oldEl[prop] === \"boolean\" ||\n                                (descriptor?.get &&\n                                    typeof descriptor.get.call(oldEl) === \"boolean\");\n\n                            if (isBoolean) {\n                                const boolValue = value !== \"false\" &&\n                                    (value === \"\" || value === prop || value === \"true\");\n                                oldEl[prop] = boolValue;\n\n                                if (boolValue) {\n                                    oldEl.setAttribute(name, \"\");\n                                } else {\n                                    oldEl.removeAttribute(name);\n                                }\n                            } else {\n                                oldEl[prop] = value;\n                                oldEl.setAttribute(name, value);\n                            }\n                        } else {\n                            oldEl[prop] = value;\n                            oldEl.setAttribute(name, value);\n                        }\n                    } else {\n                        oldEl.setAttribute(name, value);\n                    }\n                }\n            }\n\n            // Remove old attributes that are no longer present\n            for (let i = oldAttrs.length - 1; i >= 0; i--) {\n                const name = oldAttrs[i].name;\n                if (!newEl.hasAttribute(name)) {\n                    oldEl.removeAttribute(name);\n                }\n            }\n        };\n\n        // Extend the renderer with the advanced attribute handler\n        if (eleva.renderer) {\n            eleva.renderer.updateAttributes = updateAttributes;\n\n            // Store the original _patchNode method\n            const originalPatchNode = eleva.renderer._patchNode;\n            eleva.renderer._originalPatchNode = originalPatchNode;\n\n            // Override the _patchNode method to use our attribute handler\n            eleva.renderer._patchNode = function (oldNode, newNode) {\n                if (oldNode?._eleva_instance) return;\n\n                if (!this._isSameNode(oldNode, newNode)) {\n                    oldNode.replaceWith(newNode.cloneNode(true));\n                    return;\n                }\n\n                if (oldNode.nodeType === Node.ELEMENT_NODE) {\n                    updateAttributes(oldNode, newNode);\n                    this._diff(oldNode, newNode);\n                } else if (\n                    oldNode.nodeType === Node.TEXT_NODE &&\n                    oldNode.nodeValue !== newNode.nodeValue\n                ) {\n                    oldNode.nodeValue = newNode.nodeValue;\n                }\n            };\n        }\n\n        // Add plugin metadata to the Eleva instance\n        if (!eleva.plugins) {\n            eleva.plugins = new Map();\n        }\n        eleva.plugins.set(this.name, {\n            name: this.name,\n            version: this.version,\n            description: this.description,\n            options\n        });\n\n        // Add utility methods for manual attribute updates\n        eleva.updateElementAttributes = updateAttributes;\n    },\n\n    /**\n     * Uninstalls the plugin from the Eleva instance\n     * \n     * @param {Object} eleva - The Eleva instance\n     */\n    uninstall(eleva) {\n        // Restore original _patchNode method if it exists\n        if (eleva.renderer && eleva.renderer._originalPatchNode) {\n            eleva.renderer._patchNode = eleva.renderer._originalPatchNode;\n            delete eleva.renderer._originalPatchNode;\n        }\n\n        // Remove plugin metadata\n        if (eleva.plugins) {\n            eleva.plugins.delete(this.name);\n        }\n\n        // Remove utility methods\n        delete eleva.updateElementAttributes;\n    }\n};\n","\"use strict\";\n\n/**\n * @typedef {import('eleva').Eleva} Eleva\n * @typedef {import('eleva').Signal} Signal\n * @typedef {import('eleva').ComponentDefinition} ComponentDefinition\n */\n\n/**\n * Simple error handler for the core router.\n * Can be overridden by error handling plugins.\n * Provides consistent error formatting and logging for router operations.\n * @private\n */\nconst CoreErrorHandler = {\n    /**\n     * Handles router errors with basic formatting.\n     * @param {Error} error - The error to handle.\n     * @param {string} context - The context where the error occurred.\n     * @param {Object} details - Additional error details.\n     * @throws {Error} The formatted error.\n     */\n    handle(error, context, details = {}) {\n        const message = `[ElevaRouter] ${context}: ${error.message}`;\n        const formattedError = new Error(message);\n\n        // Preserve original error details\n        formattedError.originalError = error;\n        formattedError.context = context;\n        formattedError.details = details;\n\n        console.error(message, { error, context, details });\n        throw formattedError;\n    },\n\n    /**\n     * Logs a warning without throwing an error.\n     * @param {string} message - The warning message.\n     * @param {Object} details - Additional warning details.\n     */\n    warn(message, details = {}) {\n        console.warn(`[ElevaRouter] ${message}`, details);\n    },\n\n    /**\n     * Logs an error without throwing.\n     * @param {string} message - The error message.\n     * @param {Error} error - The original error.\n     * @param {Object} details - Additional error details.\n     */\n    log(message, error, details = {}) {\n        console.error(`[ElevaRouter] ${message}`, { error, details });\n    }\n};\n\n/**\n * @typedef {Object} RouteLocation\n * @property {string} path - The path of the route (e.g., '/users/123').\n * @property {Object<string, string>} query - An object representing the query parameters.\n * @property {string} fullUrl - The complete URL including hash, path, and query string.\n * @property {Object<string, string>} params - An object containing dynamic route parameters.\n * @property {Object<string, any>} meta - The meta object associated with the matched route.\n * @property {string} [name] - The optional name of the matched route.\n * @property {RouteDefinition} matched - The raw route definition object that was matched.\n */\n\n/**\n * @typedef {(to: RouteLocation, from: RouteLocation | null) => boolean | string | {path: string} | void | Promise<boolean | string | {path: string} | void>} NavigationGuard\n * A function that acts as a guard for navigation. It runs *before* the navigation is confirmed.\n * It can return:\n * - `true` or `undefined`: to allow navigation.\n * - `false`: to abort the navigation.\n * - a `string` (path) or a `location object`: to redirect to a new route.\n */\n\n/**\n * @typedef {(...args: any[]) => void | Promise<void>} NavigationHook\n * A function that acts as a lifecycle hook, typically for side effects. It does not affect navigation flow.\n */\n\n/**\n * @typedef {Object} RouterPlugin\n * @property {string} name - The plugin name.\n * @property {string} [version] - The plugin version.\n * @property {Function} install - The install function that receives the router instance.\n * @property {Function} [destroy] - Optional cleanup function called when the router is destroyed.\n */\n\n/**\n * @typedef {Object} RouteDefinition\n * @property {string} path - The URL path pattern (e.g., '/', '/about', '/users/:id', '*').\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} component - The component to render. Can be a registered name, a definition object, or an async import function.\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [layout] - An optional layout component to wrap the route's component.\n * @property {string} [name] - An optional name for the route.\n * @property {Object<string, any>} [meta] - Optional metadata for the route (e.g., for titles, auth flags).\n * @property {NavigationGuard} [beforeEnter] - A route-specific guard executed before entering the route.\n * @property {NavigationHook} [afterEnter] - A hook executed *after* the route has been entered and the new component is mounted.\n * @property {NavigationGuard} [beforeLeave] - A guard executed *before* leaving the current route.\n * @property {NavigationHook} [afterLeave] - A hook executed *after* leaving the current route and its component has been unmounted.\n */\n\n/**\n * @class Router\n * @classdesc A powerful, reactive, and flexible Router Plugin for Eleva.js.\n * This class manages all routing logic, including state, navigation, and rendering.\n * @private\n */\nclass Router {\n    /**\n     * Creates an instance of the Router.\n     * @param {Eleva} eleva - The Eleva framework instance.\n     * @param {RouterOptions} options - The configuration options for the router.\n     */\n    constructor(eleva, options = {}) {\n        /** @type {Eleva} The Eleva framework instance. */\n        this.eleva = eleva;\n\n        /** @type {RouterOptions} The merged router options. */\n        this.options = {\n            mode: \"hash\",\n            queryParam: \"view\",\n            viewSelector: \"root\",\n            ...options,\n        };\n\n        /** @private @type {RouteDefinition[]} The processed list of route definitions. */\n        this.routes = this._processRoutes(options.routes || []);\n\n        /** @private @type {import('eleva').Emitter} The shared Eleva event emitter for global hooks. */\n        this.emitter = this.eleva.emitter;\n\n        /** @private @type {boolean} A flag indicating if the router has been started. */\n        this.isStarted = false;\n\n        /** @private @type {boolean} A flag to prevent navigation loops from history events. */\n        this._isNavigating = false;\n\n        /** @private @type {Array<() => void>} A collection of cleanup functions for event listeners. */\n        this.eventListeners = [];\n\n        /** @type {Signal<RouteLocation | null>} A reactive signal holding the current route's information. */\n        this.currentRoute = new this.eleva.signal(null);\n\n        /** @type {Signal<RouteLocation | null>} A reactive signal holding the previous route's information. */\n        this.previousRoute = new this.eleva.signal(null);\n\n        /** @type {Signal<Object<string, string>>} A reactive signal holding the current route's parameters. */\n        this.currentParams = new this.eleva.signal({});\n\n        /** @type {Signal<Object<string, string>>} A reactive signal holding the current route's query parameters. */\n        this.currentQuery = new this.eleva.signal({});\n\n        /** @type {Signal<import('eleva').MountResult | null>} A reactive signal for the currently mounted layout instance. */\n        this.currentLayout = new this.eleva.signal(null);\n\n        /** @type {Signal<import('eleva').MountResult | null>} A reactive signal for the currently mounted view (page) instance. */\n        this.currentView = new this.eleva.signal(null);\n\n        /** @private @type {Map<string, RouterPlugin>} Map of registered plugins by name. */\n        this.plugins = new Map();\n\n        /** @type {Object} The error handler instance. Can be overridden by plugins. */\n        this.errorHandler = CoreErrorHandler;\n\n        this._validateOptions();\n    }\n\n    /**\n     * Validates the provided router options.\n     * @private\n     * @throws {Error} If the routing mode is invalid.\n     */\n    _validateOptions() {\n        if (![\"hash\", \"query\", \"history\"].includes(this.options.mode)) {\n            this.errorHandler.handle(\n                new Error(`Invalid routing mode: ${this.options.mode}. Must be \"hash\", \"query\", or \"history\".`),\n                \"Configuration validation failed\"\n            );\n        }\n    }\n\n    /**\n     * Pre-processes route definitions to parse their path segments for efficient matching.\n     * @private\n     * @param {RouteDefinition[]} routes - The raw route definitions.\n     * @returns {RouteDefinition[]} The processed routes.\n     */\n    _processRoutes(routes) {\n        const processedRoutes = [];\n        for (const route of routes) {\n            try {\n                processedRoutes.push({\n                    ...route,\n                    segments: this._parsePathIntoSegments(route.path),\n                });\n            } catch (error) {\n                this.errorHandler.warn(\n                    `Invalid path in route definition \"${route.path || \"undefined\"}\": ${error.message}`,\n                    { route, error }\n                );\n            }\n        }\n        return processedRoutes;\n    }\n\n    /**\n     * Parses a route path string into an array of static and parameter segments.\n     * @private\n     * @param {string} path - The path pattern to parse.\n     * @returns {Array<{type: 'static' | 'param', value?: string, name?: string}>} An array of segment objects.\n     * @throws {Error} If the route path is not a valid string.\n     */\n    _parsePathIntoSegments(path) {\n        if (!path || typeof path !== \"string\") {\n            this.errorHandler.handle(\n                new Error(\"Route path must be a non-empty string\"),\n                \"Path parsing failed\",\n                { path }\n            );\n        }\n\n        const normalizedPath = path.replace(/\\/+/g, \"/\").replace(/\\/$/, \"\") || \"/\";\n\n        if (normalizedPath === \"/\") {\n            return [];\n        }\n\n        return normalizedPath\n            .split(\"/\")\n            .filter(Boolean)\n            .map((segment) => {\n                if (segment.startsWith(\":\")) {\n                    const paramName = segment.substring(1);\n                    if (!paramName) {\n                        this.errorHandler.handle(\n                            new Error(`Invalid parameter segment: ${segment}`),\n                            \"Path parsing failed\",\n                            { segment, path }\n                        );\n                    }\n                    return { type: \"param\", name: paramName };\n                }\n                return { type: \"static\", value: segment };\n            });\n    }\n\n    /**\n     * Finds the view element within a container using multiple selector strategies.\n     * @private\n     * @param {HTMLElement} container - The parent element to search within.\n     * @returns {HTMLElement} The found view element or the container itself as a fallback.\n     */\n    _findViewElement(container) {\n        const selector = this.options.viewSelector;\n        return (\n            container.querySelector(`#${selector}`) ||\n            container.querySelector(`.${selector}`) ||\n            container.querySelector(`[data-${selector}]`) ||\n            container.querySelector(selector) ||\n            container\n        );\n    }\n\n    /**\n     * Starts the router, initializes event listeners, and performs the initial navigation.\n     * @returns {Promise<void>}\n     */\n    async start() {\n        if (this.isStarted) {\n            this.errorHandler.warn(\"Router is already started\");\n            return;\n        }\n        if (typeof window === \"undefined\") {\n            this.errorHandler.warn(\n                \"Router start skipped: `window` object not available (SSR environment)\"\n            );\n            return;\n        }\n        if (\n            typeof document !== \"undefined\" &&\n            !document.querySelector(this.options.mount)\n        ) {\n            this.errorHandler.warn(\n                `Mount element \"${this.options.mount}\" was not found in the DOM. The router will not start.`,\n                { mountSelector: this.options.mount }\n            );\n            return;\n        }\n        const handler = () => this._handleRouteChange();\n        if (this.options.mode === \"hash\") {\n            window.addEventListener(\"hashchange\", handler);\n            this.eventListeners.push(() =>\n                window.removeEventListener(\"hashchange\", handler)\n            );\n        } else {\n            window.addEventListener(\"popstate\", handler);\n            this.eventListeners.push(() =>\n                window.removeEventListener(\"popstate\", handler)\n            );\n        }\n        this.isStarted = true;\n        await this._handleRouteChange();\n    }\n\n    /**\n     * Stops the router and cleans up all event listeners and mounted components.\n     * @returns {Promise<void>}\n     */\n    async destroy() {\n        if (!this.isStarted) return;\n\n        // Clean up plugins\n        for (const plugin of this.plugins.values()) {\n            if (typeof plugin.destroy === 'function') {\n                try {\n                    await plugin.destroy(this);\n                } catch (error) {\n                    this.errorHandler.log(`Plugin ${plugin.name} destroy failed`, error);\n                }\n            }\n        }\n\n        this.eventListeners.forEach((cleanup) => cleanup());\n        this.eventListeners = [];\n        if (this.currentLayout.value) {\n            await this.currentLayout.value.unmount();\n        }\n        this.isStarted = false;\n    }\n\n    /**\n     * Programmatically navigates to a new route.\n     * @param {string | {path: string, query?: object, params?: object, replace?: boolean, state?: object}} location - The target location as a string or object.\n     * @param {object} [params] - Optional route parameters (for string-based location).\n     * @returns {Promise<void>}\n     */\n    async navigate(location, params = {}) {\n        try {\n            const target =\n                typeof location === \"string\" ? { path: location, params } : location;\n            let path = this._buildPath(target.path, target.params || {});\n            const query = target.query || {};\n\n            if (Object.keys(query).length > 0) {\n                const queryString = new URLSearchParams(query).toString();\n                if (queryString) path += `?${queryString}`;\n            }\n\n            if (this._isSameRoute(path, target.params, query)) {\n                return;\n            }\n\n            const navigationSuccessful = await this._proceedWithNavigation(path);\n\n            if (navigationSuccessful) {\n                this._isNavigating = true;\n                const state = target.state || {};\n                const replace = target.replace || false;\n                const historyMethod = replace ? \"replaceState\" : \"pushState\";\n\n                if (this.options.mode === \"hash\") {\n                    if (replace) {\n                        const newUrl = `${window.location.pathname}${window.location.search}#${path}`;\n                        window.history.replaceState(state, \"\", newUrl);\n                    } else {\n                        window.location.hash = path;\n                    }\n                } else {\n                    const url =\n                        this.options.mode === \"query\" ? this._buildQueryUrl(path) : path;\n                    history[historyMethod](state, \"\", url);\n                }\n                queueMicrotask(() => {\n                    this._isNavigating = false;\n                });\n            }\n        } catch (error) {\n            this.errorHandler.log(\"Navigation failed\", error);\n            await this.emitter.emit(\"router:onError\", error);\n        }\n    }\n\n    /**\n     * Builds a URL for query mode.\n     * @private\n     * @param {string} path - The path to set as the query parameter.\n     * @returns {string} The full URL with the updated query string.\n     */\n    _buildQueryUrl(path) {\n        const urlParams = new URLSearchParams(window.location.search);\n        urlParams.set(this.options.queryParam, path.split(\"?\")[0]);\n        return `${window.location.pathname}?${urlParams.toString()}`;\n    }\n\n    /**\n     * Checks if the target route is identical to the current route.\n     * @private\n     * @param {string} path - The target path with query string.\n     * @param {object} params - The target params.\n     * @param {object} query - The target query.\n     * @returns {boolean} - True if the routes are the same.\n     */\n    _isSameRoute(path, params, query) {\n        const current = this.currentRoute.value;\n        if (!current) return false;\n        const [targetPath, queryString] = path.split(\"?\");\n        const targetQuery = query || this._parseQuery(queryString || \"\");\n        return (\n            current.path === targetPath &&\n            JSON.stringify(current.params) === JSON.stringify(params || {}) &&\n            JSON.stringify(current.query) === JSON.stringify(targetQuery)\n        );\n    }\n\n    /**\n     * Injects dynamic parameters into a path string.\n     * @private\n     */\n    _buildPath(path, params) {\n        let result = path;\n        for (const [key, value] of Object.entries(params)) {\n            // Fix: Handle special characters and ensure proper encoding\n            const encodedValue = encodeURIComponent(String(value));\n            result = result.replace(new RegExp(`:${key}\\\\b`, \"g\"), encodedValue);\n        }\n        return result;\n    }\n\n    /**\n     * The handler for browser-initiated route changes (e.g., back/forward buttons).\n     * @private\n     */\n    async _handleRouteChange() {\n        if (this._isNavigating) return;\n        const from = this.currentRoute.value;\n        const toLocation = this._getCurrentLocation();\n\n        const navigationSuccessful = await this._proceedWithNavigation(\n            toLocation.fullUrl\n        );\n\n        // If navigation was blocked by a guard, revert the URL change\n        if (!navigationSuccessful && from) {\n            this.navigate({ path: from.path, query: from.query, replace: true });\n        }\n    }\n\n    /**\n     * Manages the core navigation lifecycle. Runs guards before committing changes.\n     * @private\n     * @param {string} fullPath - The full path (e.g., '/users/123?foo=bar') to navigate to.\n     * @returns {Promise<boolean>} - `true` if navigation succeeded, `false` if aborted.\n     */\n    async _proceedWithNavigation(fullPath) {\n        const from = this.currentRoute.value;\n        const [path, queryString] = (fullPath || \"/\").split(\"?\");\n        const toLocation = {\n            path: path.startsWith(\"/\") ? path : `/${path}`,\n            query: this._parseQuery(queryString),\n            fullUrl: fullPath,\n        };\n\n        let toMatch = this._matchRoute(toLocation.path);\n\n        if (!toMatch) {\n            const notFoundRoute = this.routes.find((route) => route.path === \"*\");\n            if (notFoundRoute) {\n                toMatch = {\n                    route: notFoundRoute,\n                    params: { pathMatch: toLocation.path.substring(1) },\n                };\n            } else {\n                await this.emitter.emit(\n                    \"router:onError\",\n                    new Error(`Route not found: ${toLocation.path}`),\n                    toLocation,\n                    from\n                );\n                return false;\n            }\n        }\n\n        const to = {\n            ...toLocation,\n            params: toMatch.params,\n            meta: toMatch.route.meta || {},\n            name: toMatch.route.name,\n            matched: toMatch.route,\n        };\n\n        try {\n            // 1. Run all *pre-navigation* guards.\n            const canNavigate = await this._runGuards(to, from, toMatch.route);\n            if (!canNavigate) return false;\n\n            // 2. Resolve async components *before* touching the DOM.\n            const { layoutComponent, pageComponent } = await this._resolveComponents(\n                toMatch.route\n            );\n\n            // 3. Unmount the previous view/layout.\n            if (from) {\n                const toLayout = toMatch.route.layout || this.options.globalLayout;\n                const fromLayout = from.matched.layout || this.options.globalLayout;\n\n                const tryUnmount = async (instance) => {\n                    if (!instance) return;\n\n                    try {\n                        await instance.unmount();\n                    } catch (error) {\n                        this.errorHandler.warn(\"Error during component unmount\", { error, instance });\n                    }\n                };\n\n                if (toLayout !== fromLayout) {\n                    await tryUnmount(this.currentLayout.value);\n                    this.currentLayout.value = null;\n                } else {\n                    await tryUnmount(this.currentView.value);\n                    this.currentView.value = null;\n                }\n\n                // 4. Call `afterLeave` hook *after* the old component has been unmounted.\n                if (from.matched.afterLeave) {\n                    await from.matched.afterLeave(to, from);\n                    await this.emitter.emit(\"router:afterLeave\", to, from);\n                }\n            }\n\n            // 5. Update reactive state.\n            this.previousRoute.value = from;\n            this.currentRoute.value = to;\n            this.currentParams.value = to.params || {};\n            this.currentQuery.value = to.query || {};\n\n            // 6. Render the new components.\n            await this._render(layoutComponent, pageComponent, to);\n\n            // 7. Run post-navigation hooks.\n            if (toMatch.route.afterEnter) {\n                await toMatch.route.afterEnter(to, from);\n                await this.emitter.emit(\"router:afterEnter\", to, from);\n            }\n            await this.emitter.emit(\"router:afterEach\", to, from);\n\n            return true;\n        } catch (error) {\n            this.errorHandler.log(\"Error during navigation\", error, { to, from });\n            await this.emitter.emit(\"router:onError\", error, to, from);\n            return false;\n        }\n    }\n\n    /**\n     * Executes all applicable navigation guards for a transition in order.\n     * @private\n     * @returns {Promise<boolean>} - `false` if navigation should be aborted.\n     */\n    async _runGuards(to, from, route) {\n        const guards = [\n            ...(this.options.onBeforeEach ? [this.options.onBeforeEach] : []),\n            ...(from && from.matched.beforeLeave ? [from.matched.beforeLeave] : []),\n            ...(route.beforeEnter ? [route.beforeEnter] : []),\n        ];\n        for (const guard of guards) {\n            const result = await guard(to, from);\n            if (result === false) return false;\n            if (typeof result === \"string\" || typeof result === \"object\") {\n                this.navigate(result);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Resolves a string component definition to a component object.\n     * @private\n     * @param {string} def - The component name to resolve.\n     * @returns {ComponentDefinition} The resolved component.\n     * @throws {Error} If the component is not registered.\n     */\n    _resolveStringComponent(def) {\n        const componentDef = this.eleva._components.get(def);\n        if (!componentDef) {\n            this.errorHandler.handle(\n                new Error(`Component \"${def}\" not registered.`),\n                \"Component resolution failed\",\n                { componentName: def, availableComponents: Array.from(this.eleva._components.keys()) }\n            );\n        }\n        return componentDef;\n    }\n\n    /**\n     * Resolves a function component definition to a component object.\n     * @private\n     * @param {Function} def - The function to resolve.\n     * @returns {Promise<ComponentDefinition>} The resolved component.\n     * @throws {Error} If the function fails to load the component.\n     */\n    async _resolveFunctionComponent(def) {\n        try {\n            const funcStr = def.toString();\n            const isAsyncImport = funcStr.includes(\"import(\") || funcStr.startsWith(\"() =>\");\n\n            const result = await def();\n            return isAsyncImport ? (result.default || result) : result;\n        } catch (error) {\n            this.errorHandler.handle(\n                new Error(`Failed to load async component: ${error.message}`),\n                \"Component resolution failed\",\n                { function: def.toString(), error }\n            );\n        }\n    }\n\n    /**\n     * Validates a component definition object.\n     * @private\n     * @param {any} def - The component definition to validate.\n     * @returns {ComponentDefinition} The validated component.\n     * @throws {Error} If the component definition is invalid.\n     */\n    _validateComponentDefinition(def) {\n        if (!def || typeof def !== \"object\") {\n            this.errorHandler.handle(\n                new Error(`Invalid component definition: ${typeof def}`),\n                \"Component validation failed\",\n                { definition: def }\n            );\n        }\n\n        if (typeof def.template !== \"function\" && typeof def.template !== \"string\") {\n            this.errorHandler.handle(\n                new Error(\"Component missing template property\"),\n                \"Component validation failed\",\n                { definition: def }\n            );\n        }\n\n        return def;\n    }\n\n    /**\n     * Resolves a component definition to a component object.\n     * @private\n     * @param {any} def - The component definition to resolve.\n     * @returns {Promise<ComponentDefinition | null>} The resolved component or null.\n     */\n    async _resolveComponent(def) {\n        if (def === null || def === undefined) {\n            return null;\n        }\n\n        if (typeof def === \"string\") {\n            return this._resolveStringComponent(def);\n        }\n\n        if (typeof def === \"function\") {\n            return await this._resolveFunctionComponent(def);\n        }\n\n        if (def && typeof def === \"object\") {\n            return this._validateComponentDefinition(def);\n        }\n\n        this.errorHandler.handle(\n            new Error(`Invalid component definition: ${typeof def}`),\n            \"Component resolution failed\",\n            { definition: def }\n        );\n    }\n\n    /**\n     * Asynchronously resolves the layout and page components for a route.\n     * @private\n     * @param {RouteDefinition} route - The route to resolve components for.\n     * @returns {Promise<{layoutComponent: ComponentDefinition | null, pageComponent: ComponentDefinition}>}\n     */\n    async _resolveComponents(route) {\n        const effectiveLayout = route.layout || this.options.globalLayout;\n\n        try {\n            const [layoutComponent, pageComponent] = await Promise.all([\n                this._resolveComponent(effectiveLayout),\n                this._resolveComponent(route.component),\n            ]);\n\n            if (!pageComponent) {\n                this.errorHandler.handle(\n                    new Error(`Page component is null or undefined for route: ${route.path}`),\n                    \"Component resolution failed\",\n                    { route: route.path }\n                );\n            }\n\n            return { layoutComponent, pageComponent };\n        } catch (error) {\n            this.errorHandler.log(\n                `Error resolving components for route ${route.path}`,\n                error,\n                { route: route.path }\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * Renders the components for the current route into the DOM.\n     * @private\n     * @param {ComponentDefinition | null} layoutComponent - The pre-loaded layout component.\n     * @param {ComponentDefinition} pageComponent - The pre-loaded page component.\n     */\n    async _render(layoutComponent, pageComponent) {\n        const mountEl = document.querySelector(this.options.mount);\n        if (!mountEl) {\n            this.errorHandler.handle(\n                new Error(`Mount element \"${this.options.mount}\" not found.`),\n                { mountSelector: this.options.mount }\n            );\n        }\n\n        if (layoutComponent) {\n            const layoutInstance = await this.eleva.mount(\n                mountEl,\n                this._wrapComponentWithChildren(layoutComponent)\n            );\n            this.currentLayout.value = layoutInstance;\n            const viewEl = this._findViewElement(layoutInstance.container);\n            const viewInstance = await this.eleva.mount(\n                viewEl,\n                this._wrapComponentWithChildren(pageComponent)\n            );\n            this.currentView.value = viewInstance;\n        } else {\n            const viewInstance = await this.eleva.mount(\n                mountEl,\n                this._wrapComponentWithChildren(pageComponent)\n            );\n            this.currentView.value = viewInstance;\n            this.currentLayout.value = null;\n        }\n    }\n\n    /**\n     * Creates a getter function for router context properties.\n     * @private\n     * @param {string} property - The property name to access.\n     * @param {any} defaultValue - The default value if property is undefined.\n     * @returns {Function} A getter function.\n     */\n    _createRouteGetter(property, defaultValue) {\n        return () => this.currentRoute.value?.[property] ?? defaultValue;\n    }\n\n    /**\n     * Wraps a component definition to inject router-specific context into its setup function.\n     * @private\n     * @param {ComponentDefinition} component - The component to wrap.\n     * @returns {ComponentDefinition} The wrapped component definition.\n     */\n    _wrapComponent(component) {\n        const originalSetup = component.setup;\n        const self = this;\n\n        return {\n            ...component,\n            async setup(ctx) {\n                ctx.router = {\n                    navigate: self.navigate.bind(self),\n                    current: self.currentRoute,\n                    previous: self.previousRoute,\n\n                    // Route property getters\n                    get params() { return self._createRouteGetter('params', {})(); },\n                    get query() { return self._createRouteGetter('query', {})(); },\n                    get path() { return self._createRouteGetter('path', '/')(); },\n                    get fullUrl() { return self._createRouteGetter('fullUrl', window.location.href)(); },\n                    get meta() { return self._createRouteGetter('meta', {})(); }\n                };\n\n                return originalSetup ? await originalSetup(ctx) : {};\n            },\n        };\n    }\n\n    /**\n     * Recursively wraps all child components to ensure they have access to router context.\n     * @private\n     * @param {ComponentDefinition} component - The component to wrap.\n     * @returns {ComponentDefinition} The wrapped component definition.\n     */\n    _wrapComponentWithChildren(component) {\n        const wrappedComponent = this._wrapComponent(component);\n\n        // If the component has children, wrap them too\n        if (\n            wrappedComponent.children &&\n            typeof wrappedComponent.children === \"object\"\n        ) {\n            const wrappedChildren = {};\n            for (const [selector, childComponent] of Object.entries(\n                wrappedComponent.children\n            )) {\n                wrappedChildren[selector] =\n                    this._wrapComponentWithChildren(childComponent);\n            }\n            wrappedComponent.children = wrappedChildren;\n        }\n\n        return wrappedComponent;\n    }\n\n    /**\n     * Gets the current location information from the browser's window object.\n     * @private\n     * @returns {Omit<RouteLocation, 'params' | 'meta' | 'name' | 'matched'>}\n     */\n    _getCurrentLocation() {\n        if (typeof window === \"undefined\")\n            return { path: \"/\", query: {}, fullUrl: \"\" };\n        let path, queryString, fullUrl;\n        switch (this.options.mode) {\n            case \"hash\":\n                fullUrl = window.location.hash.slice(1) || \"/\";\n                [path, queryString] = fullUrl.split(\"?\");\n                break;\n            case \"query\":\n                const urlParams = new URLSearchParams(window.location.search);\n                path = urlParams.get(this.options.queryParam) || \"/\";\n                queryString = window.location.search.slice(1);\n                fullUrl = path;\n                break;\n            default: // 'history' mode\n                path = window.location.pathname || \"/\";\n                queryString = window.location.search.slice(1);\n                fullUrl = `${path}${queryString ? \"?\" + queryString : \"\"}`;\n        }\n        return {\n            path: path.startsWith(\"/\") ? path : `/${path}`,\n            query: this._parseQuery(queryString),\n            fullUrl,\n        };\n    }\n\n    /**\n     * Parses a query string into a key-value object.\n     * @private\n     */\n    _parseQuery(queryString) {\n        const query = {};\n        if (queryString) {\n            new URLSearchParams(queryString).forEach((value, key) => {\n                query[key] = value;\n            });\n        }\n        return query;\n    }\n\n    /**\n     * Matches a given path against the registered routes.\n     * @private\n     * @param {string} path - The path to match.\n     * @returns {{route: RouteDefinition, params: Object<string, string>} | null} The matched route and its params, or null.\n     */\n    _matchRoute(path) {\n        const pathSegments = path.split(\"/\").filter(Boolean);\n\n        for (const route of this.routes) {\n            // Handle the root path as a special case.\n            if (route.path === \"/\") {\n                if (pathSegments.length === 0) return { route, params: {} };\n                continue;\n            }\n\n            if (route.segments.length !== pathSegments.length) continue;\n\n            const params = {};\n            let isMatch = true;\n            for (let i = 0; i < route.segments.length; i++) {\n                const routeSegment = route.segments[i];\n                const pathSegment = pathSegments[i];\n                if (routeSegment.type === \"param\") {\n                    params[routeSegment.name] = decodeURIComponent(pathSegment);\n                } else if (routeSegment.value !== pathSegment) {\n                    isMatch = false;\n                    break;\n                }\n            }\n            if (isMatch) return { route, params };\n        }\n        return null;\n    }\n\n    /** Registers a global pre-navigation guard. */\n    onBeforeEach(guard) {\n        this.options.onBeforeEach = guard;\n    }\n    /** Registers a global hook that runs after a new route component has been mounted *if* the route has an `afterEnter` hook. */\n    onAfterEnter(hook) {\n        this.emitter.on(\"router:afterEnter\", hook);\n    }\n    /** Registers a global hook that runs after a route component has been unmounted *if* the route has an `afterLeave` hook. */\n    onAfterLeave(hook) {\n        this.emitter.on(\"router:afterLeave\", hook);\n    }\n    /** Registers a global hook that runs after a navigation has been confirmed and all hooks have completed. */\n    onAfterEach(hook) {\n        this.emitter.on(\"router:afterEach\", hook);\n    }\n    /** Registers a global error handler for navigation. */\n    onError(handler) {\n        this.emitter.on(\"router:onError\", handler);\n    }\n\n    /**\n     * Registers a plugin with the router.\n     * @param {RouterPlugin} plugin - The plugin to register.\n     */\n    use(plugin, options = {}) {\n        if (typeof plugin.install !== 'function') {\n            this.errorHandler.handle(\n                new Error('Plugin must have an install method'),\n                'Plugin registration failed',\n                { plugin }\n            );\n        }\n\n        // Check if plugin is already registered\n        if (this.plugins.has(plugin.name)) {\n            this.errorHandler.warn(\n                `Plugin \"${plugin.name}\" is already registered`,\n                { existingPlugin: this.plugins.get(plugin.name) }\n            );\n            return;\n        }\n\n        this.plugins.set(plugin.name, plugin);\n        plugin.install(this, options);\n    }\n\n    /**\n     * Gets all registered plugins.\n     * @returns {RouterPlugin[]} Array of registered plugins.\n     */\n    getPlugins() {\n        return Array.from(this.plugins.values());\n    }\n\n    /**\n     * Gets a plugin by name.\n     * @param {string} name - The plugin name.\n     * @returns {RouterPlugin | undefined} The plugin or undefined.\n     */\n    getPlugin(name) {\n        return this.plugins.get(name);\n    }\n\n    /**\n     * Removes a plugin from the router.\n     * @param {string} name - The plugin name.\n     * @returns {boolean} True if the plugin was removed.\n     */\n    removePlugin(name) {\n        const plugin = this.plugins.get(name);\n        if (!plugin) return false;\n\n        // Call destroy if available\n        if (typeof plugin.destroy === 'function') {\n            try {\n                plugin.destroy(this);\n            } catch (error) {\n                this.errorHandler.log(`Plugin ${name} destroy failed`, error);\n            }\n        }\n\n        return this.plugins.delete(name);\n    }\n\n    /**\n     * Sets a custom error handler. Used by error handling plugins.\n     * @param {Object} errorHandler - The error handler object with handle, warn, and log methods.\n     */\n    setErrorHandler(errorHandler) {\n        if (errorHandler &&\n            typeof errorHandler.handle === 'function' &&\n            typeof errorHandler.warn === 'function' &&\n            typeof errorHandler.log === 'function') {\n            this.errorHandler = errorHandler;\n        } else {\n            console.warn('[ElevaRouter] Invalid error handler provided. Must have handle, warn, and log methods.');\n        }\n    }\n}\n\n/**\n * @typedef {Object} RouterOptions\n * @property {string} mount - A CSS selector for the main element where the app is mounted.\n * @property {RouteDefinition[]} routes - An array of route definitions.\n * @property {'hash' | 'query' | 'history'} [mode='hash'] - The routing mode.\n * @property {string} [queryParam='page'] - The query parameter to use in 'query' mode.\n * @property {string} [viewSelector='view'] - The selector for the view element within a layout.\n * @property {boolean} [autoStart=true] - Whether to start the router automatically.\n * @property {NavigationGuard} [onBeforeEach] - A global guard executed before every navigation.\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [globalLayout] - A global layout for all routes. Can be overridden by a route's specific layout.\n */\n\n/**\n * @class ðŸš€ RouterPlugin\n * @classdesc A powerful, reactive, and flexible Router Plugin for Eleva.js applications.\n * This plugin provides comprehensive client-side routing functionality including:\n * - Multiple routing modes (hash, history, query)\n * - Navigation guards and lifecycle hooks\n * - Reactive state management\n * - Component resolution and lazy loading\n * - Layout and page component separation\n * - Plugin system for extensibility\n * - Advanced error handling\n *\n * @example\n * // Install the plugin\n * const app = new Eleva(\"myApp\");\n * \n * const HomePage = { template: () => `<h1>Home</h1>` };\n * const AboutPage = { template: () => `<h1>About Us</h1>` };\n * const UserPage = { \n *   template: (ctx) => `<h1>User: ${ctx.router.params.id}</h1>` \n * };\n * \n * app.use(RouterPlugin, {\n *   mount: '#app',\n *   mode: 'hash',\n *   routes: [\n *     { path: '/', component: HomePage },\n *     { path: '/about', component: AboutPage },\n *     { path: '/users/:id', component: UserPage }\n *   ]\n * });\n */\nexport const RouterPlugin = {\n    /**\n     * Unique identifier for the plugin\n     * @type {string}\n     */\n    name: \"router\",\n\n    /**\n     * Plugin version\n     * @type {string}\n     */\n    version: \"1.0.0-rc.1\",\n\n    /**\n     * Plugin description\n     * @type {string}\n     */\n    description: \"Client-side routing for Eleva applications\",\n\n    /**\n     * Installs the RouterPlugin into an Eleva instance.\n     * \n     * @param {Eleva} eleva - The Eleva instance\n     * @param {RouterOptions} options - Router configuration options\n     * @param {string} options.mount - A CSS selector for the main element where the app is mounted\n     * @param {RouteDefinition[]} options.routes - An array of route definitions\n     * @param {'hash' | 'query' | 'history'} [options.mode='hash'] - The routing mode\n     * @param {string} [options.queryParam='page'] - The query parameter to use in 'query' mode\n     * @param {string} [options.viewSelector='view'] - The selector for the view element within a layout\n     * @param {boolean} [options.autoStart=true] - Whether to start the router automatically\n     * @param {NavigationGuard} [options.onBeforeEach] - A global guard executed before every navigation\n     * @param {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [options.globalLayout] - A global layout for all routes\n     * \n     * @example\n     * // main.js\n     * import Eleva from './eleva.js';\n     * import { RouterPlugin } from './plugins/RouterPlugin.js';\n     *\n     * const app = new Eleva('myApp');\n     *\n     * const HomePage = { template: () => `<h1>Home</h1>` };\n     * const AboutPage = { template: () => `<h1>About Us</h1>` };\n     *\n     * app.use(RouterPlugin, {\n     *  mount: '#app',\n     *  routes: [\n     *    { path: '/', component: HomePage },\n     *    { path: '/about', component: AboutPage }\n     *  ]\n     * });\n     */\n    install(eleva, options = {}) {\n        if (!options.mount) {\n            throw new Error(\"[RouterPlugin] 'mount' option is required\");\n        }\n\n        if (!options.routes || !Array.isArray(options.routes)) {\n            throw new Error(\"[RouterPlugin] 'routes' option must be an array\");\n        }\n\n        /**\n         * Registers a component definition with the Eleva instance.\n         * This method handles both inline component objects and pre-registered component names.\n         * \n         * @param {any} def - The component definition to register\n         * @param {string} type - The type of component for naming (e.g., \"Route\", \"Layout\")\n         * @returns {string | null} The registered component name or null if no definition provided\n         */\n        const register = (def, type) => {\n            if (!def) return null;\n\n            if (typeof def === \"object\" && def !== null && !def.name) {\n                const name = `Eleva${type}Component_${Math.random()\n                    .toString(36)\n                    .slice(2, 11)}`;\n\n                try {\n                    eleva.component(name, def);\n                    return name;\n                } catch (error) {\n                    throw new Error(`[RouterPlugin] Failed to register ${type} component: ${error.message}`);\n                }\n            }\n            return def;\n        };\n\n        if (options.globalLayout) {\n            options.globalLayout = register(options.globalLayout, \"GlobalLayout\");\n        }\n\n        (options.routes || []).forEach((route) => {\n            route.component = register(route.component, \"Route\");\n            if (route.layout) {\n                route.layout = register(route.layout, \"RouteLayout\");\n            }\n        });\n\n        const router = new Router(eleva, options);\n        eleva.router = router;\n\n        if (options.autoStart !== false) {\n            queueMicrotask(() => router.start());\n        }\n\n        // Add plugin metadata to the Eleva instance\n        if (!eleva.plugins) {\n            eleva.plugins = new Map();\n        }\n        eleva.plugins.set(this.name, {\n            name: this.name,\n            version: this.version,\n            description: this.description,\n            options\n        });\n\n        // Add utility methods for manual router access\n        eleva.navigate = router.navigate.bind(router);\n        eleva.getCurrentRoute = () => router.currentRoute.value;\n        eleva.getRouteParams = () => router.currentParams.value;\n        eleva.getRouteQuery = () => router.currentQuery.value;\n\n        return router;\n    },\n\n    /**\n     * Uninstalls the plugin from the Eleva instance\n     * \n     * @param {Eleva} eleva - The Eleva instance\n     */\n    async uninstall(eleva) {\n        if (eleva.router) {\n            await eleva.router.destroy();\n            delete eleva.router;\n        }\n\n        // Remove plugin metadata\n        if (eleva.plugins) {\n            eleva.plugins.delete(this.name);\n        }\n\n        // Remove utility methods\n        delete eleva.navigate;\n        delete eleva.getCurrentRoute;\n        delete eleva.getRouteParams;\n        delete eleva.getRouteQuery;\n    }\n};\n"],"names":["CAMEL_RE","AttrPlugin","name","version","description","install","eleva","options","enableAria","enableData","enableBoolean","enableDynamic","updateAttributes","oldEl","newEl","oldAttrs","attributes","newAttrs","i","length","value","startsWith","getAttribute","slice","replace","_","l","toUpperCase","setAttribute","dataset","prop","Object","getOwnPropertyDescriptor","getPrototypeOf","matchingProp","getOwnPropertyNames","find","p","toLowerCase","includes","descriptor","get","call","boolValue","removeAttribute","hasAttribute","renderer","_originalPatchNode","_patchNode","oldNode","newNode","_eleva_instance","this","_isSameNode","nodeType","Node","ELEMENT_NODE","_diff","TEXT_NODE","nodeValue","replaceWith","cloneNode","plugins","Map","set","updateElementAttributes","uninstall","delete","CoreErrorHandler","handle","error","context","details","formattedError","Error","message","originalError","warn","log","Router","constructor","mode","queryParam","viewSelector","routes","_processRoutes","emitter","isStarted","_isNavigating","eventListeners","currentRoute","signal","previousRoute","currentParams","currentQuery","currentLayout","currentView","errorHandler","_validateOptions","processedRoutes","route","push","segments","_parsePathIntoSegments","path","normalizedPath","split","filter","Boolean","map","segment","paramName","substring","type","_findViewElement","container","selector","querySelector","start","window","document","mount","mountSelector","handler","_handleRouteChange","addEventListener","removeEventListener","destroy","plugin","values","forEach","cleanup","unmount","navigate","location","params","target","_buildPath","query","keys","queryString","URLSearchParams","toString","_isSameRoute","_proceedWithNavigation","state","historyMethod","newUrl","pathname","search","history","replaceState","hash","url","_buildQueryUrl","queueMicrotask","emit","urlParams","current","targetPath","targetQuery","_parseQuery","JSON","stringify","result","key","entries","encodedValue","encodeURIComponent","String","RegExp","from","toLocation","_getCurrentLocation","fullUrl","fullPath","toMatch","_matchRoute","notFoundRoute","pathMatch","to","meta","matched","_runGuards","layoutComponent","pageComponent","_resolveComponents","tryUnmount","async","instance","layout","globalLayout","afterLeave","_render","afterEnter","guards","onBeforeEach","beforeLeave","beforeEnter","guard","_resolveStringComponent","def","componentDef","_components","componentName","availableComponents","Array","_resolveFunctionComponent","funcStr","isAsyncImport","default","function","_validateComponentDefinition","definition","template","_resolveComponent","effectiveLayout","Promise","all","component","mountEl","layoutInstance","_wrapComponentWithChildren","viewEl","viewInstance","_createRouteGetter","property","defaultValue","_wrapComponent","originalSetup","setup","self","ctx","router","bind","previous","href","wrappedComponent","children","wrappedChildren","childComponent","pathSegments","isMatch","routeSegment","pathSegment","decodeURIComponent","onAfterEnter","hook","on","onAfterLeave","onAfterEach","onError","use","has","existingPlugin","getPlugins","getPlugin","removePlugin","setErrorHandler","RouterPlugin","isArray","register","Math","random","autoStart","getCurrentRoute","getRouteParams","getRouteQuery"],"mappings":"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"}