{"version":3,"file":"eleva.umd.js","sources":["../src/modules/TemplateEngine.js","../src/modules/Signal.js","../src/modules/Emitter.js","../src/modules/Renderer.js","../src/core/Eleva.js"],"sourcesContent":["\"use strict\";\n\n/**\n * @class ðŸ”’ TemplateEngine\n * @classdesc A secure template engine that handles interpolation and dynamic attribute parsing.\n * Provides a safe way to evaluate expressions in templates while preventing XSS attacks.\n * All methods are static and can be called directly on the class.\n *\n * @example\n * const template = \"Hello, {{name}}!\";\n * const data = { name: \"World\" };\n * const result = TemplateEngine.parse(template, data); // Returns: \"Hello, World!\"\n */\nexport class TemplateEngine {\n  /**\n   * @private {RegExp} Regular expression for matching template expressions in the format {{ expression }}\n   */\n  static expressionPattern = /\\{\\{\\s*(.*?)\\s*\\}\\}/g;\n\n  /**\n   * Parses a template string, replacing expressions with their evaluated values.\n   * Expressions are evaluated in the provided data context.\n   *\n   * @public\n   * @static\n   * @param {string} template - The template string to parse.\n   * @param {Object} data - The data context for evaluating expressions.\n   * @returns {string} The parsed template with expressions replaced by their values.\n   * @example\n   * const result = TemplateEngine.parse(\"{{user.name}} is {{user.age}} years old\", {\n   *   user: { name: \"John\", age: 30 }\n   * }); // Returns: \"John is 30 years old\"\n   */\n  static parse(template, data) {\n    if (typeof template !== \"string\") return template;\n    return template.replace(this.expressionPattern, (_, expression) =>\n      this.evaluate(expression, data)\n    );\n  }\n\n  /**\n   * Evaluates an expression in the context of the provided data object.\n   * Note: This does not provide a true sandbox and evaluated expressions may access global scope.\n   *\n   * @public\n   * @static\n   * @param {string} expression - The expression to evaluate.\n   * @param {Object} data - The data context for evaluation.\n   * @returns {*} The result of the evaluation, or an empty string if evaluation fails.\n   * @example\n   * const result = TemplateEngine.evaluate(\"user.name\", { user: { name: \"John\" } }); // Returns: \"John\"\n   * const age = TemplateEngine.evaluate(\"user.age\", { user: { age: 30 } }); // Returns: 30\n   */\n  static evaluate(expression, data) {\n    if (typeof expression !== \"string\") return expression;\n    try {\n      return new Function(\"data\", `with(data) { return ${expression}; }`)(data);\n    } catch {\n      return \"\";\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class âš¡ Signal\n * @classdesc A reactive data holder that enables fine-grained reactivity in the Eleva framework.\n * Signals notify registered watchers when their value changes, enabling efficient DOM updates\n * through targeted patching rather than full re-renders.\n *\n * @example\n * const count = new Signal(0);\n * count.watch((value) => console.log(`Count changed to: ${value}`));\n * count.value = 1; // Logs: \"Count changed to: 1\"\n */\nexport class Signal {\n  /**\n   * Creates a new Signal instance with the specified initial value.\n   *\n   * @public\n   * @param {*} value - The initial value of the signal.\n   */\n  constructor(value) {\n    /** @private {T} Internal storage for the signal's current value, where T is the type of the initial value */\n    this._value = value;\n    /** @private {Set<function(T): void>} Collection of callback functions to be notified when value changes, where T is the value type */\n    this._watchers = new Set();\n    /** @private {boolean} Flag to prevent multiple synchronous watcher notifications and batch updates into microtasks */\n    this._pending = false;\n  }\n\n  /**\n   * Gets the current value of the signal.\n   *\n   * @public\n   * @returns {T} The current value, where T is the type of the initial value.\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * Sets a new value for the signal and notifies all registered watchers if the value has changed.\n   * The notification is batched using microtasks to prevent multiple synchronous updates.\n   *\n   * @public\n   * @param {T} newVal - The new value to set, where T is the type of the initial value.\n   * @returns {void}\n   */\n  set value(newVal) {\n    if (newVal !== this._value) {\n      this._value = newVal;\n      this._notifyWatchers();\n    }\n  }\n\n  /**\n   * Registers a watcher function that will be called whenever the signal's value changes.\n   * The watcher will receive the new value as its argument.\n   *\n   * @public\n   * @param {function(T): void} fn - The callback function to invoke on value change, where T is the value type.\n   * @returns {function(): boolean} A function to unsubscribe the watcher.\n   * @example\n   * const unsubscribe = signal.watch((value) => console.log(value));\n   * // Later...\n   * unsubscribe(); // Stops watching for changes\n   */\n  watch(fn) {\n    this._watchers.add(fn);\n    return () => this._watchers.delete(fn);\n  }\n\n  /**\n   * Notifies all registered watchers of a value change using microtask scheduling.\n   * Uses a pending flag to batch multiple synchronous updates into a single notification.\n   * All watcher callbacks receive the current value when executed.\n   *\n   * @private\n   * @returns {void}\n   */\n  _notifyWatchers() {\n    if (!this._pending) {\n      this._pending = true;\n      queueMicrotask(() => {\n        this._pending = false;\n        this._watchers.forEach((fn) => fn(this._value));\n      });\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class ðŸ“¡ Emitter\n * @classdesc A robust event emitter that enables inter-component communication through a publish-subscribe pattern.\n * Components can emit events and listen for events from other components, facilitating loose coupling\n * and reactive updates across the application.\n *\n * @example\n * const emitter = new Emitter();\n * emitter.on('user:login', (user) => console.log(`User logged in: ${user.name}`));\n * emitter.emit('user:login', { name: 'John' }); // Logs: \"User logged in: John\"\n */\nexport class Emitter {\n  /**\n   * Creates a new Emitter instance.\n   *\n   * @public\n   */\n  constructor() {\n    /** @private {Map<string, Set<function(any): void>>} Map of event names to their registered handler functions */\n    this._events = new Map();\n  }\n\n  /**\n   * Registers an event handler for the specified event name.\n   * The handler will be called with the event data when the event is emitted.\n   *\n   * @public\n   * @param {string} event - The name of the event to listen for.\n   * @param {function(any): void} handler - The callback function to invoke when the event occurs.\n   * @returns {function(): boolean} A function to unsubscribe the event handler.\n   * @example\n   * const unsubscribe = emitter.on('user:login', (user) => console.log(user));\n   * // Later...\n   * unsubscribe(); // Stops listening for the event\n   */\n  on(event, handler) {\n    if (!this._events.has(event)) this._events.set(event, new Set());\n\n    this._events.get(event).add(handler);\n    return () => this.off(event, handler);\n  }\n\n  /**\n   * Removes an event handler for the specified event name.\n   * If no handler is provided, all handlers for the event are removed.\n   *\n   * @public\n   * @param {string} event - The name of the event.\n   * @param {function(any): void} [handler] - The specific handler function to remove.\n   * @returns {void}\n   */\n  off(event, handler) {\n    if (!this._events.has(event)) return;\n    if (handler) {\n      const handlers = this._events.get(event);\n      handlers.delete(handler);\n      // Remove the event if there are no handlers left\n      if (handlers.size === 0) this._events.delete(event);\n    } else {\n      this._events.delete(event);\n    }\n  }\n\n  /**\n   * Emits an event with the specified data to all registered handlers.\n   * Handlers are called synchronously in the order they were registered.\n   *\n   * @public\n   * @param {string} event - The name of the event to emit.\n   * @param {...any} args - Optional arguments to pass to the event handlers.\n   * @returns {void}\n   */\n  emit(event, ...args) {\n    if (!this._events.has(event)) return;\n    this._events.get(event).forEach((handler) => handler(...args));\n  }\n}\n","\"use strict\";\n\n/**\n * @class ðŸŽ¨ Renderer\n * @classdesc A DOM renderer that handles efficient DOM updates through patching and diffing.\n * Provides methods for updating the DOM by comparing new and old structures and applying\n * only the necessary changes, minimizing layout thrashing and improving performance.\n *\n * @example\n * const renderer = new Renderer();\n * const container = document.getElementById(\"app\");\n * const newHtml = \"<div>Updated content</div>\";\n * renderer.patchDOM(container, newHtml);\n */\nexport class Renderer {\n  /**\n   * Patches the DOM of a container element with new HTML content.\n   * This method efficiently updates the DOM by comparing the new content with the existing\n   * content and applying only the necessary changes.\n   *\n   * @public\n   * @param {HTMLElement} container - The container element to patch.\n   * @param {string} newHtml - The new HTML content to apply.\n   * @returns {void}\n   * @throws {Error} If container is not an HTMLElement or newHtml is not a string.\n   */\n  patchDOM(container, newHtml) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error(\"Container must be an HTMLElement\");\n    }\n    if (typeof newHtml !== \"string\") {\n      throw new Error(\"newHtml must be a string\");\n    }\n\n    const temp = document.createElement(\"div\");\n    temp.innerHTML = newHtml;\n    this.diff(container, temp);\n    temp.innerHTML = \"\";\n  }\n\n  /**\n   * Diffs two DOM trees (old and new) and applies updates to the old DOM.\n   * This method recursively compares nodes and their attributes, applying only\n   * the necessary changes to minimize DOM operations.\n   *\n   * @private\n   * @param {HTMLElement} oldParent - The original DOM element.\n   * @param {HTMLElement} newParent - The new DOM element.\n   * @returns {void}\n   * @throws {Error} If either parent is not an HTMLElement.\n   */\n  diff(oldParent, newParent) {\n    if (\n      !(oldParent instanceof HTMLElement) ||\n      !(newParent instanceof HTMLElement)\n    ) {\n      throw new Error(\"Both parents must be HTMLElements\");\n    }\n\n    if (oldParent.isEqualNode(newParent)) return;\n\n    const oldC = oldParent.childNodes;\n    const newC = newParent.childNodes;\n    const len = Math.max(oldC.length, newC.length);\n    const operations = [];\n\n    for (let i = 0; i < len; i++) {\n      const oldNode = oldC[i];\n      const newNode = newC[i];\n\n      if (!oldNode && newNode) {\n        operations.push(() => oldParent.appendChild(newNode.cloneNode(true)));\n        continue;\n      }\n      if (oldNode && !newNode) {\n        operations.push(() => oldParent.removeChild(oldNode));\n        continue;\n      }\n\n      const isSameType =\n        oldNode.nodeType === newNode.nodeType &&\n        oldNode.nodeName === newNode.nodeName;\n\n      if (!isSameType) {\n        operations.push(() =>\n          oldParent.replaceChild(newNode.cloneNode(true), oldNode)\n        );\n        continue;\n      }\n\n      if (oldNode.nodeType === Node.ELEMENT_NODE) {\n        const oldKey = oldNode.getAttribute(\"key\");\n        const newKey = newNode.getAttribute(\"key\");\n\n        if (oldKey !== newKey && (oldKey || newKey)) {\n          operations.push(() =>\n            oldParent.replaceChild(newNode.cloneNode(true), oldNode)\n          );\n          continue;\n        }\n\n        this.updateAttributes(oldNode, newNode);\n        this.diff(oldNode, newNode);\n      } else if (\n        oldNode.nodeType === Node.TEXT_NODE &&\n        oldNode.nodeValue !== newNode.nodeValue\n      ) {\n        oldNode.nodeValue = newNode.nodeValue;\n      }\n    }\n\n    if (operations.length) {\n      operations.forEach((op) => op());\n    }\n  }\n\n  /**\n   * Updates the attributes of an element to match those of a new element.\n   * Handles special cases for ARIA attributes, data attributes, and boolean properties.\n   *\n   * @private\n   * @param {HTMLElement} oldEl - The element to update.\n   * @param {HTMLElement} newEl - The element providing the updated attributes.\n   * @returns {void}\n   * @throws {Error} If either element is not an HTMLElement.\n   */\n  updateAttributes(oldEl, newEl) {\n    if (!(oldEl instanceof HTMLElement) || !(newEl instanceof HTMLElement)) {\n      throw new Error(\"Both elements must be HTMLElements\");\n    }\n\n    const oldAttrs = oldEl.attributes;\n    const newAttrs = newEl.attributes;\n    const operations = [];\n\n    // Remove old attributes\n    for (const { name } of oldAttrs) {\n      if (!name.startsWith(\"@\") && !newEl.hasAttribute(name)) {\n        operations.push(() => oldEl.removeAttribute(name));\n      }\n    }\n\n    // Update/add new attributes\n    for (const attr of newAttrs) {\n      const { name, value } = attr;\n      if (name.startsWith(\"@\")) continue;\n\n      if (oldEl.getAttribute(name) === value) continue;\n\n      operations.push(() => {\n        oldEl.setAttribute(name, value);\n\n        if (name.startsWith(\"aria-\")) {\n          const prop =\n            \"aria\" +\n            name.slice(5).replace(/-([a-z])/g, (_, l) => l.toUpperCase());\n          oldEl[prop] = value;\n        } else if (name.startsWith(\"data-\")) {\n          oldEl.dataset[name.slice(5)] = value;\n        } else {\n          const prop = name.replace(/-([a-z])/g, (_, l) => l.toUpperCase());\n          if (prop in oldEl) {\n            const descriptor = Object.getOwnPropertyDescriptor(\n              Object.getPrototypeOf(oldEl),\n              prop\n            );\n            const isBoolean =\n              typeof oldEl[prop] === \"boolean\" ||\n              (descriptor?.get &&\n                typeof descriptor.get.call(oldEl) === \"boolean\");\n\n            if (isBoolean) {\n              oldEl[prop] =\n                value !== \"false\" &&\n                (value === \"\" || value === prop || value === \"true\");\n            } else {\n              oldEl[prop] = value;\n            }\n          }\n        }\n      });\n    }\n\n    if (operations.length) {\n      operations.forEach((op) => op());\n    }\n  }\n}\n","\"use strict\";\n\nimport { TemplateEngine } from \"../modules/TemplateEngine.js\";\nimport { Signal } from \"../modules/Signal.js\";\nimport { Emitter } from \"../modules/Emitter.js\";\nimport { Renderer } from \"../modules/Renderer.js\";\n\n/**\n * @typedef {Object} ComponentDefinition\n * @property {function(Object<string, any>): (Object<string, any>|Promise<Object<string, any>>)} [setup]\n *           Optional setup function that initializes the component's state and returns reactive data\n * @property {function(Object<string, any>): string} template\n *           Required function that defines the component's HTML structure\n * @property {function(Object<string, any>): string} [style]\n *           Optional function that provides component-scoped CSS styles\n * @property {Object<string, ComponentDefinition>} [children]\n *           Optional object defining nested child components\n */\n\n/**\n * @typedef {Object} ElevaPlugin\n * @property {function(Eleva, Object<string, any>): void} install\n *           Function that installs the plugin into the Eleva instance\n * @property {string} name\n *           Unique identifier name for the plugin\n */\n\n/**\n * @typedef {Object} MountResult\n * @property {HTMLElement} container\n *           The DOM element where the component is mounted\n * @property {Object<string, any>} data\n *           The component's reactive state and context data\n * @property {function(): void} unmount\n *           Function to clean up and unmount the component\n */\n\n/**\n * @class ðŸ§© Eleva\n * @classdesc A modern, signal-based component runtime framework that provides lifecycle hooks,\n * scoped styles, and plugin support. Eleva manages component registration, plugin integration,\n * event handling, and DOM rendering with a focus on performance and developer experience.\n *\n * @example\n * const app = new Eleva(\"myApp\");\n * app.component(\"myComponent\", {\n *   template: (ctx) => `<div>Hello ${ctx.props.name}</div>`,\n *   setup: (ctx) => ({ count: new Signal(0) })\n * });\n * app.mount(document.getElementById(\"app\"), \"myComponent\", { name: \"World\" });\n */\nexport class Eleva {\n  /**\n   * Creates a new Eleva instance with the specified name and configuration.\n   *\n   * @public\n   * @param {string} name - The unique identifier name for this Eleva instance.\n   * @param {Object<string, any>} [config={}] - Optional configuration object for the instance.\n   *        May include framework-wide settings and default behaviors.\n   */\n  constructor(name, config = {}) {\n    /** @public {string} The unique identifier name for this Eleva instance */\n    this.name = name;\n    /** @public {Object<string, any>} Optional configuration object for the Eleva instance */\n    this.config = config;\n    /** @public {Emitter} Instance of the event emitter for handling component events */\n    this.emitter = new Emitter();\n    /** @public {typeof Signal} Static reference to the Signal class for creating reactive state */\n    this.signal = Signal;\n    /** @public {Renderer} Instance of the renderer for handling DOM updates and patching */\n    this.renderer = new Renderer();\n\n    /** @private {Map<string, ComponentDefinition>} Registry of all component definitions by name */\n    this._components = new Map();\n    /** @private {Map<string, ElevaPlugin>} Collection of installed plugin instances by name */\n    this._plugins = new Map();\n    /** @private {string[]} Array of lifecycle hook names supported by components */\n    this._lifecycleHooks = [\n      \"onBeforeMount\",\n      \"onMount\",\n      \"onBeforeUpdate\",\n      \"onUpdate\",\n      \"onUnmount\",\n    ];\n    /** @private {boolean} Flag indicating if the root component is currently mounted */\n    this._isMounted = false;\n  }\n\n  /**\n   * Integrates a plugin with the Eleva framework.\n   * The plugin's install function will be called with the Eleva instance and provided options.\n   * After installation, the plugin will be available for use by components.\n   *\n   * @public\n   * @param {ElevaPlugin} plugin - The plugin object which must have an `install` function.\n   * @param {Object<string, any>} [options={}] - Optional configuration options for the plugin.\n   * @returns {Eleva} The Eleva instance (for method chaining).\n   * @example\n   * app.use(myPlugin, { option1: \"value1\" });\n   */\n  use(plugin, options = {}) {\n    plugin.install(this, options);\n    this._plugins.set(plugin.name, plugin);\n\n    return this;\n  }\n\n  /**\n   * Registers a new component with the Eleva instance.\n   * The component will be available for mounting using its registered name.\n   *\n   * @public\n   * @param {string} name - The unique name of the component to register.\n   * @param {ComponentDefinition} definition - The component definition including setup, template, style, and children.\n   * @returns {Eleva} The Eleva instance (for method chaining).\n   * @throws {Error} If the component name is already registered.\n   * @example\n   * app.component(\"myButton\", {\n   *   template: (ctx) => `<button>${ctx.props.text}</button>`,\n   *   style: () => \"button { color: blue; }\"\n   * });\n   */\n  component(name, definition) {\n    /** @type {Map<string, ComponentDefinition>} */\n    this._components.set(name, definition);\n    return this;\n  }\n\n  /**\n   * Mounts a registered component to a DOM element.\n   * This will initialize the component, set up its reactive state, and render it to the DOM.\n   *\n   * @public\n   * @param {HTMLElement} container - The DOM element where the component will be mounted.\n   * @param {string|ComponentDefinition} compName - The name of the registered component or a direct component definition.\n   * @param {Object<string, any>} [props={}] - Optional properties to pass to the component.\n   * @returns {Promise<MountResult>}\n   *          A Promise that resolves to an object containing:\n   *          - container: The mounted component's container element\n   *          - data: The component's reactive state and context\n   *          - unmount: Function to clean up and unmount the component\n   * @throws {Error} If the container is not found, or component is not registered.\n   * @example\n   * const instance = await app.mount(document.getElementById(\"app\"), \"myComponent\", { text: \"Click me\" });\n   * // Later...\n   * instance.unmount();\n   */\n  async mount(container, compName, props = {}) {\n    if (!container) throw new Error(`Container not found: ${container}`);\n\n    /** @type {ComponentDefinition} */\n    const definition =\n      typeof compName === \"string\" ? this._components.get(compName) : compName;\n    if (!definition) throw new Error(`Component \"${compName}\" not registered.`);\n\n    if (typeof definition.template !== \"function\")\n      throw new Error(\"Component template must be a function\");\n\n    /**\n     * Destructure the component definition to access core functionality.\n     * - setup: Optional function for component initialization and state management\n     * - template: Required function that returns the component's HTML structure\n     * - style: Optional function for component-scoped CSS styles\n     * - children: Optional object defining nested child components\n     */\n    const { setup, template, style, children } = definition;\n\n    /**\n     * Creates the initial context object for the component instance.\n     * This context provides core functionality and will be merged with setup data.\n     * @type {Object<string, any>}\n     * @property {Object<string, any>} props - Component properties passed during mounting\n     * @property {Emitter} emitter - Event emitter instance for component event handling\n     * @property {function(any): Signal} signal - Factory function to create reactive Signal instances\n     * @property {Object<string, function(): void>} ...lifecycleHooks - Prepared lifecycle hook functions\n     */\n    const context = {\n      props,\n      emitter: this.emitter,\n      /** @type {(v: any) => Signal} */\n      signal: (v) => new this.signal(v),\n      ...this._prepareLifecycleHooks(),\n    };\n\n    /**\n     * Processes the mounting of the component.\n     *\n     * @param {Object<string, any>} data - Data returned from the component's setup function.\n     * @returns {MountResult} An object with the container, merged context data, and an unmount function.\n     */\n    const processMount = (data) => {\n      const mergedContext = { ...context, ...data };\n      /** @type {Array<() => void>} */\n      const watcherUnsubscribers = [];\n      /** @type {Array<MountResult>} */\n      const childInstances = [];\n      /** @type {Array<() => void>} */\n      const cleanupListeners = [];\n\n      // Execute before hooks\n      if (!this._isMounted) {\n        mergedContext.onBeforeMount && mergedContext.onBeforeMount();\n      } else {\n        mergedContext.onBeforeUpdate && mergedContext.onBeforeUpdate();\n      }\n\n      /**\n       * Renders the component by parsing the template, patching the DOM,\n       * processing events, injecting styles, and mounting child components.\n       */\n      const render = () => {\n        const newHtml = TemplateEngine.parse(\n          template(mergedContext),\n          mergedContext\n        );\n        this.renderer.patchDOM(container, newHtml);\n        this._processEvents(container, mergedContext, cleanupListeners);\n        this._injectStyles(container, compName, style, mergedContext);\n        this._mountChildren(container, children, childInstances);\n\n        if (!this._isMounted) {\n          mergedContext.onMount && mergedContext.onMount();\n          this._isMounted = true;\n        } else {\n          mergedContext.onUpdate && mergedContext.onUpdate();\n        }\n      };\n\n      /**\n       * Sets up reactive watchers for all Signal instances in the component's data.\n       * When a Signal's value changes, the component will re-render to reflect the updates.\n       * Stores unsubscribe functions to clean up watchers when component unmounts.\n       */\n      for (const val of Object.values(data)) {\n        if (val instanceof Signal) watcherUnsubscribers.push(val.watch(render));\n      }\n\n      render();\n\n      return {\n        container,\n        data: mergedContext,\n        /**\n         * Unmounts the component, cleaning up watchers and listeners, child components, and clearing the container.\n         *\n         * @returns {void}\n         */\n        unmount: () => {\n          for (const fn of watcherUnsubscribers) fn();\n          for (const fn of cleanupListeners) fn();\n          for (const child of childInstances) child.unmount();\n          mergedContext.onUnmount && mergedContext.onUnmount();\n          container.innerHTML = \"\";\n        },\n      };\n    };\n\n    // Handle asynchronous setup.\n    return Promise.resolve(\n      typeof setup === \"function\" ? setup(context) : {}\n    ).then(processMount);\n  }\n\n  /**\n   * Prepares default no-operation lifecycle hook functions for a component.\n   * These hooks will be called at various stages of the component's lifecycle.\n   *\n   * @private\n   * @returns {Object<string, function(): void>} An object mapping lifecycle hook names to empty functions.\n   *         The returned object will be merged with the component's context.\n   */\n  _prepareLifecycleHooks() {\n    /** @type {Object<string, () => void>} */\n    const hooks = {};\n    for (const hook of this._lifecycleHooks) {\n      hooks[hook] = () => {};\n    }\n    return hooks;\n  }\n\n  /**\n   * Processes DOM elements for event binding based on attributes starting with \"@\".\n   * This method handles the event delegation system and ensures proper cleanup of event listeners.\n   *\n   * @private\n   * @param {HTMLElement} container - The container element in which to search for event attributes.\n   * @param {Object<string, any>} context - The current component context containing event handler definitions.\n   * @param {Array<Function>} cleanupListeners - Array to collect cleanup functions for each event listener.\n   * @returns {void}\n   */\n  _processEvents(container, context, cleanupListeners) {\n    const elements = container.querySelectorAll(\"*\");\n    for (const el of elements) {\n      const attrs = el.attributes;\n      for (let i = 0; i < attrs.length; i++) {\n        const attr = attrs[i];\n        if (attr.name.startsWith(\"@\")) {\n          const event = attr.name.slice(1);\n          const handler = TemplateEngine.evaluate(attr.value, context);\n          if (typeof handler === \"function\") {\n            el.addEventListener(event, handler);\n            el.removeAttribute(attr.name);\n            cleanupListeners.push(() => el.removeEventListener(event, handler));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Injects scoped styles into the component's container.\n   * The styles are automatically prefixed to prevent style leakage to other components.\n   *\n   * @private\n   * @param {HTMLElement} container - The container element where styles should be injected.\n   * @param {string} compName - The component name used to identify the style element.\n   * @param {function(Object<string, any>): string} [styleFn] - Optional function that returns CSS styles as a string.\n   * @param {Object<string, any>} context - The current component context for style interpolation.\n   * @returns {void}\n   */\n  _injectStyles(container, compName, styleFn, context) {\n    if (!styleFn) return;\n\n    let styleEl = container.querySelector(\n      `style[data-eleva-style=\"${compName}\"]`\n    );\n    if (!styleEl) {\n      styleEl = document.createElement(\"style\");\n      styleEl.setAttribute(\"data-eleva-style\", compName);\n      container.appendChild(styleEl);\n    }\n    styleEl.textContent = TemplateEngine.parse(styleFn(context), context);\n  }\n\n  /**\n   * Mounts child components within the parent component's container.\n   * This method handles the recursive mounting of nested components.\n   *\n   * @private\n   * @param {HTMLElement} container - The parent container element.\n   * @param {Object<string, ComponentDefinition>} [children] - Object mapping of child component selectors to their definitions.\n   * @param {Array<MountResult>} childInstances - Array to store the mounted child component instances.\n   * @returns {void}\n   */\n  async _mountChildren(container, children, childInstances) {\n    for (const child of childInstances) child.unmount();\n    childInstances.length = 0;\n\n    if (!children) return;\n\n    for (const childSelector of Object.keys(children)) {\n      if (!childSelector) continue;\n\n      for (const childEl of container.querySelectorAll(childSelector)) {\n        if (!(childEl instanceof HTMLElement)) continue;\n        const props = {};\n        for (const { name, value } of [...childEl.attributes]) {\n          if (name.startsWith(\"eleva-prop-\")) {\n            props[name.replace(\"eleva-prop-\", \"\")] = value;\n          }\n        }\n        const instance = await this.mount(\n          childEl,\n          children[childSelector],\n          props\n        );\n        childInstances.push(instance);\n      }\n    }\n  }\n}\n"],"names":["TemplateEngine","expressionPattern","parse","template","data","replace","_","expression","evaluate","Function","Signal","constructor","value","_value","_watchers","Set","_pending","newVal","_notifyWatchers","watch","fn","add","delete","queueMicrotask","forEach","Emitter","_events","Map","on","event","handler","has","set","get","off","handlers","size","emit","args","Renderer","patchDOM","container","newHtml","HTMLElement","Error","temp","document","createElement","innerHTML","diff","oldParent","newParent","isEqualNode","oldC","childNodes","newC","len","Math","max","length","operations","i","oldNode","newNode","push","appendChild","cloneNode","removeChild","isSameType","nodeType","nodeName","replaceChild","Node","ELEMENT_NODE","oldKey","getAttribute","newKey","updateAttributes","TEXT_NODE","nodeValue","op","oldEl","newEl","oldAttrs","attributes","newAttrs","name","startsWith","hasAttribute","removeAttribute","attr","setAttribute","prop","slice","l","toUpperCase","dataset","descriptor","Object","getOwnPropertyDescriptor","getPrototypeOf","isBoolean","call","Eleva","config","emitter","signal","renderer","_components","_plugins","_lifecycleHooks","_isMounted","use","plugin","options","install","component","definition","mount","compName","props","setup","style","children","context","v","_prepareLifecycleHooks","processMount","mergedContext","watcherUnsubscribers","childInstances","cleanupListeners","onBeforeMount","onBeforeUpdate","render","_processEvents","_injectStyles","_mountChildren","onMount","onUpdate","val","values","unmount","child","onUnmount","Promise","resolve","then","hooks","hook","elements","querySelectorAll","el","attrs","addEventListener","removeEventListener","styleFn","styleEl","querySelector","textContent","childSelector","keys","childEl","instance"],"mappings":"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"}