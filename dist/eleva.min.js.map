{"version":3,"file":"eleva.min.js","sources":["../src/modules/TemplateEngine.js","../src/modules/Signal.js","../src/modules/Emitter.js","../src/modules/Renderer.js","../src/core/Eleva.js"],"sourcesContent":["\"use strict\";\n\n/**\n * @class üîí TemplateEngine\n * @classdesc Secure interpolation & dynamic attribute parsing.\n * Provides methods to parse template strings by replacing interpolation expressions\n * with dynamic data values and to evaluate expressions within a given data context.\n */\nexport class TemplateEngine {\n  /**\n   * Parses a template string and replaces interpolation expressions with corresponding values.\n   *\n   * @param {string} template - The template string containing expressions in the format `{{ expression }}`.\n   * @param {Object<string, any>} data - The data object to use for evaluating expressions.\n   * @returns {string} The resulting string with evaluated values.\n   */\n  static parse(template, data) {\n    if (!template.trim()) return \"\";\n\n    return template.replace(/\\{\\{\\s*(.*?)\\s*\\}\\}/g, (_, expr) => {\n      const value = this.evaluate(expr, data);\n      return value === undefined ? \"\" : value;\n    });\n  }\n\n  /**\n   * Evaluates a JavaScript expression using the provided data context.\n   *\n   * @param {string} expr - The JavaScript expression to evaluate.\n   * @param {Object<string, any>} data - The data context for evaluating the expression.\n   * @returns {any} The result of the evaluated expression, or an empty string if undefined or on error.\n   */\n  static evaluate(expr, data) {\n    try {\n      if (!expr.trim()) return \"\";\n\n      const keys = Object.keys(data);\n      const values = Object.values(data);\n      const result = new Function(...keys, `return ${expr}`)(...values);\n      return result === undefined ? \"\" : result;\n    } catch (error) {\n      console.error(`Template evaluation error:`, {\n        expression: expr,\n        data,\n        error: error.message,\n      });\n      return \"\";\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class ‚ö° Signal\n * @classdesc Fine-grained reactivity.\n * A reactive data holder that notifies registered watchers when its value changes,\n * enabling fine-grained DOM patching rather than full re-renders.\n */\nexport class Signal {\n  /**\n   * Creates a new Signal instance.\n   *\n   * @param {*} value - The initial value of the signal.\n   */\n  constructor(value) {\n    /** @private {*} Internal storage for the signal's current value */\n    this._value = value;\n    /** @private {Set<function>} Collection of callback functions to be notified when value changes */\n    this._watchers = new Set();\n    /** @private {boolean} Flag to prevent multiple synchronous watcher notifications and batch updates into microtasks */\n    this._pending = false;\n  }\n\n  /**\n   * Gets the current value of the signal.\n   *\n   * @returns {*} The current value.\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * Sets a new value for the signal and notifies all registered watchers if the value has changed.\n   *\n   * @param {*} newVal - The new value to set.\n   */\n  set value(newVal) {\n    if (newVal !== this._value) {\n      this._value = newVal;\n      this._notifyWatchers();\n    }\n  }\n\n  /**\n   * Registers a watcher function that will be called whenever the signal's value changes.\n   *\n   * @param {function(any): void} fn - The callback function to invoke on value change.\n   * @returns {function(): boolean} A function to unsubscribe the watcher.\n   */\n  watch(fn) {\n    this._watchers.add(fn);\n    return () => this._watchers.delete(fn);\n  }\n\n  /**\n   * Notifies all registered watchers of a value change using microtask scheduling.\n   * Uses a pending flag to batch multiple synchronous updates into a single notification.\n   * All watcher callbacks receive the current value when executed.\n   *\n   * @private\n   * @returns {void}\n   */\n  _notifyWatchers() {\n    if (!this._pending) {\n      this._pending = true;\n      queueMicrotask(() => {\n        this._pending = false;\n        this._watchers.forEach((fn) => fn(this._value));\n      });\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class üéôÔ∏è Emitter\n * @classdesc Robust inter-component communication with event bubbling.\n * Implements a basic publish-subscribe pattern for event handling, allowing components\n * to communicate through custom events.\n */\nexport class Emitter {\n  /**\n   * Creates a new Emitter instance.\n   */\n  constructor() {\n    /** @type {Object.<string, Function[]>} Storage for event handlers mapped by event name */\n    this.events = {};\n  }\n\n  /**\n   * Registers an event handler for the specified event.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function(...any): void} handler - The function to call when the event is emitted.\n   */\n  on(event, handler) {\n    (this.events[event] || (this.events[event] = [])).push(handler);\n  }\n\n  /**\n   * Removes a previously registered event handler.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function(...any): void} handler - The handler function to remove.\n   */\n  off(event, handler) {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter((h) => h !== handler);\n    }\n  }\n\n  /**\n   * Emits an event, invoking all handlers registered for that event.\n   *\n   * @param {string} event - The event name.\n   * @param {...any} args - Additional arguments to pass to the event handlers.\n   */\n  emit(event, ...args) {\n    (this.events[event] || []).forEach((handler) => handler(...args));\n  }\n}\n","\"use strict\";\n\n/**\n * @class üé® Renderer\n * @classdesc Handles DOM patching, diffing, and attribute updates.\n * Provides methods for efficient DOM updates by diffing the new and old DOM structures\n * and applying only the necessary changes.\n */\nexport class Renderer {\n  /**\n   * Patches the DOM of a container element with new HTML content.\n   *\n   * @param {HTMLElement} container - The container element to patch.\n   * @param {string} newHtml - The new HTML content to apply.\n   */\n  patchDOM(container, newHtml) {\n    const tempContainer = document.createElement(\"div\");\n    tempContainer.innerHTML = newHtml;\n    this.diff(container, tempContainer);\n  }\n\n  /**\n   * Diffs two DOM trees (old and new) and applies updates to the old DOM.\n   *\n   * @param {HTMLElement} oldParent - The original DOM element.\n   * @param {HTMLElement} newParent - The new DOM element.\n   */\n  diff(oldParent, newParent) {\n    // Fast path for identical nodes\n    if (oldParent.isEqualNode(newParent)) return;\n\n    const oldNodes =\n      oldParent && oldParent.childNodes ? Array.from(oldParent.childNodes) : [];\n    const newNodes =\n      newParent && newParent.childNodes ? Array.from(newParent.childNodes) : [];\n\n    const max = Math.max(oldNodes.length, newNodes.length);\n\n    for (let i = 0; i < max; i++) {\n      const oldNode = oldNodes[i];\n      const newNode = newNodes[i];\n\n      // Case 1: Append new nodes that don't exist in the old tree.\n      if (!oldNode && newNode) {\n        oldParent.appendChild(newNode.cloneNode(true));\n        continue;\n      }\n      // Case 2: Remove old nodes not present in the new tree.\n      if (oldNode && !newNode) {\n        oldParent.removeChild(oldNode);\n        continue;\n      }\n\n      // Case 3: For element nodes, compare keys if available.\n      if (\n        oldNode.nodeType === Node.ELEMENT_NODE &&\n        newNode.nodeType === Node.ELEMENT_NODE\n      ) {\n        const oldKey = oldNode.getAttribute(\"key\");\n        const newKey = newNode.getAttribute(\"key\");\n        if (oldKey || newKey) {\n          if (oldKey !== newKey) {\n            oldParent.replaceChild(newNode.cloneNode(true), oldNode);\n            continue;\n          }\n        }\n      }\n\n      // Case 4: Replace nodes if types or tag names differ.\n      if (\n        oldNode.nodeType !== newNode.nodeType ||\n        oldNode.nodeName !== newNode.nodeName\n      ) {\n        oldParent.replaceChild(newNode.cloneNode(true), oldNode);\n        continue;\n      }\n      // Case 5: For text nodes, update content if different.\n      if (oldNode.nodeType === Node.TEXT_NODE) {\n        if (oldNode.nodeValue !== newNode.nodeValue) {\n          oldNode.nodeValue = newNode.nodeValue;\n        }\n        continue;\n      }\n      // Case 6: For element nodes, update attributes and then diff children.\n      if (oldNode.nodeType === Node.ELEMENT_NODE) {\n        this.updateAttributes(oldNode, newNode);\n        this.diff(oldNode, newNode);\n      }\n    }\n  }\n\n  /**\n   * Updates the attributes of an element to match those of a new element.\n   *\n   * @param {HTMLElement} oldEl - The element to update.\n   * @param {HTMLElement} newEl - The element providing the updated attributes.\n   */\n  updateAttributes(oldEl, newEl) {\n    const attributeToPropertyMap = {\n      value: \"value\",\n      checked: \"checked\",\n      selected: \"selected\",\n      disabled: \"disabled\",\n    };\n\n    // Remove old attributes that no longer exist.\n    Array.from(oldEl.attributes).forEach((attr) => {\n      if (attr.name.startsWith(\"@\")) return;\n      if (!newEl.hasAttribute(attr.name)) {\n        oldEl.removeAttribute(attr.name);\n      }\n    });\n    // Add or update attributes from newEl.\n    Array.from(newEl.attributes).forEach((attr) => {\n      if (attr.name.startsWith(\"@\")) return;\n      if (oldEl.getAttribute(attr.name) !== attr.value) {\n        oldEl.setAttribute(attr.name, attr.value);\n        if (attributeToPropertyMap[attr.name]) {\n          oldEl[attributeToPropertyMap[attr.name]] = attr.value;\n        } else if (attr.name in oldEl) {\n          oldEl[attr.name] = attr.value;\n        }\n      }\n    });\n  }\n}\n","\"use strict\";\n\nimport { TemplateEngine } from \"../modules/TemplateEngine.js\";\nimport { Signal } from \"../modules/Signal.js\";\nimport { Emitter } from \"../modules/Emitter.js\";\nimport { Renderer } from \"../modules/Renderer.js\";\n\n/**\n * Defines the structure and behavior of a component.\n * @typedef {Object} ComponentDefinition\n * @property {function(Object<string, any>): (Object<string, any>|Promise<Object<string, any>>)} [setup]\n *           Optional setup function that initializes the component's reactive state and lifecycle.\n *           Receives props and context as an argument and should return an object containing the component's state.\n *           Can return either a synchronous object or a Promise that resolves to an object for async initialization.\n *\n * @property {function(Object<string, any>): string} template\n *           Required function that defines the component's HTML structure.\n *           Receives the merged context (props + setup data) and must return an HTML template string.\n *           Supports dynamic expressions using {{ }} syntax for reactive data binding.\n *\n * @property {function(Object<string, any>): string} [style]\n *           Optional function that defines component-scoped CSS styles.\n *           Receives the merged context and returns a CSS string that will be automatically scoped to the component.\n *           Styles are injected into the component's container and only affect elements within it.\n *\n * @property {Object<string, ComponentDefinition>} [children]\n *           Optional object that defines nested child components.\n *           Keys are CSS selectors that match elements in the template where child components should be mounted.\n *           Values are ComponentDefinition objects that define the structure and behavior of each child component.\n */\n\n/**\n * @class üß© Eleva\n * @classdesc Signal-based component runtime framework with lifecycle hooks, scoped styles, and plugin support.\n * Manages component registration, plugin integration, event handling, and DOM rendering.\n */\nexport class Eleva {\n  /**\n   * Creates a new Eleva instance.\n   *\n   * @param {string} name - The name of the Eleva instance.\n   * @param {Object<string, any>} [config={}] - Optional configuration for the instance.\n   */\n  constructor(name, config = {}) {\n    /** @type {string} The unique identifier name for this Eleva instance */\n    this.name = name;\n    /** @type {Object<string, any>} Optional configuration object for the Eleva instance */\n    this.config = config;\n    /** @type {Object<string, ComponentDefinition>} Object storing registered component definitions by name */\n    this._components = {};\n    /** @private {Array<Object>} Collection of installed plugin instances */\n    this._plugins = [];\n    /** @private {string[]} Array of lifecycle hook names supported by the component */\n    this._lifecycleHooks = [\n      \"onBeforeMount\",\n      \"onMount\",\n      \"onBeforeUpdate\",\n      \"onUpdate\",\n      \"onUnmount\",\n    ];\n    /** @private {boolean} Flag indicating if component is currently mounted */\n    this._isMounted = false;\n    /** @private {Emitter} Instance of the event emitter for handling component events */\n    this.emitter = new Emitter();\n    /** @private {Renderer} Instance of the renderer for handling DOM updates and patching */\n    this.renderer = new Renderer();\n  }\n\n  /**\n   * Integrates a plugin with the Eleva framework.\n   *\n   * @param {Object} plugin - The plugin object which should have an `install` function.\n   * @param {Object<string, any>} [options={}] - Optional options to pass to the plugin.\n   * @returns {Eleva} The Eleva instance (for chaining).\n   */\n  use(plugin, options = {}) {\n    if (typeof plugin.install === \"function\") {\n      plugin.install(this, options);\n    }\n    this._plugins.push(plugin);\n    return this;\n  }\n\n  /**\n   * Registers a component with the Eleva instance.\n   *\n   * @param {string} name - The name of the component.\n   * @param {ComponentDefinition} definition - The component definition including setup, template, style, and children.\n   * @returns {Eleva} The Eleva instance (for chaining).\n   */\n  component(name, definition) {\n    this._components[name] = definition;\n    return this;\n  }\n\n  /**\n   * Mounts a registered component to a DOM element.\n   *\n   * @param {HTMLElement} container - A DOM element where the component will be mounted.\n   * @param {string|ComponentDefinition} compName - The name of the component to mount or a component definition.\n   * @param {Object<string, any>} [props={}] - Optional properties to pass to the component.\n   * @returns {object|Promise<object>} An object representing the mounted component instance, or a Promise that resolves to it for asynchronous setups.\n   * @throws {Error} If the container is not found or if the component is not registered.\n   */\n  mount(container, compName, props = {}) {\n    if (!container) throw new Error(`Container not found: ${container}`);\n\n    let definition;\n    if (typeof compName === \"string\") {\n      definition = this._components[compName];\n      if (!definition)\n        throw new Error(`Component \"${compName}\" not registered.`);\n    } else if (typeof compName === \"object\") {\n      definition = compName;\n    } else {\n      throw new Error(\"Invalid component parameter.\");\n    }\n\n    /**\n     * Destructure the component definition to access core functionality.\n     * - setup: Optional function for component initialization and state management\n     * - template: Required function that returns the component's HTML structure\n     * - style: Optional function for component-scoped CSS styles\n     * - children: Optional object defining nested child components\n     */\n    const { setup, template, style, children } = definition;\n\n    /**\n     * Creates the initial context object for the component instance.\n     * This context provides core functionality and will be merged with setup data.\n     * @type {Object<string, any>}\n     * @property {Object<string, any>} props - Component properties passed during mounting\n     * @property {Emitter} emitter - Event emitter instance for component event handling\n     * @property {function(any): Signal} signal - Factory function to create reactive Signal instances\n     * @property {Object<string, function(): void>} ...lifecycleHooks - Prepared lifecycle hook functions\n     */\n    const context = {\n      props,\n      emitter: this.emitter,\n      signal: (v) => new Signal(v),\n      ...this._prepareLifecycleHooks(),\n    };\n\n    /**\n     * Processes the mounting of the component.\n     *\n     * @param {Object<string, any>} data - Data returned from the component's setup function.\n     * @returns {object} An object with the container, merged context data, and an unmount function.\n     */\n    const processMount = (data) => {\n      const mergedContext = { ...context, ...data };\n      const watcherUnsubscribers = [];\n      const childInstances = [];\n      const cleanupListeners = [];\n\n      if (!this._isMounted) {\n        mergedContext.onBeforeMount && mergedContext.onBeforeMount();\n      } else {\n        mergedContext.onBeforeUpdate && mergedContext.onBeforeUpdate();\n      }\n\n      /**\n       * Renders the component by parsing the template, patching the DOM,\n       * processing events, injecting styles, and mounting child components.\n       */\n      const render = () => {\n        const newHtml = TemplateEngine.parse(\n          template(mergedContext),\n          mergedContext\n        );\n        this.renderer.patchDOM(container, newHtml);\n        this._processEvents(container, mergedContext, cleanupListeners);\n        this._injectStyles(container, compName, style, mergedContext);\n        this._mountChildren(container, children, childInstances);\n        if (!this._isMounted) {\n          mergedContext.onMount && mergedContext.onMount();\n          this._isMounted = true;\n        } else {\n          mergedContext.onUpdate && mergedContext.onUpdate();\n        }\n      };\n\n      /**\n       * Sets up reactive watchers for all Signal instances in the component's data.\n       * When a Signal's value changes, the component will re-render to reflect the updates.\n       * Stores unsubscribe functions to clean up watchers when component unmounts.\n       */\n      Object.values(data).forEach((val) => {\n        if (val instanceof Signal) watcherUnsubscribers.push(val.watch(render));\n      });\n\n      render();\n\n      return {\n        container,\n        data: mergedContext,\n        /**\n         * Unmounts the component, cleaning up watchers and listeners, child components, and clearing the container.\n         *\n         * @returns {void}\n         */\n        unmount: () => {\n          watcherUnsubscribers.forEach((fn) => fn());\n          cleanupListeners.forEach((fn) => fn());\n          childInstances.forEach((child) => child.unmount());\n          mergedContext.onUnmount && mergedContext.onUnmount();\n          container.innerHTML = \"\";\n        },\n      };\n    };\n\n    // Handle asynchronous setup.\n    return Promise.resolve(\n      typeof setup === \"function\" ? setup(context) : {}\n    ).then((data) => processMount(data));\n  }\n\n  /**\n   * Prepares default no-operation lifecycle hook functions.\n   *\n   * @returns {Object<string, function(): void>} An object with keys for lifecycle hooks mapped to empty functions.\n   * @private\n   */\n  _prepareLifecycleHooks() {\n    return this._lifecycleHooks.reduce((acc, hook) => {\n      acc[hook] = () => {};\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Processes DOM elements for event binding based on attributes starting with \"@\".\n   * Tracks listeners for cleanup during unmount.\n   *\n   * @param {HTMLElement} container - The container element in which to search for events.\n   * @param {Object<string, any>} context - The current context containing event handler definitions.\n   * @param {Array<Function>} cleanupListeners - Array to collect cleanup functions for each event listener.\n   * @private\n   */\n  _processEvents(container, context, cleanupListeners) {\n    container.querySelectorAll(\"*\").forEach((el) => {\n      [...el.attributes].forEach(({ name, value }) => {\n        if (name.startsWith(\"@\")) {\n          const event = name.slice(1);\n          const handler = TemplateEngine.evaluate(value, context);\n          if (typeof handler === \"function\") {\n            el.addEventListener(event, handler);\n            el.removeAttribute(name);\n            cleanupListeners.push(() => el.removeEventListener(event, handler));\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Injects scoped styles into the component's container.\n   *\n   * @param {HTMLElement} container - The container element.\n   * @param {string} compName - The component name used to identify the style element.\n   * @param {function(Object<string, any>): string} [styleFn] - A function that returns CSS styles as a string.\n   * @param {Object<string, any>} context - The current context for style interpolation.\n   * @private\n   */\n  _injectStyles(container, compName, styleFn, context) {\n    if (styleFn) {\n      let styleEl = container.querySelector(\n        `style[data-eleva-style=\"${compName}\"]`\n      );\n      if (!styleEl) {\n        styleEl = document.createElement(\"style\");\n        styleEl.setAttribute(\"data-eleva-style\", compName);\n        container.appendChild(styleEl);\n      }\n      styleEl.textContent = TemplateEngine.parse(styleFn(context), context);\n    }\n  }\n\n  /**\n   * Mounts child components within the parent component's container.\n   *\n   * @param {HTMLElement} container - The parent container element.\n   * @param {Object<string, ComponentDefinition>} [children] - An object mapping child component selectors to their definitions.\n   * @param {Array<object>} childInstances - An array to store the mounted child component instances.\n   * @private\n   */\n  _mountChildren(container, children, childInstances) {\n    childInstances.forEach((child) => child.unmount());\n    childInstances.length = 0;\n\n    Object.keys(children || {}).forEach((childSelector) => {\n      container.querySelectorAll(childSelector).forEach((childEl) => {\n        const props = {};\n        [...childEl.attributes].forEach(({ name, value }) => {\n          if (name.startsWith(\"eleva-prop-\")) {\n            props[name.slice(\"eleva-prop-\".length)] = value;\n          }\n        });\n        const instance = this.mount(childEl, children[childSelector], props);\n        childInstances.push(instance);\n      });\n    });\n  }\n}\n"],"names":["TemplateEngine","parse","template","data","trim","replace","_","expr","value","this","evaluate","undefined","keys","Object","values","result","Function","error","console","expression","message","Signal","constructor","_value","_watchers","Set","_pending","newVal","_notifyWatchers","watch","fn","add","delete","queueMicrotask","forEach","Emitter","events","on","event","handler","push","off","filter","h","emit","args","Renderer","patchDOM","container","newHtml","tempContainer","document","createElement","innerHTML","diff","oldParent","newParent","isEqualNode","oldNodes","childNodes","Array","from","newNodes","max","Math","length","i","oldNode","newNode","nodeType","Node","ELEMENT_NODE","oldKey","getAttribute","newKey","replaceChild","cloneNode","nodeName","TEXT_NODE","updateAttributes","nodeValue","removeChild","appendChild","oldEl","newEl","attributeToPropertyMap","checked","selected","disabled","attributes","attr","name","startsWith","hasAttribute","removeAttribute","setAttribute","config","_components","_plugins","_lifecycleHooks","_isMounted","emitter","renderer","use","plugin","options","install","component","definition","mount","compName","props","Error","setup","style","children","context","signal","v","_prepareLifecycleHooks","processMount","mergedContext","watcherUnsubscribers","childInstances","cleanupListeners","onBeforeUpdate","onBeforeMount","render","_processEvents","_injectStyles","_mountChildren","onUpdate","onMount","val","unmount","child","onUnmount","Promise","resolve","then","reduce","acc","hook","querySelectorAll","el","slice","addEventListener","removeEventListener","styleFn","styleEl","querySelector","textContent","childSelector","childEl","instance"],"mappings":"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"}