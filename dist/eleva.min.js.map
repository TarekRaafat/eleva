{"version":3,"file":"eleva.min.js","sources":["../src/modules/TemplateEngine.js","../src/modules/Signal.js","../src/modules/Emitter.js","../src/modules/Renderer.js","../src/core/Eleva.js"],"sourcesContent":["\"use strict\";\n\n/**\n * @class üîí TemplateEngine\n * @classdesc Secure interpolation & dynamic attribute parsing.\n * Provides methods to parse template strings by replacing interpolation expressions\n * with dynamic data values and to evaluate expressions within a given data context.\n */\nexport class TemplateEngine {\n  /**\n   * Parses a template string and replaces interpolation expressions with corresponding values.\n   *\n   * @param {string} template - The template string containing expressions in the format `{{ expression }}`.\n   * @param {Object<string, any>} data - The data object to use for evaluating expressions.\n   * @returns {string} The resulting string with evaluated values.\n   */\n  static parse(template, data) {\n    if (!template || typeof template !== \"string\") return template;\n\n    return template.replace(/\\{\\{\\s*(.*?)\\s*\\}\\}/g, (_, expr) => {\n      return this.evaluate(expr, data);\n    });\n  }\n\n  /**\n   * Evaluates a JavaScript expression using the provided data context.\n   *\n   * @param {string} expr - The JavaScript expression to evaluate.\n   * @param {Object<string, any>} data - The data context for evaluating the expression.\n   * @returns {any} The result of the evaluated expression, or an empty string if undefined or on error.\n   */\n  static evaluate(expr, data) {\n    if (!expr || typeof expr !== \"string\") return expr;\n\n    try {\n      const compiledFn = new Function(\"data\", `with(data) { return ${expr} }`);\n      return compiledFn(data);\n    } catch (error) {\n      console.error(`Template evaluation error:`, {\n        expression: expr,\n        data,\n        error: error.message,\n      });\n      return \"\";\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class ‚ö° Signal\n * @classdesc Fine-grained reactivity.\n * A reactive data holder that notifies registered watchers when its value changes,\n * enabling fine-grained DOM patching rather than full re-renders.\n */\nexport class Signal {\n  /**\n   * Creates a new Signal instance.\n   *\n   * @param {*} value - The initial value of the signal.\n   */\n  constructor(value) {\n    /** @private {*} Internal storage for the signal's current value */\n    this._value = value;\n    /** @private {Set<function>} Collection of callback functions to be notified when value changes */\n    this._watchers = new Set();\n    /** @private {boolean} Flag to prevent multiple synchronous watcher notifications and batch updates into microtasks */\n    this._pending = false;\n  }\n\n  /**\n   * Gets the current value of the signal.\n   *\n   * @returns {*} The current value.\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * Sets a new value for the signal and notifies all registered watchers if the value has changed.\n   *\n   * @param {*} newVal - The new value to set.\n   */\n  set value(newVal) {\n    if (newVal !== this._value) {\n      this._value = newVal;\n      this._notifyWatchers();\n    }\n  }\n\n  /**\n   * Registers a watcher function that will be called whenever the signal's value changes.\n   *\n   * @param {function(any): void} fn - The callback function to invoke on value change.\n   * @returns {function(): boolean} A function to unsubscribe the watcher.\n   */\n  watch(fn) {\n    this._watchers.add(fn);\n    return () => this._watchers.delete(fn);\n  }\n\n  /**\n   * Notifies all registered watchers of a value change using microtask scheduling.\n   * Uses a pending flag to batch multiple synchronous updates into a single notification.\n   * All watcher callbacks receive the current value when executed.\n   *\n   * @private\n   * @returns {void}\n   */\n  _notifyWatchers() {\n    if (!this._pending) {\n      this._pending = true;\n      queueMicrotask(() => {\n        this._pending = false;\n        this._watchers.forEach((fn) => fn(this._value));\n      });\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * @class üéôÔ∏è Emitter\n * @classdesc Robust inter-component communication with event bubbling.\n * Implements a basic publish-subscribe pattern for event handling, allowing components\n * to communicate through custom events.\n */\nexport class Emitter {\n  /**\n   * Creates a new Emitter instance.\n   */\n  constructor() {\n    /** @type {Object.<string, Function[]>} Storage for event handlers mapped by event name */\n    this.events = {};\n  }\n\n  /**\n   * Registers an event handler for the specified event.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function(...any): void} handler - The function to call when the event is emitted.\n   */\n  on(event, handler) {\n    (this.events[event] || (this.events[event] = [])).push(handler);\n  }\n\n  /**\n   * Removes a previously registered event handler.\n   *\n   * @param {string} event - The name of the event.\n   * @param {function(...any): void} handler - The handler function to remove.\n   */\n  off(event, handler) {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter((h) => h !== handler);\n    }\n  }\n\n  /**\n   * Emits an event, invoking all handlers registered for that event.\n   *\n   * @param {string} event - The event name.\n   * @param {...any} args - Additional arguments to pass to the event handlers.\n   */\n  emit(event, ...args) {\n    (this.events[event] || []).forEach((handler) => handler(...args));\n  }\n}\n","\"use strict\";\n\n/**\n * @class üé® Renderer\n * @classdesc Handles DOM patching, diffing, and attribute updates.\n * Provides methods for efficient DOM updates by diffing the new and old DOM structures\n * and applying only the necessary changes.\n */\nexport class Renderer {\n  /**\n   * Patches the DOM of a container element with new HTML content.\n   *\n   * @param {HTMLElement} container - The container element to patch.\n   * @param {string} newHtml - The new HTML content to apply.\n   * @throws {Error} If container is not an HTMLElement or newHtml is not a string\n   */\n  patchDOM(container, newHtml) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error(\"Container must be an HTMLElement\");\n    }\n    if (typeof newHtml !== \"string\") {\n      throw new Error(\"newHtml must be a string\");\n    }\n\n    const tempContainer = document.createElement(\"div\");\n    try {\n      tempContainer.innerHTML = newHtml;\n      this.diff(container, tempContainer);\n    } catch (error) {\n      throw new Error(`Failed to patch DOM: ${error.message}`);\n    } finally {\n      tempContainer.innerHTML = \"\";\n    }\n  }\n\n  /**\n   * Diffs two DOM trees (old and new) and applies updates to the old DOM.\n   *\n   * @param {HTMLElement} oldParent - The original DOM element.\n   * @param {HTMLElement} newParent - The new DOM element.\n   * @throws {Error} If either parent is not an HTMLElement\n   */\n  diff(oldParent, newParent) {\n    if (\n      !(oldParent instanceof HTMLElement) ||\n      !(newParent instanceof HTMLElement)\n    ) {\n      throw new Error(\"Both parents must be HTMLElements\");\n    }\n\n    // Fast path for identical nodes\n    if (oldParent.isEqualNode(newParent)) return;\n\n    const oldNodes = Array.from(oldParent.childNodes);\n    const newNodes = Array.from(newParent.childNodes);\n    const max = Math.max(oldNodes.length, newNodes.length);\n\n    // Batch DOM operations for better performance\n    const operations = [];\n\n    for (let i = 0; i < max; i++) {\n      const oldNode = oldNodes[i];\n      const newNode = newNodes[i];\n\n      // Case 1: Append new nodes that don't exist in the old tree.\n      if (!oldNode && newNode) {\n        operations.push(() => oldParent.appendChild(newNode.cloneNode(true)));\n        continue;\n      }\n      // Case 2: Remove old nodes not present in the new tree.\n      if (oldNode && !newNode) {\n        operations.push(() => oldParent.removeChild(oldNode));\n        continue;\n      }\n\n      // Case 3: For element nodes, compare keys if available.\n      if (\n        oldNode?.nodeType === Node.ELEMENT_NODE &&\n        newNode?.nodeType === Node.ELEMENT_NODE\n      ) {\n        const oldKey = oldNode.getAttribute(\"key\");\n        const newKey = newNode.getAttribute(\"key\");\n        if (oldKey || newKey) {\n          if (oldKey !== newKey) {\n            operations.push(() =>\n              oldParent.replaceChild(newNode.cloneNode(true), oldNode)\n            );\n            continue;\n          }\n        }\n      }\n\n      // Case 4: Replace nodes if types or tag names differ.\n      if (\n        oldNode?.nodeType !== newNode?.nodeType ||\n        oldNode?.nodeName !== newNode?.nodeName\n      ) {\n        operations.push(() =>\n          oldParent.replaceChild(newNode.cloneNode(true), oldNode)\n        );\n        continue;\n      }\n\n      // Case 5: For text nodes, update content if different.\n      if (oldNode?.nodeType === Node.TEXT_NODE) {\n        if (oldNode.nodeValue !== newNode.nodeValue) {\n          oldNode.nodeValue = newNode.nodeValue;\n        }\n        continue;\n      }\n\n      // Case 6: For element nodes, update attributes and then diff children.\n      if (oldNode?.nodeType === Node.ELEMENT_NODE) {\n        this.updateAttributes(oldNode, newNode);\n        this.diff(oldNode, newNode);\n      }\n    }\n\n    // Execute batched operations\n    operations.forEach((op) => op());\n  }\n\n  /**\n   * Updates the attributes of an element to match those of a new element.\n   *\n   * @param {HTMLElement} oldEl - The element to update.\n   * @param {HTMLElement} newEl - The element providing the updated attributes.\n   * @throws {Error} If either element is not an HTMLElement\n   */\n  updateAttributes(oldEl, newEl) {\n    if (!(oldEl instanceof HTMLElement) || !(newEl instanceof HTMLElement)) {\n      throw new Error(\"Both elements must be HTMLElements\");\n    }\n\n    // Special cases for properties that don't map directly to attributes\n    const specialProperties = {\n      value: true,\n      checked: true,\n      selected: true,\n      disabled: true,\n      readOnly: true,\n      multiple: true,\n    };\n\n    // Batch attribute operations for better performance\n    const operations = [];\n\n    // Remove old attributes that no longer exist\n    Array.from(oldEl.attributes).forEach((attr) => {\n      if (attr.name.startsWith(\"@\")) return;\n      if (!newEl.hasAttribute(attr.name)) {\n        operations.push(() => oldEl.removeAttribute(attr.name));\n      }\n    });\n\n    // Add or update attributes from newEl\n    Array.from(newEl.attributes).forEach((attr) => {\n      if (attr.name.startsWith(\"@\")) return;\n      if (oldEl.getAttribute(attr.name) !== attr.value) {\n        operations.push(() => {\n          oldEl.setAttribute(attr.name, attr.value);\n\n          // Convert kebab-case to camelCase for property names\n          const propName = attr.name.replace(/-([a-z])/g, (_, letter) =>\n            letter.toUpperCase()\n          );\n\n          // Handle special cases first\n          if (specialProperties[propName]) {\n            oldEl[propName] = attr.value === \"\" ? true : attr.value;\n          }\n          // Handle ARIA attributes\n          else if (attr.name.startsWith(\"aria-\")) {\n            const ariaName =\n              \"aria\" +\n              attr.name\n                .slice(5)\n                .replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n            oldEl[ariaName] = attr.value;\n          }\n          // Handle data attributes\n          else if (attr.name.startsWith(\"data-\")) {\n            // dataset handles the camelCase conversion automatically\n            const dataName = attr.name.slice(5);\n            oldEl.dataset[dataName] = attr.value;\n          }\n          // Handle standard properties\n          else if (propName in oldEl) {\n            oldEl[propName] = attr.value;\n          }\n        });\n      }\n    });\n\n    // Execute batched operations\n    operations.forEach((op) => op());\n  }\n}\n","\"use strict\";\n\nimport { TemplateEngine } from \"../modules/TemplateEngine.js\";\nimport { Signal } from \"../modules/Signal.js\";\nimport { Emitter } from \"../modules/Emitter.js\";\nimport { Renderer } from \"../modules/Renderer.js\";\n\n/**\n * Defines the structure and behavior of a component.\n * @typedef {Object} ComponentDefinition\n * @property {function(Object<string, any>): (Object<string, any>|Promise<Object<string, any>>)} [setup]\n *           Optional setup function that initializes the component's reactive state and lifecycle.\n *           Receives props and context as an argument and should return an object containing the component's state.\n *           Can return either a synchronous object or a Promise that resolves to an object for async initialization.\n *\n * @property {function(Object<string, any>): string} template\n *           Required function that defines the component's HTML structure.\n *           Receives the merged context (props + setup data) and must return an HTML template string.\n *           Supports dynamic expressions using {{ }} syntax for reactive data binding.\n *\n * @property {function(Object<string, any>): string} [style]\n *           Optional function that defines component-scoped CSS styles.\n *           Receives the merged context and returns a CSS string that will be automatically scoped to the component.\n *           Styles are injected into the component's container and only affect elements within it.\n *\n * @property {Object<string, ComponentDefinition>} [children]\n *           Optional object that defines nested child components.\n *           Keys are CSS selectors that match elements in the template where child components should be mounted.\n *           Values are ComponentDefinition objects that define the structure and behavior of each child component.\n */\n\n/**\n * @class üß© Eleva\n * @classdesc Signal-based component runtime framework with lifecycle hooks, scoped styles, and plugin support.\n * Manages component registration, plugin integration, event handling, and DOM rendering.\n */\nexport class Eleva {\n  /**\n   * Creates a new Eleva instance.\n   *\n   * @param {string} name - The name of the Eleva instance.\n   * @param {Object<string, any>} [config={}] - Optional configuration for the instance.\n   */\n  constructor(name, config = {}) {\n    /** @type {string} The unique identifier name for this Eleva instance */\n    this.name = name;\n    /** @type {Object<string, any>} Optional configuration object for the Eleva instance */\n    this.config = config;\n    /** @type {Object<string, ComponentDefinition>} Object storing registered component definitions by name */\n    this._components = {};\n    /** @private {Array<Object>} Collection of installed plugin instances */\n    this._plugins = [];\n    /** @private {string[]} Array of lifecycle hook names supported by the component */\n    this._lifecycleHooks = [\n      \"onBeforeMount\",\n      \"onMount\",\n      \"onBeforeUpdate\",\n      \"onUpdate\",\n      \"onUnmount\",\n    ];\n    /** @private {boolean} Flag indicating if component is currently mounted */\n    this._isMounted = false;\n    /** @private {Emitter} Instance of the event emitter for handling component events */\n    this.emitter = new Emitter();\n    /** @private {Renderer} Instance of the renderer for handling DOM updates and patching */\n    this.renderer = new Renderer();\n  }\n\n  /**\n   * Integrates a plugin with the Eleva framework.\n   *\n   * @param {Object} plugin - The plugin object which should have an `install` function.\n   * @param {Object<string, any>} [options={}] - Optional options to pass to the plugin.\n   * @returns {Eleva} The Eleva instance (for chaining).\n   */\n  use(plugin, options = {}) {\n    if (typeof plugin.install === \"function\") {\n      plugin.install(this, options);\n    }\n    this._plugins.push(plugin);\n    return this;\n  }\n\n  /**\n   * Registers a component with the Eleva instance.\n   *\n   * @param {string} name - The name of the component.\n   * @param {ComponentDefinition} definition - The component definition including setup, template, style, and children.\n   * @returns {Eleva} The Eleva instance (for chaining).\n   */\n  component(name, definition) {\n    this._components[name] = definition;\n    return this;\n  }\n\n  /**\n   * Mounts a registered component to a DOM element.\n   *\n   * @param {HTMLElement} container - A DOM element where the component will be mounted.\n   * @param {string|ComponentDefinition} compName - The name of the component to mount or a component definition.\n   * @param {Object<string, any>} [props={}] - Optional properties to pass to the component.\n   * @returns {object|Promise<object>} An object representing the mounted component instance, or a Promise that resolves to it for asynchronous setups.\n   * @throws {Error} If the container is not found or if the component is not registered.\n   */\n  mount(container, compName, props = {}) {\n    if (!container) throw new Error(`Container not found: ${container}`);\n\n    let definition;\n    if (typeof compName === \"string\") {\n      definition = this._components[compName];\n      if (!definition)\n        throw new Error(`Component \"${compName}\" not registered.`);\n    } else if (typeof compName === \"object\") {\n      definition = compName;\n    } else {\n      throw new Error(\"Invalid component parameter.\");\n    }\n\n    /**\n     * Destructure the component definition to access core functionality.\n     * - setup: Optional function for component initialization and state management\n     * - template: Required function that returns the component's HTML structure\n     * - style: Optional function for component-scoped CSS styles\n     * - children: Optional object defining nested child components\n     */\n    const { setup, template, style, children } = definition;\n\n    /**\n     * Creates the initial context object for the component instance.\n     * This context provides core functionality and will be merged with setup data.\n     * @type {Object<string, any>}\n     * @property {Object<string, any>} props - Component properties passed during mounting\n     * @property {Emitter} emitter - Event emitter instance for component event handling\n     * @property {function(any): Signal} signal - Factory function to create reactive Signal instances\n     * @property {Object<string, function(): void>} ...lifecycleHooks - Prepared lifecycle hook functions\n     */\n    const context = {\n      props,\n      emitter: this.emitter,\n      signal: (v) => new Signal(v),\n      ...this._prepareLifecycleHooks(),\n    };\n\n    /**\n     * Processes the mounting of the component.\n     *\n     * @param {Object<string, any>} data - Data returned from the component's setup function.\n     * @returns {object} An object with the container, merged context data, and an unmount function.\n     */\n    const processMount = (data) => {\n      const mergedContext = { ...context, ...data };\n      const watcherUnsubscribers = [];\n      const childInstances = [];\n      const cleanupListeners = [];\n\n      if (!this._isMounted) {\n        mergedContext.onBeforeMount && mergedContext.onBeforeMount();\n      } else {\n        mergedContext.onBeforeUpdate && mergedContext.onBeforeUpdate();\n      }\n\n      /**\n       * Renders the component by parsing the template, patching the DOM,\n       * processing events, injecting styles, and mounting child components.\n       */\n      const render = () => {\n        const newHtml = TemplateEngine.parse(\n          template(mergedContext),\n          mergedContext\n        );\n        this.renderer.patchDOM(container, newHtml);\n        this._processEvents(container, mergedContext, cleanupListeners);\n        this._injectStyles(container, compName, style, mergedContext);\n        this._mountChildren(container, children, childInstances);\n        if (!this._isMounted) {\n          mergedContext.onMount && mergedContext.onMount();\n          this._isMounted = true;\n        } else {\n          mergedContext.onUpdate && mergedContext.onUpdate();\n        }\n      };\n\n      /**\n       * Sets up reactive watchers for all Signal instances in the component's data.\n       * When a Signal's value changes, the component will re-render to reflect the updates.\n       * Stores unsubscribe functions to clean up watchers when component unmounts.\n       */\n      Object.values(data).forEach((val) => {\n        if (val instanceof Signal) watcherUnsubscribers.push(val.watch(render));\n      });\n\n      render();\n\n      return {\n        container,\n        data: mergedContext,\n        /**\n         * Unmounts the component, cleaning up watchers and listeners, child components, and clearing the container.\n         *\n         * @returns {void}\n         */\n        unmount: () => {\n          watcherUnsubscribers.forEach((fn) => fn());\n          cleanupListeners.forEach((fn) => fn());\n          childInstances.forEach((child) => child.unmount());\n          mergedContext.onUnmount && mergedContext.onUnmount();\n          container.innerHTML = \"\";\n        },\n      };\n    };\n\n    // Handle asynchronous setup.\n    return Promise.resolve(\n      typeof setup === \"function\" ? setup(context) : {}\n    ).then((data) => processMount(data));\n  }\n\n  /**\n   * Prepares default no-operation lifecycle hook functions.\n   *\n   * @returns {Object<string, function(): void>} An object with keys for lifecycle hooks mapped to empty functions.\n   * @private\n   */\n  _prepareLifecycleHooks() {\n    return this._lifecycleHooks.reduce((acc, hook) => {\n      acc[hook] = () => {};\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Processes DOM elements for event binding based on attributes starting with \"@\".\n   * Tracks listeners for cleanup during unmount.\n   *\n   * @param {HTMLElement} container - The container element in which to search for events.\n   * @param {Object<string, any>} context - The current context containing event handler definitions.\n   * @param {Array<Function>} cleanupListeners - Array to collect cleanup functions for each event listener.\n   * @private\n   */\n  _processEvents(container, context, cleanupListeners) {\n    container.querySelectorAll(\"*\").forEach((el) => {\n      [...el.attributes].forEach(({ name, value }) => {\n        if (name.startsWith(\"@\")) {\n          const event = name.slice(1);\n          const handler = TemplateEngine.evaluate(value, context);\n          if (typeof handler === \"function\") {\n            el.addEventListener(event, handler);\n            el.removeAttribute(name);\n            cleanupListeners.push(() => el.removeEventListener(event, handler));\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Injects scoped styles into the component's container.\n   *\n   * @param {HTMLElement} container - The container element.\n   * @param {string} compName - The component name used to identify the style element.\n   * @param {function(Object<string, any>): string} [styleFn] - A function that returns CSS styles as a string.\n   * @param {Object<string, any>} context - The current context for style interpolation.\n   * @private\n   */\n  _injectStyles(container, compName, styleFn, context) {\n    if (styleFn) {\n      let styleEl = container.querySelector(\n        `style[data-eleva-style=\"${compName}\"]`\n      );\n      if (!styleEl) {\n        styleEl = document.createElement(\"style\");\n        styleEl.setAttribute(\"data-eleva-style\", compName);\n        container.appendChild(styleEl);\n      }\n      styleEl.textContent = TemplateEngine.parse(styleFn(context), context);\n    }\n  }\n\n  /**\n   * Mounts child components within the parent component's container.\n   *\n   * @param {HTMLElement} container - The parent container element.\n   * @param {Object<string, ComponentDefinition>} [children] - An object mapping child component selectors to their definitions.\n   * @param {Array<object>} childInstances - An array to store the mounted child component instances.\n   * @private\n   */\n  _mountChildren(container, children, childInstances) {\n    childInstances.forEach((child) => child.unmount());\n    childInstances.length = 0;\n\n    Object.keys(children || {}).forEach((childSelector) => {\n      container.querySelectorAll(childSelector).forEach((childEl) => {\n        const props = {};\n        [...childEl.attributes].forEach(({ name, value }) => {\n          if (name.startsWith(\"eleva-prop-\")) {\n            props[name.replace(\"eleva-prop-\", \"\")] = value;\n          }\n        });\n        const instance = this.mount(childEl, children[childSelector], props);\n        childInstances.push(instance);\n      });\n    });\n  }\n}\n"],"names":["TemplateEngine","parse","template","data","replace","_","expr","this","evaluate","Function","compiledFn","error","console","expression","message","Signal","constructor","value","_value","_watchers","Set","_pending","newVal","_notifyWatchers","watch","fn","add","delete","queueMicrotask","forEach","Emitter","events","on","event","handler","push","off","filter","h","emit","args","Renderer","patchDOM","container","newHtml","HTMLElement","Error","tempContainer","document","createElement","innerHTML","diff","oldParent","newParent","isEqualNode","oldNodes","Array","from","childNodes","newNodes","max","Math","length","operations","i","oldNode","newNode","nodeType","Node","ELEMENT_NODE","oldKey","getAttribute","newKey","replaceChild","cloneNode","nodeName","TEXT_NODE","updateAttributes","nodeValue","removeChild","appendChild","op","oldEl","newEl","specialProperties","checked","selected","disabled","readOnly","multiple","attributes","attr","name","startsWith","hasAttribute","removeAttribute","setAttribute","propName","letter","toUpperCase","ariaName","slice","dataName","dataset","config","_components","_plugins","_lifecycleHooks","_isMounted","emitter","renderer","use","plugin","options","install","component","definition","mount","compName","props","setup","style","children","context","signal","v","_prepareLifecycleHooks","processMount","mergedContext","watcherUnsubscribers","childInstances","cleanupListeners","onBeforeUpdate","onBeforeMount","render","_processEvents","_injectStyles","_mountChildren","onUpdate","onMount","Object","values","val","unmount","child","onUnmount","Promise","resolve","then","reduce","acc","hook","querySelectorAll","el","addEventListener","removeEventListener","styleFn","styleEl","querySelector","textContent","keys","childSelector","childEl","instance"],"mappings":"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"}