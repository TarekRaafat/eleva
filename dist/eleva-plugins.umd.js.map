{"version":3,"file":"eleva-plugins.umd.js","sources":["../src/plugins/Attr.js","../src/plugins/Router.js"],"sourcesContent":["\"use strict\";\n\n/**\n * A regular expression to match hyphenated lowercase letters.\n * @private\n * @type {RegExp}\n */\nconst CAMEL_RE = /-([a-z])/g;\n\n/**\n * @class ðŸŽ¯ AttrPlugin\n * @classdesc A plugin that provides advanced attribute handling for Eleva components.\n * This plugin extends the renderer with sophisticated attribute processing including:\n * - ARIA attribute handling with proper property mapping\n * - Data attribute management\n * - Boolean attribute processing\n * - Dynamic property detection and mapping\n * - Attribute cleanup and removal\n *\n * @example\n * // Install the plugin\n * const app = new Eleva(\"myApp\");\n * app.use(AttrPlugin);\n *\n * // Use advanced attributes in components\n * app.component(\"myComponent\", {\n *   template: (ctx) => `\n *     <button \n *       aria-expanded=\"${ctx.isExpanded.value}\"\n *       data-user-id=\"${ctx.userId.value}\"\n *       disabled=\"${ctx.isLoading.value}\"\n *       class=\"btn ${ctx.variant.value}\"\n *     >\n *       ${ctx.text.value}\n *     </button>\n *   `\n * });\n */\nexport const AttrPlugin = {\n    /**\n     * Unique identifier for the plugin\n     * @type {string}\n     */\n    name: \"attr\",\n\n    /**\n     * Plugin version\n     * @type {string}\n     */\n    version: \"1.0.0-rc.1\",\n\n    /**\n     * Plugin description\n     * @type {string}\n     */\n    description: \"Advanced attribute handling for Eleva components\",\n\n    /**\n     * Installs the plugin into the Eleva instance\n     * \n     * @param {Object} eleva - The Eleva instance\n     * @param {Object} options - Plugin configuration options\n     * @param {boolean} [options.enableAria=true] - Enable ARIA attribute handling\n     * @param {boolean} [options.enableData=true] - Enable data attribute handling\n     * @param {boolean} [options.enableBoolean=true] - Enable boolean attribute handling\n     * @param {boolean} [options.enableDynamic=true] - Enable dynamic property detection\n     */\n    install(eleva, options = {}) {\n        const {\n            enableAria = true,\n            enableData = true,\n            enableBoolean = true,\n            enableDynamic = true\n        } = options;\n\n        /**\n         * Updates the attributes of an element to match a new element's attributes.\n         * This method provides sophisticated attribute processing including:\n         * - ARIA attribute handling with proper property mapping\n         * - Data attribute management\n         * - Boolean attribute processing\n         * - Dynamic property detection and mapping\n         * - Attribute cleanup and removal\n         *\n         * @param {HTMLElement} oldEl - The original element to update\n         * @param {HTMLElement} newEl - The new element to update\n         * @returns {void}\n         */\n        const updateAttributes = (oldEl, newEl) => {\n            const oldAttrs = oldEl.attributes;\n            const newAttrs = newEl.attributes;\n\n            // Process new attributes\n            for (let i = 0; i < newAttrs.length; i++) {\n                const { name, value } = newAttrs[i];\n\n                // Skip event attributes (handled by event system)\n                if (name.startsWith(\"@\")) continue;\n\n                // Skip if attribute hasn't changed\n                if (oldEl.getAttribute(name) === value) continue;\n\n                // Handle ARIA attributes\n                if (enableAria && name.startsWith(\"aria-\")) {\n                    const prop = \"aria\" + name.slice(5).replace(CAMEL_RE, (_, l) => l.toUpperCase());\n                    oldEl[prop] = value;\n                    oldEl.setAttribute(name, value);\n                }\n                // Handle data attributes\n                else if (enableData && name.startsWith(\"data-\")) {\n                    oldEl.dataset[name.slice(5)] = value;\n                    oldEl.setAttribute(name, value);\n                }\n                // Handle other attributes\n                else {\n                    let prop = name.replace(CAMEL_RE, (_, l) => l.toUpperCase());\n\n                    // Dynamic property detection\n                    if (enableDynamic && !(prop in oldEl) && !Object.getOwnPropertyDescriptor(Object.getPrototypeOf(oldEl), prop)) {\n                        const elementProps = Object.getOwnPropertyNames(Object.getPrototypeOf(oldEl));\n                        const matchingProp = elementProps.find(p =>\n                            p.toLowerCase() === name.toLowerCase() ||\n                            p.toLowerCase().includes(name.toLowerCase()) ||\n                            name.toLowerCase().includes(p.toLowerCase())\n                        );\n\n                        if (matchingProp) {\n                            prop = matchingProp;\n                        }\n                    }\n\n                    const descriptor = Object.getOwnPropertyDescriptor(\n                        Object.getPrototypeOf(oldEl),\n                        prop\n                    );\n                    const hasProperty = prop in oldEl || descriptor;\n\n                    if (hasProperty) {\n                        // Boolean attribute handling\n                        if (enableBoolean) {\n                            const isBoolean =\n                                typeof oldEl[prop] === \"boolean\" ||\n                                (descriptor?.get &&\n                                    typeof descriptor.get.call(oldEl) === \"boolean\");\n\n                            if (isBoolean) {\n                                const boolValue = value !== \"false\" &&\n                                    (value === \"\" || value === prop || value === \"true\");\n                                oldEl[prop] = boolValue;\n\n                                if (boolValue) {\n                                    oldEl.setAttribute(name, \"\");\n                                } else {\n                                    oldEl.removeAttribute(name);\n                                }\n                            } else {\n                                oldEl[prop] = value;\n                                oldEl.setAttribute(name, value);\n                            }\n                        } else {\n                            oldEl[prop] = value;\n                            oldEl.setAttribute(name, value);\n                        }\n                    } else {\n                        oldEl.setAttribute(name, value);\n                    }\n                }\n            }\n\n            // Remove old attributes that are no longer present\n            for (let i = oldAttrs.length - 1; i >= 0; i--) {\n                const name = oldAttrs[i].name;\n                if (!newEl.hasAttribute(name)) {\n                    oldEl.removeAttribute(name);\n                }\n            }\n        };\n\n        // Extend the renderer with the advanced attribute handler\n        if (eleva.renderer) {\n            eleva.renderer.updateAttributes = updateAttributes;\n\n            // Store the original _patchNode method\n            const originalPatchNode = eleva.renderer._patchNode;\n            eleva.renderer._originalPatchNode = originalPatchNode;\n\n            // Override the _patchNode method to use our attribute handler\n            eleva.renderer._patchNode = function (oldNode, newNode) {\n                if (oldNode?._eleva_instance) return;\n\n                if (!this._isSameNode(oldNode, newNode)) {\n                    oldNode.replaceWith(newNode.cloneNode(true));\n                    return;\n                }\n\n                if (oldNode.nodeType === Node.ELEMENT_NODE) {\n                    updateAttributes(oldNode, newNode);\n                    this._diff(oldNode, newNode);\n                } else if (\n                    oldNode.nodeType === Node.TEXT_NODE &&\n                    oldNode.nodeValue !== newNode.nodeValue\n                ) {\n                    oldNode.nodeValue = newNode.nodeValue;\n                }\n            };\n        }\n\n        // Add plugin metadata to the Eleva instance\n        if (!eleva.plugins) {\n            eleva.plugins = new Map();\n        }\n        eleva.plugins.set(this.name, {\n            name: this.name,\n            version: this.version,\n            description: this.description,\n            options\n        });\n\n        // Add utility methods for manual attribute updates\n        eleva.updateElementAttributes = updateAttributes;\n    },\n\n    /**\n     * Uninstalls the plugin from the Eleva instance\n     * \n     * @param {Object} eleva - The Eleva instance\n     */\n    uninstall(eleva) {\n        // Restore original _patchNode method if it exists\n        if (eleva.renderer && eleva.renderer._originalPatchNode) {\n            eleva.renderer._patchNode = eleva.renderer._originalPatchNode;\n            delete eleva.renderer._originalPatchNode;\n        }\n\n        // Remove plugin metadata\n        if (eleva.plugins) {\n            eleva.plugins.delete(this.name);\n        }\n\n        // Remove utility methods\n        delete eleva.updateElementAttributes;\n    }\n};\n","\"use strict\";\n\n/**\n * @typedef {import('eleva').Eleva} Eleva\n * @typedef {import('eleva').Signal} Signal\n * @typedef {import('eleva').ComponentDefinition} ComponentDefinition\n */\n\n/**\n * Simple error handler for the core router.\n * Can be overridden by error handling plugins.\n * Provides consistent error formatting and logging for router operations.\n * @private\n */\nconst CoreErrorHandler = {\n    /**\n     * Handles router errors with basic formatting.\n     * @param {Error} error - The error to handle.\n     * @param {string} context - The context where the error occurred.\n     * @param {Object} details - Additional error details.\n     * @throws {Error} The formatted error.\n     */\n    handle(error, context, details = {}) {\n        const message = `[ElevaRouter] ${context}: ${error.message}`;\n        const formattedError = new Error(message);\n\n        // Preserve original error details\n        formattedError.originalError = error;\n        formattedError.context = context;\n        formattedError.details = details;\n\n        console.error(message, { error, context, details });\n        throw formattedError;\n    },\n\n    /**\n     * Logs a warning without throwing an error.\n     * @param {string} message - The warning message.\n     * @param {Object} details - Additional warning details.\n     */\n    warn(message, details = {}) {\n        console.warn(`[ElevaRouter] ${message}`, details);\n    },\n\n    /**\n     * Logs an error without throwing.\n     * @param {string} message - The error message.\n     * @param {Error} error - The original error.\n     * @param {Object} details - Additional error details.\n     */\n    log(message, error, details = {}) {\n        console.error(`[ElevaRouter] ${message}`, { error, details });\n    }\n};\n\n/**\n * @typedef {Object} RouteLocation\n * @property {string} path - The path of the route (e.g., '/users/123').\n * @property {Object<string, string>} query - An object representing the query parameters.\n * @property {string} fullUrl - The complete URL including hash, path, and query string.\n * @property {Object<string, string>} params - An object containing dynamic route parameters.\n * @property {Object<string, any>} meta - The meta object associated with the matched route.\n * @property {string} [name] - The optional name of the matched route.\n * @property {RouteDefinition} matched - The raw route definition object that was matched.\n */\n\n/**\n * @typedef {(to: RouteLocation, from: RouteLocation | null) => boolean | string | {path: string} | void | Promise<boolean | string | {path: string} | void>} NavigationGuard\n * A function that acts as a guard for navigation. It runs *before* the navigation is confirmed.\n * It can return:\n * - `true` or `undefined`: to allow navigation.\n * - `false`: to abort the navigation.\n * - a `string` (path) or a `location object`: to redirect to a new route.\n */\n\n/**\n * @typedef {(...args: any[]) => void | Promise<void>} NavigationHook\n * A function that acts as a lifecycle hook, typically for side effects. It does not affect navigation flow.\n */\n\n/**\n * @typedef {Object} RouterPlugin\n * @property {string} name - The plugin name.\n * @property {string} [version] - The plugin version.\n * @property {Function} install - The install function that receives the router instance.\n * @property {Function} [destroy] - Optional cleanup function called when the router is destroyed.\n */\n\n/**\n * @typedef {Object} RouteDefinition\n * @property {string} path - The URL path pattern (e.g., '/', '/about', '/users/:id', '*').\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} component - The component to render. Can be a registered name, a definition object, or an async import function.\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [layout] - An optional layout component to wrap the route's component.\n * @property {string} [name] - An optional name for the route.\n * @property {Object<string, any>} [meta] - Optional metadata for the route (e.g., for titles, auth flags).\n * @property {NavigationGuard} [beforeEnter] - A route-specific guard executed before entering the route.\n * @property {NavigationHook} [afterEnter] - A hook executed *after* the route has been entered and the new component is mounted.\n * @property {NavigationGuard} [beforeLeave] - A guard executed *before* leaving the current route.\n * @property {NavigationHook} [afterLeave] - A hook executed *after* leaving the current route and its component has been unmounted.\n */\n\n/**\n * @class Router\n * @classdesc A powerful, reactive, and flexible Router Plugin for Eleva.js.\n * This class manages all routing logic, including state, navigation, and rendering.\n * @private\n */\nclass Router {\n    /**\n     * Creates an instance of the Router.\n     * @param {Eleva} eleva - The Eleva framework instance.\n     * @param {RouterOptions} options - The configuration options for the router.\n     */\n    constructor(eleva, options = {}) {\n        /** @type {Eleva} The Eleva framework instance. */\n        this.eleva = eleva;\n\n        /** @type {RouterOptions} The merged router options. */\n        this.options = {\n            mode: \"hash\",\n            queryParam: \"view\",\n            viewSelector: \"root\",\n            ...options,\n        };\n\n        /** @private @type {RouteDefinition[]} The processed list of route definitions. */\n        this.routes = this._processRoutes(options.routes || []);\n\n        /** @private @type {import('eleva').Emitter} The shared Eleva event emitter for global hooks. */\n        this.emitter = this.eleva.emitter;\n\n        /** @private @type {boolean} A flag indicating if the router has been started. */\n        this.isStarted = false;\n\n        /** @private @type {boolean} A flag to prevent navigation loops from history events. */\n        this._isNavigating = false;\n\n        /** @private @type {Array<() => void>} A collection of cleanup functions for event listeners. */\n        this.eventListeners = [];\n\n        /** @type {Signal<RouteLocation | null>} A reactive signal holding the current route's information. */\n        this.currentRoute = new this.eleva.signal(null);\n\n        /** @type {Signal<RouteLocation | null>} A reactive signal holding the previous route's information. */\n        this.previousRoute = new this.eleva.signal(null);\n\n        /** @type {Signal<Object<string, string>>} A reactive signal holding the current route's parameters. */\n        this.currentParams = new this.eleva.signal({});\n\n        /** @type {Signal<Object<string, string>>} A reactive signal holding the current route's query parameters. */\n        this.currentQuery = new this.eleva.signal({});\n\n        /** @type {Signal<import('eleva').MountResult | null>} A reactive signal for the currently mounted layout instance. */\n        this.currentLayout = new this.eleva.signal(null);\n\n        /** @type {Signal<import('eleva').MountResult | null>} A reactive signal for the currently mounted view (page) instance. */\n        this.currentView = new this.eleva.signal(null);\n\n        /** @private @type {Map<string, RouterPlugin>} Map of registered plugins by name. */\n        this.plugins = new Map();\n\n        /** @type {Object} The error handler instance. Can be overridden by plugins. */\n        this.errorHandler = CoreErrorHandler;\n\n        this._validateOptions();\n    }\n\n    /**\n     * Validates the provided router options.\n     * @private\n     * @throws {Error} If the routing mode is invalid.\n     */\n    _validateOptions() {\n        if (![\"hash\", \"query\", \"history\"].includes(this.options.mode)) {\n            this.errorHandler.handle(\n                new Error(`Invalid routing mode: ${this.options.mode}. Must be \"hash\", \"query\", or \"history\".`),\n                \"Configuration validation failed\"\n            );\n        }\n    }\n\n    /**\n     * Pre-processes route definitions to parse their path segments for efficient matching.\n     * @private\n     * @param {RouteDefinition[]} routes - The raw route definitions.\n     * @returns {RouteDefinition[]} The processed routes.\n     */\n    _processRoutes(routes) {\n        const processedRoutes = [];\n        for (const route of routes) {\n            try {\n                processedRoutes.push({\n                    ...route,\n                    segments: this._parsePathIntoSegments(route.path),\n                });\n            } catch (error) {\n                this.errorHandler.warn(\n                    `Invalid path in route definition \"${route.path || \"undefined\"}\": ${error.message}`,\n                    { route, error }\n                );\n            }\n        }\n        return processedRoutes;\n    }\n\n    /**\n     * Parses a route path string into an array of static and parameter segments.\n     * @private\n     * @param {string} path - The path pattern to parse.\n     * @returns {Array<{type: 'static' | 'param', value?: string, name?: string}>} An array of segment objects.\n     * @throws {Error} If the route path is not a valid string.\n     */\n    _parsePathIntoSegments(path) {\n        if (!path || typeof path !== \"string\") {\n            this.errorHandler.handle(\n                new Error(\"Route path must be a non-empty string\"),\n                \"Path parsing failed\",\n                { path }\n            );\n        }\n\n        const normalizedPath = path.replace(/\\/+/g, \"/\").replace(/\\/$/, \"\") || \"/\";\n\n        if (normalizedPath === \"/\") {\n            return [];\n        }\n\n        return normalizedPath\n            .split(\"/\")\n            .filter(Boolean)\n            .map((segment) => {\n                if (segment.startsWith(\":\")) {\n                    const paramName = segment.substring(1);\n                    if (!paramName) {\n                        this.errorHandler.handle(\n                            new Error(`Invalid parameter segment: ${segment}`),\n                            \"Path parsing failed\",\n                            { segment, path }\n                        );\n                    }\n                    return { type: \"param\", name: paramName };\n                }\n                return { type: \"static\", value: segment };\n            });\n    }\n\n    /**\n     * Finds the view element within a container using multiple selector strategies.\n     * @private\n     * @param {HTMLElement} container - The parent element to search within.\n     * @returns {HTMLElement} The found view element or the container itself as a fallback.\n     */\n    _findViewElement(container) {\n        const selector = this.options.viewSelector;\n        return (\n            container.querySelector(`#${selector}`) ||\n            container.querySelector(`.${selector}`) ||\n            container.querySelector(`[data-${selector}]`) ||\n            container.querySelector(selector) ||\n            container\n        );\n    }\n\n    /**\n     * Starts the router, initializes event listeners, and performs the initial navigation.\n     * @returns {Promise<void>}\n     */\n    async start() {\n        if (this.isStarted) {\n            this.errorHandler.warn(\"Router is already started\");\n            return;\n        }\n        if (typeof window === \"undefined\") {\n            this.errorHandler.warn(\n                \"Router start skipped: `window` object not available (SSR environment)\"\n            );\n            return;\n        }\n        if (\n            typeof document !== \"undefined\" &&\n            !document.querySelector(this.options.mount)\n        ) {\n            this.errorHandler.warn(\n                `Mount element \"${this.options.mount}\" was not found in the DOM. The router will not start.`,\n                { mountSelector: this.options.mount }\n            );\n            return;\n        }\n        const handler = () => this._handleRouteChange();\n        if (this.options.mode === \"hash\") {\n            window.addEventListener(\"hashchange\", handler);\n            this.eventListeners.push(() =>\n                window.removeEventListener(\"hashchange\", handler)\n            );\n        } else {\n            window.addEventListener(\"popstate\", handler);\n            this.eventListeners.push(() =>\n                window.removeEventListener(\"popstate\", handler)\n            );\n        }\n        this.isStarted = true;\n        await this._handleRouteChange();\n    }\n\n    /**\n     * Stops the router and cleans up all event listeners and mounted components.\n     * @returns {Promise<void>}\n     */\n    async destroy() {\n        if (!this.isStarted) return;\n\n        // Clean up plugins\n        for (const plugin of this.plugins.values()) {\n            if (typeof plugin.destroy === 'function') {\n                try {\n                    await plugin.destroy(this);\n                } catch (error) {\n                    this.errorHandler.log(`Plugin ${plugin.name} destroy failed`, error);\n                }\n            }\n        }\n\n        this.eventListeners.forEach((cleanup) => cleanup());\n        this.eventListeners = [];\n        if (this.currentLayout.value) {\n            await this.currentLayout.value.unmount();\n        }\n        this.isStarted = false;\n    }\n\n    /**\n     * Programmatically navigates to a new route.\n     * @param {string | {path: string, query?: object, params?: object, replace?: boolean, state?: object}} location - The target location as a string or object.\n     * @param {object} [params] - Optional route parameters (for string-based location).\n     * @returns {Promise<void>}\n     */\n    async navigate(location, params = {}) {\n        try {\n            const target =\n                typeof location === \"string\" ? { path: location, params } : location;\n            let path = this._buildPath(target.path, target.params || {});\n            const query = target.query || {};\n\n            if (Object.keys(query).length > 0) {\n                const queryString = new URLSearchParams(query).toString();\n                if (queryString) path += `?${queryString}`;\n            }\n\n            if (this._isSameRoute(path, target.params, query)) {\n                return;\n            }\n\n            const navigationSuccessful = await this._proceedWithNavigation(path);\n\n            if (navigationSuccessful) {\n                this._isNavigating = true;\n                const state = target.state || {};\n                const replace = target.replace || false;\n                const historyMethod = replace ? \"replaceState\" : \"pushState\";\n\n                if (this.options.mode === \"hash\") {\n                    if (replace) {\n                        const newUrl = `${window.location.pathname}${window.location.search}#${path}`;\n                        window.history.replaceState(state, \"\", newUrl);\n                    } else {\n                        window.location.hash = path;\n                    }\n                } else {\n                    const url =\n                        this.options.mode === \"query\" ? this._buildQueryUrl(path) : path;\n                    history[historyMethod](state, \"\", url);\n                }\n                queueMicrotask(() => {\n                    this._isNavigating = false;\n                });\n            }\n        } catch (error) {\n            this.errorHandler.log(\"Navigation failed\", error);\n            await this.emitter.emit(\"router:onError\", error);\n        }\n    }\n\n    /**\n     * Builds a URL for query mode.\n     * @private\n     * @param {string} path - The path to set as the query parameter.\n     * @returns {string} The full URL with the updated query string.\n     */\n    _buildQueryUrl(path) {\n        const urlParams = new URLSearchParams(window.location.search);\n        urlParams.set(this.options.queryParam, path.split(\"?\")[0]);\n        return `${window.location.pathname}?${urlParams.toString()}`;\n    }\n\n    /**\n     * Checks if the target route is identical to the current route.\n     * @private\n     * @param {string} path - The target path with query string.\n     * @param {object} params - The target params.\n     * @param {object} query - The target query.\n     * @returns {boolean} - True if the routes are the same.\n     */\n    _isSameRoute(path, params, query) {\n        const current = this.currentRoute.value;\n        if (!current) return false;\n        const [targetPath, queryString] = path.split(\"?\");\n        const targetQuery = query || this._parseQuery(queryString || \"\");\n        return (\n            current.path === targetPath &&\n            JSON.stringify(current.params) === JSON.stringify(params || {}) &&\n            JSON.stringify(current.query) === JSON.stringify(targetQuery)\n        );\n    }\n\n    /**\n     * Injects dynamic parameters into a path string.\n     * @private\n     */\n    _buildPath(path, params) {\n        let result = path;\n        for (const [key, value] of Object.entries(params)) {\n            // Fix: Handle special characters and ensure proper encoding\n            const encodedValue = encodeURIComponent(String(value));\n            result = result.replace(new RegExp(`:${key}\\\\b`, \"g\"), encodedValue);\n        }\n        return result;\n    }\n\n    /**\n     * The handler for browser-initiated route changes (e.g., back/forward buttons).\n     * @private\n     */\n    async _handleRouteChange() {\n        if (this._isNavigating) return;\n        const from = this.currentRoute.value;\n        const toLocation = this._getCurrentLocation();\n\n        const navigationSuccessful = await this._proceedWithNavigation(\n            toLocation.fullUrl\n        );\n\n        // If navigation was blocked by a guard, revert the URL change\n        if (!navigationSuccessful && from) {\n            this.navigate({ path: from.path, query: from.query, replace: true });\n        }\n    }\n\n    /**\n     * Manages the core navigation lifecycle. Runs guards before committing changes.\n     * @private\n     * @param {string} fullPath - The full path (e.g., '/users/123?foo=bar') to navigate to.\n     * @returns {Promise<boolean>} - `true` if navigation succeeded, `false` if aborted.\n     */\n    async _proceedWithNavigation(fullPath) {\n        const from = this.currentRoute.value;\n        const [path, queryString] = (fullPath || \"/\").split(\"?\");\n        const toLocation = {\n            path: path.startsWith(\"/\") ? path : `/${path}`,\n            query: this._parseQuery(queryString),\n            fullUrl: fullPath,\n        };\n\n        let toMatch = this._matchRoute(toLocation.path);\n\n        if (!toMatch) {\n            const notFoundRoute = this.routes.find((route) => route.path === \"*\");\n            if (notFoundRoute) {\n                toMatch = {\n                    route: notFoundRoute,\n                    params: { pathMatch: toLocation.path.substring(1) },\n                };\n            } else {\n                await this.emitter.emit(\n                    \"router:onError\",\n                    new Error(`Route not found: ${toLocation.path}`),\n                    toLocation,\n                    from\n                );\n                return false;\n            }\n        }\n\n        const to = {\n            ...toLocation,\n            params: toMatch.params,\n            meta: toMatch.route.meta || {},\n            name: toMatch.route.name,\n            matched: toMatch.route,\n        };\n\n        try {\n            // 1. Run all *pre-navigation* guards.\n            const canNavigate = await this._runGuards(to, from, toMatch.route);\n            if (!canNavigate) return false;\n\n            // 2. Resolve async components *before* touching the DOM.\n            const { layoutComponent, pageComponent } = await this._resolveComponents(\n                toMatch.route\n            );\n\n            // 3. Unmount the previous view/layout.\n            if (from) {\n                const toLayout = toMatch.route.layout || this.options.globalLayout;\n                const fromLayout = from.matched.layout || this.options.globalLayout;\n\n                const tryUnmount = async (instance) => {\n                    if (!instance) return;\n\n                    try {\n                        await instance.unmount();\n                    } catch (error) {\n                        this.errorHandler.warn(\"Error during component unmount\", { error, instance });\n                    }\n                };\n\n                if (toLayout !== fromLayout) {\n                    await tryUnmount(this.currentLayout.value);\n                    this.currentLayout.value = null;\n                } else {\n                    await tryUnmount(this.currentView.value);\n                    this.currentView.value = null;\n                }\n\n                // 4. Call `afterLeave` hook *after* the old component has been unmounted.\n                if (from.matched.afterLeave) {\n                    await from.matched.afterLeave(to, from);\n                    await this.emitter.emit(\"router:afterLeave\", to, from);\n                }\n            }\n\n            // 5. Update reactive state.\n            this.previousRoute.value = from;\n            this.currentRoute.value = to;\n            this.currentParams.value = to.params || {};\n            this.currentQuery.value = to.query || {};\n\n            // 6. Render the new components.\n            await this._render(layoutComponent, pageComponent, to);\n\n            // 7. Run post-navigation hooks.\n            if (toMatch.route.afterEnter) {\n                await toMatch.route.afterEnter(to, from);\n                await this.emitter.emit(\"router:afterEnter\", to, from);\n            }\n            await this.emitter.emit(\"router:afterEach\", to, from);\n\n            return true;\n        } catch (error) {\n            this.errorHandler.log(\"Error during navigation\", error, { to, from });\n            await this.emitter.emit(\"router:onError\", error, to, from);\n            return false;\n        }\n    }\n\n    /**\n     * Executes all applicable navigation guards for a transition in order.\n     * @private\n     * @returns {Promise<boolean>} - `false` if navigation should be aborted.\n     */\n    async _runGuards(to, from, route) {\n        const guards = [\n            ...(this.options.onBeforeEach ? [this.options.onBeforeEach] : []),\n            ...(from && from.matched.beforeLeave ? [from.matched.beforeLeave] : []),\n            ...(route.beforeEnter ? [route.beforeEnter] : []),\n        ];\n        for (const guard of guards) {\n            const result = await guard(to, from);\n            if (result === false) return false;\n            if (typeof result === \"string\" || typeof result === \"object\") {\n                this.navigate(result);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Resolves a string component definition to a component object.\n     * @private\n     * @param {string} def - The component name to resolve.\n     * @returns {ComponentDefinition} The resolved component.\n     * @throws {Error} If the component is not registered.\n     */\n    _resolveStringComponent(def) {\n        const componentDef = this.eleva._components.get(def);\n        if (!componentDef) {\n            this.errorHandler.handle(\n                new Error(`Component \"${def}\" not registered.`),\n                \"Component resolution failed\",\n                { componentName: def, availableComponents: Array.from(this.eleva._components.keys()) }\n            );\n        }\n        return componentDef;\n    }\n\n    /**\n     * Resolves a function component definition to a component object.\n     * @private\n     * @param {Function} def - The function to resolve.\n     * @returns {Promise<ComponentDefinition>} The resolved component.\n     * @throws {Error} If the function fails to load the component.\n     */\n    async _resolveFunctionComponent(def) {\n        try {\n            const funcStr = def.toString();\n            const isAsyncImport = funcStr.includes(\"import(\") || funcStr.startsWith(\"() =>\");\n\n            const result = await def();\n            return isAsyncImport ? (result.default || result) : result;\n        } catch (error) {\n            this.errorHandler.handle(\n                new Error(`Failed to load async component: ${error.message}`),\n                \"Component resolution failed\",\n                { function: def.toString(), error }\n            );\n        }\n    }\n\n    /**\n     * Validates a component definition object.\n     * @private\n     * @param {any} def - The component definition to validate.\n     * @returns {ComponentDefinition} The validated component.\n     * @throws {Error} If the component definition is invalid.\n     */\n    _validateComponentDefinition(def) {\n        if (!def || typeof def !== \"object\") {\n            this.errorHandler.handle(\n                new Error(`Invalid component definition: ${typeof def}`),\n                \"Component validation failed\",\n                { definition: def }\n            );\n        }\n\n        if (typeof def.template !== \"function\" && typeof def.template !== \"string\") {\n            this.errorHandler.handle(\n                new Error(\"Component missing template property\"),\n                \"Component validation failed\",\n                { definition: def }\n            );\n        }\n\n        return def;\n    }\n\n    /**\n     * Resolves a component definition to a component object.\n     * @private\n     * @param {any} def - The component definition to resolve.\n     * @returns {Promise<ComponentDefinition | null>} The resolved component or null.\n     */\n    async _resolveComponent(def) {\n        if (def === null || def === undefined) {\n            return null;\n        }\n\n        if (typeof def === \"string\") {\n            return this._resolveStringComponent(def);\n        }\n\n        if (typeof def === \"function\") {\n            return await this._resolveFunctionComponent(def);\n        }\n\n        if (def && typeof def === \"object\") {\n            return this._validateComponentDefinition(def);\n        }\n\n        this.errorHandler.handle(\n            new Error(`Invalid component definition: ${typeof def}`),\n            \"Component resolution failed\",\n            { definition: def }\n        );\n    }\n\n    /**\n     * Asynchronously resolves the layout and page components for a route.\n     * @private\n     * @param {RouteDefinition} route - The route to resolve components for.\n     * @returns {Promise<{layoutComponent: ComponentDefinition | null, pageComponent: ComponentDefinition}>}\n     */\n    async _resolveComponents(route) {\n        const effectiveLayout = route.layout || this.options.globalLayout;\n\n        try {\n            const [layoutComponent, pageComponent] = await Promise.all([\n                this._resolveComponent(effectiveLayout),\n                this._resolveComponent(route.component),\n            ]);\n\n            if (!pageComponent) {\n                this.errorHandler.handle(\n                    new Error(`Page component is null or undefined for route: ${route.path}`),\n                    \"Component resolution failed\",\n                    { route: route.path }\n                );\n            }\n\n            return { layoutComponent, pageComponent };\n        } catch (error) {\n            this.errorHandler.log(\n                `Error resolving components for route ${route.path}`,\n                error,\n                { route: route.path }\n            );\n            throw error;\n        }\n    }\n\n    /**\n     * Renders the components for the current route into the DOM.\n     * @private\n     * @param {ComponentDefinition | null} layoutComponent - The pre-loaded layout component.\n     * @param {ComponentDefinition} pageComponent - The pre-loaded page component.\n     */\n    async _render(layoutComponent, pageComponent) {\n        const mountEl = document.querySelector(this.options.mount);\n        if (!mountEl) {\n            this.errorHandler.handle(\n                new Error(`Mount element \"${this.options.mount}\" not found.`),\n                { mountSelector: this.options.mount }\n            );\n        }\n\n        if (layoutComponent) {\n            const layoutInstance = await this.eleva.mount(\n                mountEl,\n                this._wrapComponentWithChildren(layoutComponent)\n            );\n            this.currentLayout.value = layoutInstance;\n            const viewEl = this._findViewElement(layoutInstance.container);\n            const viewInstance = await this.eleva.mount(\n                viewEl,\n                this._wrapComponentWithChildren(pageComponent)\n            );\n            this.currentView.value = viewInstance;\n        } else {\n            const viewInstance = await this.eleva.mount(\n                mountEl,\n                this._wrapComponentWithChildren(pageComponent)\n            );\n            this.currentView.value = viewInstance;\n            this.currentLayout.value = null;\n        }\n    }\n\n    /**\n     * Creates a getter function for router context properties.\n     * @private\n     * @param {string} property - The property name to access.\n     * @param {any} defaultValue - The default value if property is undefined.\n     * @returns {Function} A getter function.\n     */\n    _createRouteGetter(property, defaultValue) {\n        return () => this.currentRoute.value?.[property] ?? defaultValue;\n    }\n\n    /**\n     * Wraps a component definition to inject router-specific context into its setup function.\n     * @private\n     * @param {ComponentDefinition} component - The component to wrap.\n     * @returns {ComponentDefinition} The wrapped component definition.\n     */\n    _wrapComponent(component) {\n        const originalSetup = component.setup;\n        const self = this;\n\n        return {\n            ...component,\n            async setup(ctx) {\n                ctx.router = {\n                    navigate: self.navigate.bind(self),\n                    current: self.currentRoute,\n                    previous: self.previousRoute,\n\n                    // Route property getters\n                    get params() { return self._createRouteGetter('params', {})(); },\n                    get query() { return self._createRouteGetter('query', {})(); },\n                    get path() { return self._createRouteGetter('path', '/')(); },\n                    get fullUrl() { return self._createRouteGetter('fullUrl', window.location.href)(); },\n                    get meta() { return self._createRouteGetter('meta', {})(); }\n                };\n\n                return originalSetup ? await originalSetup(ctx) : {};\n            },\n        };\n    }\n\n    /**\n     * Recursively wraps all child components to ensure they have access to router context.\n     * @private\n     * @param {ComponentDefinition} component - The component to wrap.\n     * @returns {ComponentDefinition} The wrapped component definition.\n     */\n    _wrapComponentWithChildren(component) {\n        const wrappedComponent = this._wrapComponent(component);\n\n        // If the component has children, wrap them too\n        if (\n            wrappedComponent.children &&\n            typeof wrappedComponent.children === \"object\"\n        ) {\n            const wrappedChildren = {};\n            for (const [selector, childComponent] of Object.entries(\n                wrappedComponent.children\n            )) {\n                wrappedChildren[selector] =\n                    this._wrapComponentWithChildren(childComponent);\n            }\n            wrappedComponent.children = wrappedChildren;\n        }\n\n        return wrappedComponent;\n    }\n\n    /**\n     * Gets the current location information from the browser's window object.\n     * @private\n     * @returns {Omit<RouteLocation, 'params' | 'meta' | 'name' | 'matched'>}\n     */\n    _getCurrentLocation() {\n        if (typeof window === \"undefined\")\n            return { path: \"/\", query: {}, fullUrl: \"\" };\n        let path, queryString, fullUrl;\n        switch (this.options.mode) {\n            case \"hash\":\n                fullUrl = window.location.hash.slice(1) || \"/\";\n                [path, queryString] = fullUrl.split(\"?\");\n                break;\n            case \"query\":\n                const urlParams = new URLSearchParams(window.location.search);\n                path = urlParams.get(this.options.queryParam) || \"/\";\n                queryString = window.location.search.slice(1);\n                fullUrl = path;\n                break;\n            default: // 'history' mode\n                path = window.location.pathname || \"/\";\n                queryString = window.location.search.slice(1);\n                fullUrl = `${path}${queryString ? \"?\" + queryString : \"\"}`;\n        }\n        return {\n            path: path.startsWith(\"/\") ? path : `/${path}`,\n            query: this._parseQuery(queryString),\n            fullUrl,\n        };\n    }\n\n    /**\n     * Parses a query string into a key-value object.\n     * @private\n     */\n    _parseQuery(queryString) {\n        const query = {};\n        if (queryString) {\n            new URLSearchParams(queryString).forEach((value, key) => {\n                query[key] = value;\n            });\n        }\n        return query;\n    }\n\n    /**\n     * Matches a given path against the registered routes.\n     * @private\n     * @param {string} path - The path to match.\n     * @returns {{route: RouteDefinition, params: Object<string, string>} | null} The matched route and its params, or null.\n     */\n    _matchRoute(path) {\n        const pathSegments = path.split(\"/\").filter(Boolean);\n\n        for (const route of this.routes) {\n            // Handle the root path as a special case.\n            if (route.path === \"/\") {\n                if (pathSegments.length === 0) return { route, params: {} };\n                continue;\n            }\n\n            if (route.segments.length !== pathSegments.length) continue;\n\n            const params = {};\n            let isMatch = true;\n            for (let i = 0; i < route.segments.length; i++) {\n                const routeSegment = route.segments[i];\n                const pathSegment = pathSegments[i];\n                if (routeSegment.type === \"param\") {\n                    params[routeSegment.name] = decodeURIComponent(pathSegment);\n                } else if (routeSegment.value !== pathSegment) {\n                    isMatch = false;\n                    break;\n                }\n            }\n            if (isMatch) return { route, params };\n        }\n        return null;\n    }\n\n    /** Registers a global pre-navigation guard. */\n    onBeforeEach(guard) {\n        this.options.onBeforeEach = guard;\n    }\n    /** Registers a global hook that runs after a new route component has been mounted *if* the route has an `afterEnter` hook. */\n    onAfterEnter(hook) {\n        this.emitter.on(\"router:afterEnter\", hook);\n    }\n    /** Registers a global hook that runs after a route component has been unmounted *if* the route has an `afterLeave` hook. */\n    onAfterLeave(hook) {\n        this.emitter.on(\"router:afterLeave\", hook);\n    }\n    /** Registers a global hook that runs after a navigation has been confirmed and all hooks have completed. */\n    onAfterEach(hook) {\n        this.emitter.on(\"router:afterEach\", hook);\n    }\n    /** Registers a global error handler for navigation. */\n    onError(handler) {\n        this.emitter.on(\"router:onError\", handler);\n    }\n\n    /**\n     * Registers a plugin with the router.\n     * @param {RouterPlugin} plugin - The plugin to register.\n     */\n    use(plugin, options = {}) {\n        if (typeof plugin.install !== 'function') {\n            this.errorHandler.handle(\n                new Error('Plugin must have an install method'),\n                'Plugin registration failed',\n                { plugin }\n            );\n        }\n\n        // Check if plugin is already registered\n        if (this.plugins.has(plugin.name)) {\n            this.errorHandler.warn(\n                `Plugin \"${plugin.name}\" is already registered`,\n                { existingPlugin: this.plugins.get(plugin.name) }\n            );\n            return;\n        }\n\n        this.plugins.set(plugin.name, plugin);\n        plugin.install(this, options);\n    }\n\n    /**\n     * Gets all registered plugins.\n     * @returns {RouterPlugin[]} Array of registered plugins.\n     */\n    getPlugins() {\n        return Array.from(this.plugins.values());\n    }\n\n    /**\n     * Gets a plugin by name.\n     * @param {string} name - The plugin name.\n     * @returns {RouterPlugin | undefined} The plugin or undefined.\n     */\n    getPlugin(name) {\n        return this.plugins.get(name);\n    }\n\n    /**\n     * Removes a plugin from the router.\n     * @param {string} name - The plugin name.\n     * @returns {boolean} True if the plugin was removed.\n     */\n    removePlugin(name) {\n        const plugin = this.plugins.get(name);\n        if (!plugin) return false;\n\n        // Call destroy if available\n        if (typeof plugin.destroy === 'function') {\n            try {\n                plugin.destroy(this);\n            } catch (error) {\n                this.errorHandler.log(`Plugin ${name} destroy failed`, error);\n            }\n        }\n\n        return this.plugins.delete(name);\n    }\n\n    /**\n     * Sets a custom error handler. Used by error handling plugins.\n     * @param {Object} errorHandler - The error handler object with handle, warn, and log methods.\n     */\n    setErrorHandler(errorHandler) {\n        if (errorHandler &&\n            typeof errorHandler.handle === 'function' &&\n            typeof errorHandler.warn === 'function' &&\n            typeof errorHandler.log === 'function') {\n            this.errorHandler = errorHandler;\n        } else {\n            console.warn('[ElevaRouter] Invalid error handler provided. Must have handle, warn, and log methods.');\n        }\n    }\n}\n\n/**\n * @typedef {Object} RouterOptions\n * @property {string} mount - A CSS selector for the main element where the app is mounted.\n * @property {RouteDefinition[]} routes - An array of route definitions.\n * @property {'hash' | 'query' | 'history'} [mode='hash'] - The routing mode.\n * @property {string} [queryParam='page'] - The query parameter to use in 'query' mode.\n * @property {string} [viewSelector='view'] - The selector for the view element within a layout.\n * @property {boolean} [autoStart=true] - Whether to start the router automatically.\n * @property {NavigationGuard} [onBeforeEach] - A global guard executed before every navigation.\n * @property {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [globalLayout] - A global layout for all routes. Can be overridden by a route's specific layout.\n */\n\n/**\n * @class ðŸš€ RouterPlugin\n * @classdesc A powerful, reactive, and flexible Router Plugin for Eleva.js applications.\n * This plugin provides comprehensive client-side routing functionality including:\n * - Multiple routing modes (hash, history, query)\n * - Navigation guards and lifecycle hooks\n * - Reactive state management\n * - Component resolution and lazy loading\n * - Layout and page component separation\n * - Plugin system for extensibility\n * - Advanced error handling\n *\n * @example\n * // Install the plugin\n * const app = new Eleva(\"myApp\");\n * \n * const HomePage = { template: () => `<h1>Home</h1>` };\n * const AboutPage = { template: () => `<h1>About Us</h1>` };\n * const UserPage = { \n *   template: (ctx) => `<h1>User: ${ctx.router.params.id}</h1>` \n * };\n * \n * app.use(RouterPlugin, {\n *   mount: '#app',\n *   mode: 'hash',\n *   routes: [\n *     { path: '/', component: HomePage },\n *     { path: '/about', component: AboutPage },\n *     { path: '/users/:id', component: UserPage }\n *   ]\n * });\n */\nexport const RouterPlugin = {\n    /**\n     * Unique identifier for the plugin\n     * @type {string}\n     */\n    name: \"router\",\n\n    /**\n     * Plugin version\n     * @type {string}\n     */\n    version: \"1.0.0-rc.1\",\n\n    /**\n     * Plugin description\n     * @type {string}\n     */\n    description: \"Client-side routing for Eleva applications\",\n\n    /**\n     * Installs the RouterPlugin into an Eleva instance.\n     * \n     * @param {Eleva} eleva - The Eleva instance\n     * @param {RouterOptions} options - Router configuration options\n     * @param {string} options.mount - A CSS selector for the main element where the app is mounted\n     * @param {RouteDefinition[]} options.routes - An array of route definitions\n     * @param {'hash' | 'query' | 'history'} [options.mode='hash'] - The routing mode\n     * @param {string} [options.queryParam='page'] - The query parameter to use in 'query' mode\n     * @param {string} [options.viewSelector='view'] - The selector for the view element within a layout\n     * @param {boolean} [options.autoStart=true] - Whether to start the router automatically\n     * @param {NavigationGuard} [options.onBeforeEach] - A global guard executed before every navigation\n     * @param {string | ComponentDefinition | (() => Promise<{default: ComponentDefinition}>)} [options.globalLayout] - A global layout for all routes\n     * \n     * @example\n     * // main.js\n     * import Eleva from './eleva.js';\n     * import { RouterPlugin } from './plugins/RouterPlugin.js';\n     *\n     * const app = new Eleva('myApp');\n     *\n     * const HomePage = { template: () => `<h1>Home</h1>` };\n     * const AboutPage = { template: () => `<h1>About Us</h1>` };\n     *\n     * app.use(RouterPlugin, {\n     *  mount: '#app',\n     *  routes: [\n     *    { path: '/', component: HomePage },\n     *    { path: '/about', component: AboutPage }\n     *  ]\n     * });\n     */\n    install(eleva, options = {}) {\n        if (!options.mount) {\n            throw new Error(\"[RouterPlugin] 'mount' option is required\");\n        }\n\n        if (!options.routes || !Array.isArray(options.routes)) {\n            throw new Error(\"[RouterPlugin] 'routes' option must be an array\");\n        }\n\n        /**\n         * Registers a component definition with the Eleva instance.\n         * This method handles both inline component objects and pre-registered component names.\n         * \n         * @param {any} def - The component definition to register\n         * @param {string} type - The type of component for naming (e.g., \"Route\", \"Layout\")\n         * @returns {string | null} The registered component name or null if no definition provided\n         */\n        const register = (def, type) => {\n            if (!def) return null;\n\n            if (typeof def === \"object\" && def !== null && !def.name) {\n                const name = `Eleva${type}Component_${Math.random()\n                    .toString(36)\n                    .slice(2, 11)}`;\n\n                try {\n                    eleva.component(name, def);\n                    return name;\n                } catch (error) {\n                    throw new Error(`[RouterPlugin] Failed to register ${type} component: ${error.message}`);\n                }\n            }\n            return def;\n        };\n\n        if (options.globalLayout) {\n            options.globalLayout = register(options.globalLayout, \"GlobalLayout\");\n        }\n\n        (options.routes || []).forEach((route) => {\n            route.component = register(route.component, \"Route\");\n            if (route.layout) {\n                route.layout = register(route.layout, \"RouteLayout\");\n            }\n        });\n\n        const router = new Router(eleva, options);\n        eleva.router = router;\n\n        if (options.autoStart !== false) {\n            queueMicrotask(() => router.start());\n        }\n\n        // Add plugin metadata to the Eleva instance\n        if (!eleva.plugins) {\n            eleva.plugins = new Map();\n        }\n        eleva.plugins.set(this.name, {\n            name: this.name,\n            version: this.version,\n            description: this.description,\n            options\n        });\n\n        // Add utility methods for manual router access\n        eleva.navigate = router.navigate.bind(router);\n        eleva.getCurrentRoute = () => router.currentRoute.value;\n        eleva.getRouteParams = () => router.currentParams.value;\n        eleva.getRouteQuery = () => router.currentQuery.value;\n\n        return router;\n    },\n\n    /**\n     * Uninstalls the plugin from the Eleva instance\n     * \n     * @param {Eleva} eleva - The Eleva instance\n     */\n    async uninstall(eleva) {\n        if (eleva.router) {\n            await eleva.router.destroy();\n            delete eleva.router;\n        }\n\n        // Remove plugin metadata\n        if (eleva.plugins) {\n            eleva.plugins.delete(this.name);\n        }\n\n        // Remove utility methods\n        delete eleva.navigate;\n        delete eleva.getCurrentRoute;\n        delete eleva.getRouteParams;\n        delete eleva.getRouteQuery;\n    }\n};\n"],"names":["CAMEL_RE","AttrPlugin","name","version","description","install","eleva","options","enableAria","enableData","enableBoolean","enableDynamic","updateAttributes","oldEl","newEl","oldAttrs","attributes","newAttrs","i","length","value","startsWith","getAttribute","prop","slice","replace","_","l","toUpperCase","setAttribute","dataset","Object","getOwnPropertyDescriptor","getPrototypeOf","elementProps","getOwnPropertyNames","matchingProp","find","p","toLowerCase","includes","descriptor","hasProperty","isBoolean","get","call","boolValue","removeAttribute","hasAttribute","renderer","originalPatchNode","_patchNode","_originalPatchNode","oldNode","newNode","_eleva_instance","_isSameNode","replaceWith","cloneNode","nodeType","Node","ELEMENT_NODE","_diff","TEXT_NODE","nodeValue","plugins","Map","set","updateElementAttributes","uninstall","delete","CoreErrorHandler","handle","error","context","details","message","formattedError","Error","originalError","console","warn","log","Router","constructor","mode","queryParam","viewSelector","routes","_processRoutes","emitter","isStarted","_isNavigating","eventListeners","currentRoute","signal","previousRoute","currentParams","currentQuery","currentLayout","currentView","errorHandler","_validateOptions","processedRoutes","route","push","segments","_parsePathIntoSegments","path","normalizedPath","split","filter","Boolean","map","segment","paramName","substring","type","_findViewElement","container","selector","querySelector","start","window","document","mount","mountSelector","handler","_handleRouteChange","addEventListener","removeEventListener","destroy","plugin","values","forEach","cleanup","unmount","navigate","location","params","target","_buildPath","query","keys","queryString","URLSearchParams","toString","_isSameRoute","navigationSuccessful","_proceedWithNavigation","state","historyMethod","newUrl","pathname","search","history","replaceState","hash","url","_buildQueryUrl","queueMicrotask","emit","urlParams","current","targetPath","targetQuery","_parseQuery","JSON","stringify","result","key","entries","encodedValue","encodeURIComponent","String","RegExp","from","toLocation","_getCurrentLocation","fullUrl","fullPath","toMatch","_matchRoute","notFoundRoute","pathMatch","to","meta","matched","canNavigate","_runGuards","layoutComponent","pageComponent","_resolveComponents","toLayout","layout","globalLayout","fromLayout","tryUnmount","instance","afterLeave","_render","afterEnter","guards","onBeforeEach","beforeLeave","beforeEnter","guard","_resolveStringComponent","def","componentDef","_components","componentName","availableComponents","Array","_resolveFunctionComponent","funcStr","isAsyncImport","default","function","_validateComponentDefinition","definition","template","_resolveComponent","undefined","effectiveLayout","Promise","all","component","mountEl","layoutInstance","_wrapComponentWithChildren","viewEl","viewInstance","_createRouteGetter","property","defaultValue","_wrapComponent","originalSetup","setup","self","ctx","router","bind","previous","href","wrappedComponent","children","wrappedChildren","childComponent","pathSegments","isMatch","routeSegment","pathSegment","decodeURIComponent","onAfterEnter","hook","on","onAfterLeave","onAfterEach","onError","use","has","existingPlugin","getPlugins","getPlugin","removePlugin","setErrorHandler","RouterPlugin","isArray","register","Math","random","autoStart","getCurrentRoute","getRouteParams","getRouteQuery"],"mappings":"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"}